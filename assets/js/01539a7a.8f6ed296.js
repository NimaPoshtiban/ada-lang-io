"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6700],{78820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var a=n(58168),s=(n(96540),n(15680));const i={title:"5. Programming Practices",sidebar_position:5},o=void 0,r={unversionedId:"style-guide/s5/s5",id:"style-guide/s5/s5",title:"5. Programming Practices",description:"Software is always subject to change. The need for this change,",source:"@site/docs/style-guide/s5/s5.mdx",sourceDirName:"style-guide/s5",slug:"/style-guide/s5/",permalink:"/docs/style-guide/s5/",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"5. Programming Practices",sidebar_position:5},sidebar:"styleGuideSidebar",previous:{title:"4.4 Summary",permalink:"/docs/style-guide/s4/04"},next:{title:"5.1 Optional Parts of the Syntax",permalink:"/docs/style-guide/s5/01"}},c={},l=[],d={toc:l},u="wrapper";function h(e){let{components:t,...n}=e;return(0,s.yg)(u,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Software is always subject to change. The need for this change,\neuphemistically known as ",(0,s.yg)("em",{parentName:"p"},'"maintenance"')," arises from a variety of\nsources. Errors need to be corrected as they are discovered. System\nfunctionality may need to be enhanced in planned or unplanned ways.\nInevitably, the requirements change over the lifetime of the system,\nforcing continual system evolution. Often, these modifications are\nconducted long after the software was originally written, usually by\nsomeone other than the original author."),(0,s.yg)("p",null,"Easy and successful modification requires that the software be readable,\nunderstandable, and structured according to accepted practice. If a\nsoftware component cannot be easily understood by a programmer who is\nfamiliar with its intended function, that software component is not\nmaintainable. Techniques that make code readable and comprehensible\nenhance its maintainability. Previous chapters presented techniques such\nas consistent use of naming conventions, clear and well-organized\ncommentary, and proper modularization. This chapter presents consistent\nand logical use of language features."),(0,s.yg)("p",null,"Correctness is one aspect of reliability. While style guidelines cannot\nenforce the use of correct algorithms, they can suggest the use of\ntechniques and language features known to reduce the number or\nlikelihood of failures. Such techniques include program construction\nmethods that reduce the likelihood of errors or that improve program\npredictability by defining behavior in the presence of errors."))}h.isMDXComponent=!0}}]);