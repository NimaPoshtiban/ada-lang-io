"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6731],{75443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>f,frontMatter:()=>g,metadata:()=>y,toc:()=>c});var a=t(58168),i=(t(96540),t(15680)),r=t(20793),o=t(91435),s=t(21432),l=t(79162),d=t(34421);const g={sidebar_position:127},p="A.7 External Files and File Objects",y={unversionedId:"arm/AA-A/AA-A.7",id:"arm/AA-A/AA-A.7",title:"A.7 External Files and File Objects",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-A/AA-A.7.mdx",sourceDirName:"arm/AA-A",slug:"/arm/AA-A/AA-A.7",permalink:"/docs/arm/AA-A/AA-A.7",draft:!1,tags:[],version:"current",sidebarPosition:127,frontMatter:{sidebar_position:127},sidebar:"referenceManualSidebar",previous:{title:"A.6 Input-Output",permalink:"/docs/arm/AA-A/AA-A.6"},next:{title:"A.8 Sequential and Direct Files",permalink:"/docs/arm/AA-A/AA-A.8"}},m={},c=[{value:"Static Semantics",id:"static-semantics",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4}],u={toc:c},A="wrapper";function f(e){let{components:n,...t}=e;return(0,i.yg)(A,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"a7-external-files-and-file-objects"},"A.7 External Files and File Objects"),(0,i.yg)("admonition",{type:"warning"},(0,i.yg)("p",{parentName:"admonition"},"This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"},"tracking issue"))),(0,i.yg)("h4",{id:"static-semantics"},"Static Semantics"),(0,i.yg)(l.A,{mdxType:"MarginText"},"1"),(0,i.yg)("p",null,"Values input from the external environment of the program, or output to the external environment, are considered to occupy ",(0,i.yg)("em",null,"external files"),". An external file can be anything external to the program that can produce a value to be read or receive a value to be written. An external file is identified by a string (the ",(0,i.yg)("em",null,"name"),"). A second string (the ",(0,i.yg)("em",null,"form"),") gives further system-dependent characteristics that may be associated with the file, such as the physical organization or access rights. The conventions governing the interpretation of such strings shall be documented.",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"2/3"),(0,i.yg)(d.A,{items:["AI05-0299-1"],mdxType:"MarginInfo"}),(0,i.yg)("p",null,"Input and output operations are expressed as operations on objects of some ",(0,i.yg)("em",null,"file type"),", rather than directly in terms of the external files. In the remainder of this clause, the term ",(0,i.yg)("em",null,"file")," is always used to refer to a file object; the term ",(0,i.yg)("em",null,"external file")," is used otherwise.",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"3"),(0,i.yg)("p",null,"Input-output for sequential files of values of a single element type is defined by means of the generic package Sequential","_","IO. In order to define sequential input-output for a given element type, an instantiation of this generic unit, with the given type as actual parameter, has to be declared. The resulting package contains the declaration of a file type (called File","_","Type) for files of such elements, as well as the operations applicable to these files, such as the Open, Read, and Write procedures.",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"4/2"),(0,i.yg)(d.A,{items:["AI95-00285-01"],mdxType:"MarginInfo"}),(0,i.yg)("p",null,"Input-output for direct access files is likewise defined by a generic package called Direct","_","IO. Input-output in human-readable form is defined by the (nongeneric) packages Text","_","IO for Character and String data, Wide","_","Text","_","IO for Wide","_","Character and Wide","_","String data, and Wide","_","Wide","_","Text","_","IO for Wide","_","Wide","_","Character and Wide","_","Wide","_","String data. Input-output for files containing streams of elements representing values of possibly different types is defined by means of the (nongeneric) package Streams.Stream","_","IO.",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"5"),(0,i.yg)("p",null,"Before input or output operations can be performed on a file, the file first has to be associated with an external file. While such an association is in effect, the file is said to be ",(0,i.yg)("em",null,"open"),", and otherwise the file is said to be ",(0,i.yg)("em",null,"closed"),".",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"6"),(0,i.yg)("p",null,"The language does not define what happens to external files after the completion of the main program and all the library tasks (in particular, if corresponding files have not been closed). The effect of input-output for access types is unspecified.",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"7"),(0,i.yg)("p",null,"An open file has a ",(0,i.yg)("em",null,"current mode"),", which is a value of one of the following enumeration types: ",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"8"),(0,i.yg)(s.A,{language:"ada",mdxType:"CodeBlock"},"type File","_","Mode is (In","_","File, Inout","_","File, Out","_","File);  --  for Direct","_","IO","\n"),(0,i.yg)(l.A,{mdxType:"MarginText"},"9"),(0,i.yg)("p",{class:"Indented4"},"These values correspond respectively to the cases where only reading, both reading and writing, or only writing are to be performed. ",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"10/2"),(0,i.yg)(d.A,{items:["AI95-00285-01"],mdxType:"MarginInfo"}),(0,i.yg)(s.A,{language:"ada",mdxType:"CodeBlock"},"type File","_","Mode is (In","_","File, Out","_","File, Append","_","File);","\n","--  for Sequential","_","IO, Text","_","IO, Wide","_","Text","_","IO, Wide","_","Wide","_","Text","_","IO, and Stream","_","IO","\n"),(0,i.yg)(l.A,{mdxType:"MarginText"},"11"),(0,i.yg)("p",{class:"Indented4"},"These values correspond respectively to the cases where only reading, only writing, or only appending are to be performed.",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"12"),(0,i.yg)("p",{class:"Indented4"},"The mode of a file can be changed. ",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"13/5"),(0,i.yg)(d.A,{items:["AI95-00285-01","AI12-0449-1"],mdxType:"MarginInfo"}),(0,i.yg)("p",null,"Several file management operations are common to Sequential","_","IO, Direct","_","IO, Text","_","IO, Wide","_","Text","_","IO, and Wide","_","Wide","_","Text","_","IO. These operations are described in ",(0,i.yg)("a",{href:"../AA-A/AA-A.8#Subclause_A.8.2"},"A.8.2")," for sequential and direct files. Any additional effects concerning text input-output are described in ",(0,i.yg)("a",{href:"../AA-A/AA-A.10#Subclause_A.10.2"},"A.10.2"),".",(0,i.yg)("br",null)),(0,i.yg)(l.A,{mdxType:"MarginText"},"14/5"),(0,i.yg)(d.A,{items:["AI05-0299-1","AI12-0449-1"],mdxType:"MarginInfo"}),(0,i.yg)("p",null,"The exceptions that can be propagated by the execution of an input-output subprogram are defined in the package IO","_","Exceptions; the situations in which they can be propagated are described following the description of the subprogram (and in ",(0,i.yg)("a",{href:"../AA-A/AA-A.13"},"A.13"),"). The exceptions Storage","_","Error and Program","_","Error may be propagated. (Program","_","Error can only be propagated due to errors made by the caller of the subprogram.) Finally, exceptions can be propagated in certain implementation-defined situations. ",(0,i.yg)("br",null)),(0,i.yg)(o.A,{mdxType:"AnnotatedOnly"},(0,i.yg)(l.A,{mdxType:"MarginText"},"14.a/2"),(0,i.yg)(r.A,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,i.yg)("em",null,"This paragraph was deleted."),(0,i.yg)("br",null))),(0,i.yg)(o.A,{mdxType:"AnnotatedOnly"},(0,i.yg)(l.A,{mdxType:"MarginText"},"14.b/2"),(0,i.yg)(r.A,{type:"aarm",aarm:"discussion",mdxType:"Admonition"},(0,i.yg)("strong",null),"The last sentence here is referring to the documentation requirements in ",(0,i.yg)("a",{href:"../AA-A/AA-A.13"},"A.13"),", \u201c",(0,i.yg)("a",{href:"../AA-A/AA-A.13"},"Exceptions in Input-Output"),"\u201d, and the documentation summary item is provided there. ",(0,i.yg)("br",null))),(0,i.yg)(o.A,{mdxType:"AnnotatedOnly"},(0,i.yg)(l.A,{mdxType:"MarginText"},"15/2"),(0,i.yg)(d.A,{items:["AI95-00285-01"],mdxType:"MarginInfo"}),(0,i.yg)(r.A,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE 1   Each instantiation of the generic packages Sequential","_","IO and Direct","_","IO declares a different type File","_","Type. In the case of Text","_","IO, Wide","_","Text","_","IO, Wide","_","Wide","_","Text","_","IO, and Streams.Stream","_","IO, the corresponding type File","_","Type is unique.",(0,i.yg)("br",null))),(0,i.yg)(o.A,{mdxType:"AnnotatedOnly"},(0,i.yg)(l.A,{mdxType:"MarginText"},"16/5"),(0,i.yg)(d.A,{items:["AI12-0440-1"],mdxType:"MarginInfo"}),(0,i.yg)(r.A,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE 2   A bidirectional device can often be modeled as two sequential files associated with the device, one of mode In","_","File, and one of mode Out","_","File. An implementation can restrict the number of files that can be associated with a given external file. ",(0,i.yg)("br",null))),(0,i.yg)(o.A,{mdxType:"AnnotatedOnly"},(0,i.yg)("h4",{id:"wording-changes-from-ada-95"},"Wording Changes from Ada 95")),(0,i.yg)(o.A,{mdxType:"AnnotatedOnly"},(0,i.yg)(l.A,{mdxType:"MarginText"},"16.a/2"),(0,i.yg)(d.A,{items:["AI95-00285-01"],mdxType:"MarginInfo"}),(0,i.yg)(r.A,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Included package Wide","_","Wide","_","Text","_","IO in this description. ",(0,i.yg)("br",null))))}f.isMDXComponent=!0}}]);