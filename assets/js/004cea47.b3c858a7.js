"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6625],{91605:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>g,contentTitle:()=>f,default:()=>T,frontMatter:()=>A,metadata:()=>y,toc:()=>h});var a=n(91716),r=n(21256),o=n(24895),i=n(48424),l=n(82262),s=Object.defineProperty,u=Object.defineProperties,m=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,b=(t,e,n)=>e in t?s(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,k=(t,e)=>{for(var n in e||(e={}))c.call(e,n)&&b(t,n,e[n]);if(p)for(var n of p(e))d.call(e,n)&&b(t,n,e[n]);return t};const A={sidebar_position:50},f="6 Subprograms",y={unversionedId:"arm/AA-6/AA-6",id:"arm/AA-6/AA-6",title:"6 Subprograms",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-6/AA-6.mdx",sourceDirName:"arm/AA-6",slug:"/arm/AA-6/",permalink:"/docs/arm/AA-6/",draft:!1,tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"referenceManualSidebar",previous:{title:"5.8 Goto Statements",permalink:"/docs/arm/AA-5/AA-5.8"},next:{title:"6.1 Subprogram Declarations",permalink:"/docs/arm/AA-6/AA-6.1"}},g={},h=[],x={toc:h};function T(t){var e,n=t,{components:s}=n,b=((t,e)=>{var n={};for(var a in t)c.call(t,a)&&e.indexOf(a)<0&&(n[a]=t[a]);if(null!=t&&p)for(var a of p(t))e.indexOf(a)<0&&d.call(t,a)&&(n[a]=t[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(e=k(k({},x),b),u(e,m({components:s,mdxType:"MDXLayout"}))),(0,a.kt)("h1",k({},{id:"6-subprograms"}),"6 Subprograms"),(0,a.kt)("admonition",k({},{type:"warning"}),(0,a.kt)("p",{parentName:"admonition"},"This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,a.kt)("a",k({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,a.kt)(i.Z,{mdxType:"MarginText"},"1"),(0,a.kt)("p",null,"A subprogram is a program unit or intrinsic operation whose execution is invoked by a subprogram call. There are two forms of subprogram: procedures and functions. A procedure call is a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0167"},"statement")),"; a function call is an expression and returns a value. The definition of a subprogram can be given in two parts: a subprogram declaration defining its interface, and a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body"))," defining its execution. [Operators and enumeration literals are functions.] ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(i.Z,{mdxType:"MarginText"},"1.a"),(0,a.kt)(r.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"To be honest: "),"A function call is an expression, but more specifically it is a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name")),". ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(i.Z,{mdxType:"MarginText"},"1.b/5"),(0,a.kt)(r.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"Term entry: "),(0,a.kt)("strong",null,"subprogram")," \u2014 unit of a program that can be brought into execution in various contexts, with the invocation being a subprogram call that can parameterize the effect of the subprogram through the passing of operands",(0,a.kt)("br",null),(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(i.Z,{mdxType:"MarginText"},"1.c/5"),(0,a.kt)(r.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"Term entry: "),(0,a.kt)("strong",null,"function")," \u2014 form of subprogram that returns a result and can be called as part of an expression",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(i.Z,{mdxType:"MarginText"},"1.d/5"),(0,a.kt)(r.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"Term entry: "),(0,a.kt)("strong",null,"procedure")," \u2014 form of subprogram that does not return a result and can only be invoked by a statement",(0,a.kt)("br",null))),(0,a.kt)(i.Z,{mdxType:"MarginText"},"2/3"),(0,a.kt)(l.Z,{items:["AI05-0299-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"A ",(0,a.kt)("em",null,"callable entity")," is a subprogram or entry (see Section 9). A callable entity is invoked by a ",(0,a.kt)("em",null,"call"),"; that is, a subprogram call or entry call. A ",(0,a.kt)("em",null,"callable construct")," is a construct that defines the action of a call upon a callable entity: a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body")),", ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-9/AA-9.5#S0260"},"entry_body")),", or ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-9/AA-9.5#S0258"},"accept_statement")),". ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(i.Z,{mdxType:"MarginText"},"2.a"),(0,a.kt)(r.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"Note that \u201ccallable entity\u201d includes predefined operators, enumeration literals, and abstract subprograms. \u201cCall\u201d includes calls of these things. They do not have callable constructs, since they don't have completions. ",(0,a.kt)("br",null))))}T.isMDXComponent=!0}}]);