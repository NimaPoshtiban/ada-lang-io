"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6819],{1716:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(6687);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),f=i,h=p["".concat(c,".").concat(f)]||p[f]||u[f]||a;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7938:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(9440),i=(n(6687),n(1716));const a={sidebar_position:171},o="E.3  Consistency of a Distributed System",s={unversionedId:"arm/AA-E.3",id:"arm/AA-E.3",title:"E.3  Consistency of a Distributed System",description:"[This subclause defines attributes and rules associated with verifying the consistency of a distributed program.]",source:"@site/docs/arm/AA-E.3.md",sourceDirName:"arm",slug:"/arm/AA-E.3",permalink:"/docs/arm/AA-E.3",draft:!1,tags:[],version:"current",sidebarPosition:171,frontMatter:{sidebar_position:171},sidebar:"tutorialSidebar",previous:{title:"E.2  Categorization of Library Units",permalink:"/docs/arm/AA-E.2"},next:{title:"E.4  Remote Subprogram Calls",permalink:"/docs/arm/AA-E.4"}},c={},l=[{value:"Language Design Principles",id:"language-design-principles",level:4},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Bounded (Run-Time) Errors",id:"bounded-run-time-errors",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"e3--consistency-of-a-distributed-system"},"E.3  Consistency of a Distributed System"),(0,i.kt)("p",null,"{AI05-0299-1} ","[This subclause defines attributes and rules associated with verifying the consistency of a distributed program.]"," "),(0,i.kt)("h4",{id:"language-design-principles"},"Language Design Principles"),(0,i.kt)("p",null,"{AI05-0248-1} The rules guarantee that remote call interface and shared passive library units are consistent among all partitions prior to the execution of a distributed program, so that the semantics of the distributed program are well defined."),(0,i.kt)("h4",{id:"static-semantics"},"Static Semantics"),(0,i.kt)("p",null,"For a ",(0,i.kt)("a",{parentName:"p",href:"./AA-4.1#S0093"},"prefix")," P that statically denotes a program unit, the following attributes are defined: "),(0,i.kt)("p",null,"P'VersionYields a value of the predefined type String that identifies the version of the compilation unit that contains the declaration of the program unit."),(0,i.kt)("p",null,"P'Body_VersionYields a value of the predefined type String that identifies the version of the compilation unit that contains the body (but not any subunits) of the program unit. "),(0,i.kt)("p",null,'{8652/0084} {AI95-00104-01} The version of a compilation unit changes whenever the compilation unit changes in a semantically significant way. This document does not define the exact meaning of "semantically significant". It is unspecified whether there are other events (such as recompilation) that result in the version of a compilation unit changing. '),(0,i.kt)("p",null,"This paragraph was deleted."),(0,i.kt)("p",null,"{8652/0084} {AI95-00104-01} If P is not a library unit, and P has no completion, then P'Body_Version returns the Body_Version of the innermost program unit enclosing the declaration of P. If P is a library unit, and P has no completion, then P'Body_Version returns a value that is different from Body_Version of any version of P that has a completion. "),(0,i.kt)("h4",{id:"bounded-run-time-errors"},"Bounded (Run-Time) Errors"),(0,i.kt)("p",null,"In a distributed program, a library unit is consistent if the same version of its declaration is used throughout. It is a bounded error to elaborate a partition of a distributed program that contains a compilation unit that depends on a different version of the declaration of a shared passive or RCI library unit than that included in the partition to which the shared passive or RCI library unit was assigned. As a result of this error, Program_Error can be raised in one or both partitions during elaboration; in any case, the partitions become inaccessible to one another. "),(0,i.kt)("p",null,"Ramification: Because a version changes if anything on which it depends undergoes a version change, requiring consistency for shared passive and remote call interface library units is sufficient to ensure consistency for the declared pure and remote types library units that define the types used for the objects and parameters through which interpartition communication takes place."),(0,i.kt)("p",null,"Note that we do not require matching Body_Versions; it is irrelevant for shared passive and remote call interface packages, since only one copy of their body exists in a distributed program (in the absence of implicit replication), and we allow the bodies to differ for declared pure and remote types packages from partition to partition, presuming that the differences are due to required error corrections that took place during the execution of a long-running distributed program. The Body_Version attribute provides a means for performing stricter consistency checks. "),(0,i.kt)("h4",{id:"wording-changes-from-ada-95"},"Wording Changes from Ada 95"),(0,i.kt)("p",null,"{8652/0084} {AI95-00104-01} Corrigendum: Clarified the meaning of 'Version and 'Body_Version."))}u.isMDXComponent=!0}}]);