"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[3489],{5697:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=a(9440),l=(a(6687),a(1716));a(2526);const r={sidebar_position:8},o="2.2  Lexical Elements, Separators, and Delimiters",i={unversionedId:"arm/AA-2.2",id:"arm/AA-2.2",title:"2.2  Lexical Elements, Separators, and Delimiters",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-2.2.mdx",sourceDirName:"arm",slug:"/arm/AA-2.2",permalink:"/docs/arm/AA-2.2",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"2.1  Character Set",permalink:"/docs/arm/AA-2.1"},next:{title:"2.3  Identifiers",permalink:"/docs/arm/AA-2.3"}},s={},c=[{value:"Static Semantics",id:"static-semantics",level:4},{value:"Implementation Requirements",id:"implementation-requirements",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012",level:4}],d={toc:c};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"22--lexical-elements-separators-and-delimiters"},"2.2  Lexical Elements, Separators, and Delimiters"),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"},"tracking issue"))),(0,l.kt)("h4",{id:"static-semantics"},"Static Semantics"),(0,l.kt)("p",null,"The text of a program consists of the texts of one or more ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-10.1#S0285"},"compilation")),"s. The text of each ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-10.1#S0285"},"compilation"))," is a sequence of separate ",(0,l.kt)("em",null,"lexical elements"),". Each lexical element is formed from a sequence of characters, and is either a delimiter, an ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.3#S0002"},"identifier")),", a reserved word, a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.4#S0006"},"numeric_literal")),", a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.5#S0015"},"character_literal")),", a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.6#S0016"},"string_literal")),", or a comment. The meaning of a program depends only on the particular sequences of lexical elements that form its ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-10.1#S0285"},"compilation")),"s, excluding ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.7#S0018"},"comment")),"s."),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI95-00285-01"),"}"," ","{",(0,l.kt)("em",null,"AI05-0262-1"),"}"," The text of a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-10.1#S0285"},"compilation"))," is divided into ",(0,l.kt)("em",null,"lines"),". In general, the representation for an end of line is implementation defined. However, a sequence of one or more ",(0,l.kt)("code",null,"format_effector"),"s other than the character whose code point is 16#09# (CHARACTER TABULATION) signifies at least one end of line. "),(0,l.kt)("p",null,(0,l.kt)("strong",null,"Implementation defined: "),"The representation for an end of line."),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI95-00285-01"),"}"," [In some cases an explicit ",(0,l.kt)("em",null,"separator")," is required to separate adjacent lexical elements.] A separator is any of a ",(0,l.kt)("code",null,"separator_space"),", a ",(0,l.kt)("code",null,"format_effector"),", or the end of a line, as follows: "),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI95-00285-01"),"}"," A ",(0,l.kt)("code",null,"separator_space")," is a separator except within a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.7#S0018"},"comment")),", a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.6#S0016"},"string_literal")),", or a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.5#S0015"},"character_literal")),"."),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI95-00285-01"),"}"," ","{",(0,l.kt)("em",null,"AI05-0262-1"),"}"," The character whose code point is 16#09# (CHARACTER TABULATION) is a separator except within a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.7#S0018"},"comment")),"."),(0,l.kt)("p",null,"The end of a line is always a separator. "),(0,l.kt)("p",null,"One or more separators are allowed between any two adjacent lexical elements, before the first of each ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-10.1#S0285"},"compilation")),", or after the last. At least one separator is required between an ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.3#S0002"},"identifier")),", a reserved word, or a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.4#S0006"},"numeric_literal"))," and an adjacent ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.3#S0002"},"identifier")),", reserved word, or ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.4#S0006"},"numeric_literal")),"."),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI05-0079-1"),"}"," One or more ",(0,l.kt)("code",null,"other_format")," characters are allowed anywhere that a separator is[; any such characters have no effect on the meaning of an Ada program]."),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI95-00285-01"),"}"," A ",(0,l.kt)("em",null,"delimiter")," is either one of the following characters: "),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI12-0125-3"),"}"," ","{",(0,l.kt)("em",null,"AI12-0212-1"),"}"," &    '    (    )    *    +    ,        .    /    :    ;    ","<","    =    ",">","    @    [    ]    |"),(0,l.kt)("p",null,"or one of the following ",(0,l.kt)("em",null,"compound delimiters")," each composed of two adjacent special characters "),(0,l.kt)("p",null,"=",">","    ..    **    :=    /=    ",">","=    ","<","=    ","<","<","    ",">",">","    ","<",">"),(0,l.kt)("p",null,"Each of the special characters listed for single character delimiters is a single delimiter except if this character is used as a character of a compound delimiter, or as a character of a ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.7#S0018"},"comment")),", ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.6#S0016"},"string_literal")),", ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.5#S0015"},"character_literal")),", or ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-2.4#S0006"},"numeric_literal")),"."),(0,l.kt)("p",null,"The following names are used when referring to compound delimiters:"),(0,l.kt)("h4",{id:"implementation-requirements"},"Implementation Requirements"),(0,l.kt)("p",null,'delimiter name={">"}arrow..double dot**double star, exponentiate:=assignment (pronounced: "becomes")/=inequality (pronounced: "not equal"){">"}=greater than or equal{"<"}=less than or equal{"<"}{"<"}left label bracket{">"}{">"}right label bracket{"<"}{">"}box',(0,l.kt)("p",null,"An implementation shall support lines of at least 200 characters in length, not counting any characters used to signify the end of a line. An implementation shall support lexical elements of at least 200 characters in length. The maximum supported line length and lexical element length are implementation defined. ")),(0,l.kt)("p",null,(0,l.kt)("strong",null,"Implementation defined: "),"Maximum supported line length and lexical element length."),(0,l.kt)("p",null,(0,l.kt)("strong",null,"Discussion: "),"From URG recommendation. "),(0,l.kt)("h4",{id:"wording-changes-from-ada-95"},"Wording Changes from Ada 95"),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI95-00285-01"),"}"," ","{",(0,l.kt)("em",null,"AI05-0299-1"),"}"," The wording was updated to use the new character categories defined in the preceding subclause. "),(0,l.kt)("h4",{id:"extensions-to-ada-2005"},"Extensions to Ada 2005"),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI05-0079-1"),"}"," ",(0,l.kt)("strong",null,"Correction:")," Clarified that ",(0,l.kt)("code",null,"other_format")," characters are allowed anywhere that separators are allowed. This was intended in Ada 2005, but didn't actually make it into the wording. "),(0,l.kt)("h4",{id:"wording-changes-from-ada-2012"},"Wording Changes from Ada 2012"),(0,l.kt)("p",null,"{",(0,l.kt)("em",null,"AI12-0125-3"),"}"," ","{",(0,l.kt)("em",null,"AI12-0212-1"),"}"," Added square brackets and the ",(0,l.kt)("code",null,(0,l.kt)("a",{href:"./AA-5.2#S0174"},"target_name"))," symbol (see 5.2.1) to the list of delimiters. "))}m.isMDXComponent=!0}}]);