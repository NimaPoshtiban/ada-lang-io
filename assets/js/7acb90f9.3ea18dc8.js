"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[1609],{5047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>u,default:()=>N,frontMatter:()=>h,metadata:()=>m,toc:()=>k});var a=n(1716),i=Object.defineProperty,o=Object.defineProperties,r=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,c=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&p(e,n,t[n]);if(l)for(var n of l(t))d.call(t,n)&&p(e,n,t[n]);return e};const h={sidebar_position:2,title:"UTF-8"},u="Using UTF-8 encoding in GNAT",m={unversionedId:"getting-started/how-tos/gnat_and_utf_8",id:"getting-started/how-tos/gnat_and_utf_8",title:"UTF-8",description:"Nowadays UTF-8 is de facto standard for source code representation.",source:"@site/docs/getting-started/how-tos/gnat_and_utf_8.mdx",sourceDirName:"getting-started/how-tos",slug:"/getting-started/how-tos/gnat_and_utf_8",permalink:"/docs/getting-started/how-tos/gnat_and_utf_8",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"UTF-8"},sidebar:"tutorialSidebar",previous:{title:"How-Tos",permalink:"/docs/category/how-tos"},next:{title:"Books",permalink:"/docs/getting-started/books"}},g={},k=[{value:"GNAT Studio",id:"gnat-studio",level:2},{value:"Compiler",id:"compiler",level:2},{value:"Non-ASCII identifiers",id:"non-ascii-identifiers",level:2},{value:"When <code>-gnatW8</code> isn&#39;t allowed",id:"when--gnatw8-isnt-allowed",level:2},{value:"Other GNAT tools",id:"other-gnat-tools",level:2},{value:"Environment variables",id:"environment-variables",level:2},{value:"Matreshka and VSS Libraries",id:"matreshka-and-vss-libraries",level:2},{value:"Conclusions",id:"conclusions",level:2},{value:"Afterword",id:"afterword",level:2}],f={toc:k};function N(e){var t,n=e,{components:i}=n,p=((e,t)=>{var n={};for(var a in e)s.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&l)for(var a of l(e))t.indexOf(a)<0&&d.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=c(c({},f),p),o(t,r({components:i,mdxType:"MDXLayout"}))),(0,a.kt)("h1",c({},{id:"using-utf-8-encoding-in-gnat"}),"Using UTF-8 encoding in GNAT"),(0,a.kt)("p",null,"Nowadays UTF-8 is de facto standard for source code representation.\nSo a newbie Ada developer could expect this as default for GNAT tools, but it's not.\nLet's see how things actually turn out."),(0,a.kt)("p",null,"Although the\n",(0,a.kt)("a",c({parentName:"p"},{href:"https://ada-lang.io/docs/arm/AA-2/AA-2.1#implementation-requirements"}),"Ada language Standard"),"\nsays that the compiler must understand texts in UTF-8 encoding:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"An Ada implementation shall accept Ada source code in UTF-8 encoding, with\nor without a BOM (see A.4.11), where every character is represented by its\ncode point.")),(0,a.kt)("p",null,'But this does not mean that the compiler must do so "by default".\nThe GNAT compiler does not violate the standard, but it does not accept the\nUTF-8 encoding by default.\nThe same applies to the rest of the GNAT tools.'),(0,a.kt)("h2",c({},{id:"gnat-studio"}),"GNAT Studio"),(0,a.kt)("p",null,"After installing the compiler and GNAT Studio development environment,\nthe newbie developer will write the first program:"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),'with Ada.Text_IO;\n\nprocedure Main is\nbegin\n   Ada.Text_IO.Put_Line ("\u041f\u0440\u0438\u0432\u0435\u0442");\nend Main;\n')),(0,a.kt)("p",null,"But he won't be able to build this program, or even save it.\nGNAT Studio will complain:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This buffer contains UTF-8 characters which could not be translated to ISO-8859-1."),(0,a.kt)("p",{parentName:"blockquote"},"Some data may be missing in the saved file: check the Locations View."),(0,a.kt)("p",{parentName:"blockquote"},'You may change the character set of this file through the "Properties..." contextual menu.')),(0,a.kt)("p",null,'And "Locations View" shows details:'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Error converting from UTF8 to ISO-8859-1"),(0,a.kt)("p",{parentName:"blockquote"},"main.adb:5:1: Invalid byte sequence in conversion input")),(0,a.kt)("p",null,'You can change encoding for this file using "Properties..." contextual menu, but\nfor the next file it will be the same.'),(0,a.kt)("p",null,'Instead, it is better to change the default encoding. Go to the settings\n"/Edit/Preferences...", "General" and change "Character set" to\n"Unicode UTF-8". Re-create the file "main.adb" and it will save\nsuccessfully.'),(0,a.kt)("h2",c({},{id:"compiler"}),"Compiler"),(0,a.kt)("p",null,"Now you can build the program and it will even work as expected\n(but only if you have the console in UTF-8; on Windows you can switch the\n",(0,a.kt)("inlineCode",{parentName:"p"},"cmd.exe")," console to UTF-8 using the command ",(0,a.kt)("inlineCode",{parentName:"p"},"chcp 65001"),').\nBut from the compiler point of view the string "Hello" will be 12(!)\ncharacters long.\nThe point is that according to the Standard\n(',(0,a.kt)("a",c({parentName:"p"},{href:"https://ada-lang.io/docs/arm/AA-3/AA-3.5#352--character-types"}),"ARM 3.5.2 2/3"),")\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"Character")," type includes only 256 values from the Latin-1 set:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The predefined type Character is a character type whose values correspond\nto the 256 code points of Row 00 (also known as Latin-1) of the\nISO/IEC 10646:2017 Basic Multilingual Plane (BMP).")),(0,a.kt)("p",null,"So, it does not contain any Cyrillic character.\nThe compiler does not know that you have set the default encoding in the IDE\nto UTF-8. It still uses its default encoding. As\n",(0,a.kt)("a",c({parentName:"p"},{href:"https://docs.adacore.com/gnat_ugn-docs/html/gnat_ugn/gnat_ugn/the_gnat_compilation_model.html#source-representation"}),"GNAT User guide"),"\nstates:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Ada source programs are represented in standard text files, using Latin-1 coding.")),(0,a.kt)("p",null,"The compiler sees this program as"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),'with Ada.Text_IO;\n\nprocedure Main is\nbegin\n   Ada.Text_IO.Put_Line ("\xd0_\xd1_\xd0\xb8\xd0\xb2\xd0\xb5\xd1_");\nend Main;\n')),(0,a.kt)("p",null," here ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," indicates non-printable characters in Latin-1."),(0,a.kt)("admonition",c({},{title:"To be investigated",type:"note"}),(0,a.kt)("p",{parentName:"admonition"}," Shouldn't the compiler rise compilation error on\nnon-printable characters in a sting literal??")),(0,a.kt)("p",null,"You can tell the compiler the encoding of the input texts by passing\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"-gnatW8")," option. Hre is the described in the options list\n(",(0,a.kt)("inlineCode",{parentName:"p"},"gnatmake --help"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-text"}),"    -gnatW?   Wide character encoding method (?=h/u/s/e/8/b)\n")),(0,a.kt)("p",null,'The simplest way to specify this option is to change the project properties\nby selecting the menu "/Edit/Project Properties...", the tab\n"/Build/Switches/Ada" and write ',(0,a.kt)("inlineCode",{parentName:"p"},"-gnatW8")," in the options bar at the bottom\nof the form."),(0,a.kt)("p",null,"The project file ",(0,a.kt)("inlineCode",{parentName:"p"},"default.gpr")," will look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{}),'project Default is\n\n   for Source_Dirs use ("src");\n   for Object_Dir use "obj";\n   for Main use ("main.adb");\n\n   package Compiler is\n      for Switches ("ada") use ("-gnatW8");\n   end Compiler;\n\nend Default;\n')),(0,a.kt)("p",null,"Now the compiler will see the Cyrillic alphabet and refuse to build\nthe program:"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{}),"Builder results\n  /tmp/utf8/src/main.adb\n    5:27 error: literal out of range of type Standard.Character\n")),(0,a.kt)("p",null,"And it is right. We need a different type of string here. Yes, there are\nseveral types of strings in Ada. There are even too many of them. And not\none is good enough for all cases of real life. From the Ada string types\nyou can trace how string encodings evolved. Before the first version of\nthe language, only 127 characters of the ASCII set could fit into\n",(0,a.kt)("inlineCode",{parentName:"p"},"Character"),". But this was quickly corrected by expanding ",(0,a.kt)("inlineCode",{parentName:"p"},"Character"),"\nto 256 Latin-1 values. The next version of the standard, around the\ntime of Java appearance, where the character size was 16 bits,\nintroduced ",(0,a.kt)("inlineCode",{parentName:"p"},"Wide_Character"),', which contains 65536 characters, and\nit seemed to be enough for everyone. But Unicode came along, with\na repertoire of 1,114,112 "code points". Then ',(0,a.kt)("inlineCode",{parentName:"p"},"Wide_Wide_Character"),'\nwith 32 bits and 2 billion characters was introduced.\nNote that the "old" types ',(0,a.kt)("inlineCode",{parentName:"p"},"Character"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"String"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Wide_Character"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"Wide_String"),"\nwere not depricated at all. Moreover, ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," is widely used in the standard\nlibrary! For example, in I/O file names, in ",(0,a.kt)("inlineCode",{parentName:"p"},"Ada.Environments"),", and so on.\nIt's a slippery place where you can make a lot of mistakes.\nBut that's not what we are talking about yet."),(0,a.kt)("p",null,"Let's replace ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"Wide_String"),"? Easy! But we also need another package\ninstead of ",(0,a.kt)("inlineCode",{parentName:"p"},"Text_IO"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),'with Ada.Wide_Text_IO;\n\nprocedure Main is\nbegin\n   Ada.Wide_Text_IO.Put_Line ("\u041f\u0440\u0438\u0432\u0435\u0442");\nend Main;\n')),(0,a.kt)("p",null,"To emphasize the differences, let's rewrite it this way"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),'with Ada.Wide_Text_IO;\n\nprocedure Main is\n   Hello : constant Wide_String := "\u041f\u0440\u0438\u0432\u0435\u0442";\nbegin\n   Ada.Wide_Text_IO.Put_Line (Hello);\nend Main;\n')),(0,a.kt)("p",null,"Now it works!"),(0,a.kt)("h2",c({},{id:"non-ascii-identifiers"}),"Non-ASCII identifiers"),(0,a.kt)("p",null,"Another compiler option, ",(0,a.kt)("inlineCode",{parentName:"p"},"-gnatiw"),", changes the way the compiler\nconsiders identifiers in a program. The\n",(0,a.kt)("a",c({parentName:"p"},{href:"https://docs.adacore.com/gnat_ugn-docs/html/gnat_ugn/gnat_ugn/building_executable_programs_with_gnat.html#character-set-control"}),"GNAT User's Guide"),"\nays:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Normally GNAT recognizes the Latin-1 character set in source program\nidentifiers, as described in the Ada Reference Manual. This switch causes\nGNAT to recognize alternate character sets in identifiers.")),(0,a.kt)("p",null,"The guide is oupdated here, since current Ada Standards defines the\n",(0,a.kt)("em",{parentName:"p"},"identifier")," lexical element in terms Unicode terms, not in Latin-1\ncharacters at all.\nThat is, the standard allows the use of non-Latin-1 characters in identifiers.\nTo make the compiler follow the standard, you need to tell it the ",(0,a.kt)("inlineCode",{parentName:"p"},"-gnatiw"),"\noptions (besides ",(0,a.kt)("inlineCode",{parentName:"p"},"-gnatW8"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),'with Ada.Wide_Text_IO;\n\nprocedure Main is\n   \u041f\u0440\u0438\u0432\u0435\u0442 : constant Wide_String := "\u041f\u0440\u0438\u0432\u0435\u0442";\nbegin\n   Ada.Wide_Text_IO.Put_Line (\u041f\u0440\u0438\u0432\u0435\u0442);\nend Main;\n')),(0,a.kt)("p",null,'The use of such names is not particularly encouraged, but I found them very\nhandy when I tried to write a type system for analyzing Russian morphology.\nMy knowledge of English ends with the terms "noun" and "verb," so the\nfollowing text is more acceptable to me than in Latin:'),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),"package Ru is\n   type \u0427\u0430\u0441\u0442\u044c_\u0420\u0435\u0447\u0438 is  --  Part of speech in Russian\n     (\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435,\n      \u0413\u043b\u0430\u0433\u043e\u043b,\n      \u041f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435,\n      \u0427\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435,\n      \u041d\u0430\u0440\u0435\u0447\u0438\u0435,\n      \u041f\u0440\u0435\u0434\u043b\u043e\u0433,\n      \u0421\u043e\u044e\u0437,\n      \u0427\u0430\u0441\u0442\u0438\u0446\u0430,\n      \u041c\u0435\u0436\u0434\u043e\u043c\u0435\u0442\u0438\u0435\n     );\n\n   type \u041b\u0438\u0446\u043e is ('1', '2', '3');  --  Grammatical person\n   type \u0412\u0440\u0435\u043c\u044f is (\u041f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0435, \u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435, \u0411\u0443\u0434\u0443\u0449\u0435\u0435);  --  Tense\n   type H\u0430\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 is\n    (\u041e\u0431\u044b\u0447\u043d\u043e\u0435, \u041f\u043e\u0432\u0435\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435, \u0421\u043e\u0441\u043b\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435);  --  mood\n   type \u0427\u0438\u0441\u043b\u043e is (\u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435, \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435);\n   type \u0420\u043e\u0434 is (\u041e\u0431\u0449\u0438\u0439, \u041c\u0443\u0436\u0441\u043a\u043e\u0439, \u0416\u0435\u043d\u0441\u043a\u0438\u0439, \u0421\u0440\u0435\u0434\u043d\u0438\u0439);  --  gender\n   type \u041f\u0430\u0434\u0435\u0436 is   --  case\n     (\u0418\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439,\n      \u0420\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439,\n      \u0414\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439,\n      \u0412\u0438\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439,\n      \u0422\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439,\n      \u041f\u0440\u0435\u0434\u043b\u043e\u0436\u043d\u044b\u0439);\n")),(0,a.kt)("admonition",c({},{title:"Advice",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"Keep compilation units and file names in ASCII to avoid\nproblems with the compiler and tools.")),(0,a.kt)("h2",c({},{id:"when--gnatw8-isnt-allowed"}),"When ",(0,a.kt)("inlineCode",{parentName:"h2"},"-gnatW8")," isn't allowed"),(0,a.kt)("p",null,"Some style guides prohibit the use of non-ASCII characters\nin source code. Does it mean you need not ",(0,a.kt)("inlineCode",{parentName:"p"},"-gnatW8"),"?\nLet's try to remove ",(0,a.kt)("inlineCode",{parentName:"p"},"-gnatW8")," and see how it works.\nWe evaluate ",(0,a.kt)("inlineCode",{parentName:"p"},"\u041f\u0440\u0438\u0432\u0435\u0442")," word:"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),"with Ada.Wide_Text_IO;\n\nprocedure Main is\n   Hello : constant Wide_String :=\n     Wide_Character'Val (1055) &\n     Wide_Character'Val (1088) &\n     Wide_Character'Val (1080) &\n     Wide_Character'Val (1074) &\n     Wide_Character'Val (1077) &\n     Wide_Character'Val (1090);\nbegin\n   Ada.Wide_Text_IO.Put_Line (Hello);\nend Main;\n")),(0,a.kt)("p",null,"The result is, well, non-obvious:"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-text"}),'["041F"]["0440"]["0438"]["0432"]["0435"]["0442"]\n')),(0,a.kt)("p",null,'What is it? This is the so-called "Brackets encoding" invented by the GNAT\nauthors in the early days of ',(0,a.kt)("inlineCode",{parentName:"p"},"Wide_Character"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"Wide_String"),". Let's take\na look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ada.Numerics")," package.\nUntil recently, it looked like this"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),'package Ada.Numerics is\n   pragma Pure;\n\n   Argument_Error : exception;\n\n   Pi : constant :=\n          3.14159_26535_89793_23846_26433_83279_50288_41971_69399_37511;\n\n   ["03C0"] : constant := Pi;\n   --  This is the Greek letter Pi (for Ada 2005 AI-388). Note that it is\n   --  conforming to have this constant present even in Ada 95 mode, as there\n   --  is no way for a normal mode Ada 95 program to reference this identifier.\n')),(0,a.kt)("p",null,"In the Standard it is\n",(0,a.kt)("a",c({parentName:"p"},{href:"https://ada-lang.io/docs/arm/AA-A/AA-A.5#static-semantics"}),"defined as"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),"package Ada.Numerics is\n   pragma Pure(Numerics);\n   Argument_Error : exception;\n   Pi : constant :=\n          3.14159_26535_89793_23846_26433_83279_50288_41971_69399_37511;\n   \u03c0  : constant := Pi;\n   e  : constant :=\n          2.71828_18284_59045_23536_02874_71352_66249_77572_47093_69996;\nend Ada.Numerics;\n")),(0,a.kt)("p",null,"Recent versions of the compiler have removed this constant altogether!"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{}),"   --  ???This is removed for now, because nobody uses it, and it causes\n   --  trouble for tools other than the compiler. If people want to use the\n   --  Greek letter in their programs, they can easily define it themselves.\n")),(0,a.kt)("p",null,"You can make the compiler use UTF-8 even in this case by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"-W8"),"\noption to the ",(0,a.kt)("inlineCode",{parentName:"p"},"gnatbind"),' stage (in GNAT Studio go to "/Build/Switches/Binder"\ntab):'),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{}),'project Default is\n\n   for Source_Dirs use ("src");\n   for Object_Dir use "obj";\n   for Main use ("main.adb");\n\n   package Binder is\n      for Switches ("ada") use ("-W8");\n   end Binder;\n\nend Default;\n')),(0,a.kt)("p",null,"Another way is to do this while opening a file with the parameter\n",(0,a.kt)("inlineCode",{parentName:"p"},'Form => "WCEM=8"'),":"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),"with Ada.Wide_Text_IO;\n\nprocedure Main is\n   Hello : constant Wide_String :=\n     Wide_Character'Val (1055) &\n     Wide_Character'Val (1088) &\n     Wide_Character'Val (1080) &\n     Wide_Character'Val (1074) &\n     Wide_Character'Val (1077) &\n     Wide_Character'Val (1090);\n   Output : Ada.Wide_Text_IO.File_Type;\nbegin\n   Ada.Wide_Text_IO.Create (Output, Name => \"aaa.txt\", Form => \"WCEM=8\");\n   Ada.Wide_Text_IO.Put_Line (Output, Hello);\nend Main;\n")),(0,a.kt)("p",null,"When you use ",(0,a.kt)("inlineCode",{parentName:"p"},"-gnatW8"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"gnatbind")," ",(0,a.kt)("inlineCode",{parentName:"p"},"-W8")," switch is used automatically.\nBut you can specify both of them, it won't hurt."),(0,a.kt)("h2",c({},{id:"other-gnat-tools"}),"Other GNAT tools"),(0,a.kt)("p",null,"Using other GNAT programs, look for their encoding flags:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gnatpp")," ",(0,a.kt)("inlineCode",{parentName:"li"},"--wide-character-encoding=8")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gnatstub")," ",(0,a.kt)("inlineCode",{parentName:"li"},"--wide-character-encoding=8"))),(0,a.kt)("p",null,"Alas, even the\n",(0,a.kt)("a",c({parentName:"p"},{href:"https://github.com/AdaCore/ada_language_server/"}),"Ada Language Server"),"\n(part of the Ada extension for VS Code) uses ",(0,a.kt)("inlineCode",{parentName:"p"},"iso-8859-1")," by default.\nFix this in the settings via the\n",(0,a.kt)("a",c({parentName:"p"},{href:"https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md#defaultCharset"}),"parameter")),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{}),"'defaultCharset': 'UTF-8'\n")),(0,a.kt)("h2",c({},{id:"environment-variables"}),"Environment variables"),(0,a.kt)("p",null,"Do not expect your program to pay attention to locale settings (like ",(0,a.kt)("inlineCode",{parentName:"p"},"LANG"),"),\nbut watch out for environment variables\n",(0,a.kt)("inlineCode",{parentName:"p"},"GNAT_CCS_ENCODING"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"GNAT_CODE_PAGE")," on Windows."),(0,a.kt)("h2",c({},{id:"matreshka-and-vss-libraries"}),"Matreshka and VSS Libraries"),(0,a.kt)("p",null,"For some time, the Ada standard was unambiguous in that ",(0,a.kt)("inlineCode",{parentName:"p"},"Character"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"String"),'\ncould only contain Latin-1 characters. But at some point it faltered under\nthe onslaught of "lovers of simple solutions" and there appeared functions\nto convert ',(0,a.kt)("inlineCode",{parentName:"p"},"Wide_String"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"Wide_Wide_String")," to UTF-8, which use ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),"\ntype instead of an array of bytes to represent UTF-8."),(0,a.kt)("p",null,"The GNAT authors take full advantage of this, allowing, for example, to pass\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"Ada.Text_IO.Create")," the file name in UTF-8 encoding via a parameter of\ntype ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,a.kt)("p",null,"Introducing the ",(0,a.kt)("inlineCode",{parentName:"p"},"Wide_Wide_String"),' type does not really solve the problem of\nusing Unicode, since this standard does not manipulate "characters", but\ncombinations of characters. There are variants where several "code points"\nform a single glyph when printed/displayed. It is often more convenient for\nthe user to work in such concepts. This is logical for specifying the\n"line/column" position in the text. ',(0,a.kt)("inlineCode",{parentName:"p"},"Wide_Wide_String")," does not help here."),(0,a.kt)("p",null,"The\n",(0,a.kt)("a",c({parentName:"p"},{href:"https://github.com/AdaCore/VSS"}),"VSS library"),"\nintroduces its own type for Unicode string with handy methods to work\nwith. It allows to find character boundaries, grapheme clusters, character\noffsets in UTF-8/UTF-16 encoding, etc."),(0,a.kt)("p",null,(0,a.kt)("a",c({parentName:"p"},{href:"https://alire.ada.dev/crates/matreshka_league"}),"Matreshka library"),' allows\nyou to operate with strings in terms of Unicode "code points", has a set of\ntranscoders to different encoding systems (like Windows-1251, KOI8-R),\nsupport for JSON, XML, databases, regular expressions, XML template engine,\netc.'),(0,a.kt)("h2",c({},{id:"conclusions"}),"Conclusions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Always set the compiler switch ",(0,a.kt)("inlineCode",{parentName:"li"},"-gnatW8"),", it is a good idea to have the\nswitch ",(0,a.kt)("inlineCode",{parentName:"li"},"-W8")," for gnatbind also."),(0,a.kt)("li",{parentName:"ul"},"Configure the development environment to work in UTF-8."),(0,a.kt)("li",{parentName:"ul"},"Look at the VSS and Matreshka libraries, they make working in Unicode painless.")),(0,a.kt)("h2",c({},{id:"afterword"}),"Afterword"),(0,a.kt)("p",null,"I've ",(0,a.kt)("a",c({parentName:"p"},{href:"https://github.com/alire-project/alire/issues/919"}),"proposed to add"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"-gnatW8")," option to projects generated by alire, but the proposal was rejected\nwith the reason:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"After some further discussion, the risk of introducing incompatibilities\nis too high to make this the default switch.")),(0,a.kt)("p",null,"I don't understand what incompatibility could araise. I've tried to\ncompile"),(0,a.kt)("pre",null,(0,a.kt)("code",c({parentName:"pre"},{className:"language-ada"}),"package Pkg is\n   \u03c0 : Integer;\nend Pkg;\n")),(0,a.kt)("p",null,'and correcteding code in "brackets encoding". There are no differences.\nSo we need more communication there.'))}N.isMDXComponent=!0}}]);