"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[3113],{2155:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>A,contentTitle:()=>b,default:()=>x,frontMatter:()=>f,metadata:()=>y,toc:()=>g});var r=a(1716),n=a(1256),s=a(4895),i=a(8424),o=a(2262),c=Object.defineProperty,l=Object.defineProperties,d=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,h=(e,t,a)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,k=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&h(e,a,t[a]);if(u)for(var a of u(t))m.call(t,a)&&h(e,a,t[a]);return e};const f={sidebar_position:114},b="13.10 Unchecked Access Value Creation",y={unversionedId:"arm/AA-13/AA-13.10",id:"arm/AA-13/AA-13.10",title:"13.10 Unchecked Access Value Creation",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-13/AA-13.10.mdx",sourceDirName:"arm/AA-13",slug:"/arm/AA-13/AA-13.10",permalink:"/docs/arm/AA-13/AA-13.10",draft:!1,tags:[],version:"current",sidebarPosition:114,frontMatter:{sidebar_position:114},sidebar:"referenceManualSidebar",previous:{title:"13.9 Unchecked Type Conversions",permalink:"/docs/arm/AA-13/AA-13.9"},next:{title:"13.11 Storage Management",permalink:"/docs/arm/AA-13/AA-13.11"}},A={},g=[{value:"Static Semantics",id:"static-semantics",level:4}],T={toc:g};function x(e){var t,a=e,{components:c}=a,h=((e,t)=>{var a={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&u)for(var r of u(e))t.indexOf(r)<0&&m.call(e,r)&&(a[r]=e[r]);return a})(a,["components"]);return(0,r.kt)("wrapper",(t=k(k({},T),h),l(t,d({components:c,mdxType:"MDXLayout"}))),(0,r.kt)("h1",k({},{id:"1310-unchecked-access-value-creation"}),"13.10 Unchecked Access Value Creation"),(0,r.kt)("admonition",k({},{type:"warning"}),(0,r.kt)("p",{parentName:"admonition"},"This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,r.kt)("a",k({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,r.kt)(i.Z,{mdxType:"MarginText"},"1"),(0,r.kt)("p",null,"[The attribute Unchecked_Access is used to create access values in an unsafe manner \u2014 the programmer is responsible for preventing \u201cdangling references\u201d.] ",(0,r.kt)("br",null)),(0,r.kt)("h4",k({},{id:"static-semantics"}),"Static Semantics"),(0,r.kt)(i.Z,{mdxType:"MarginText"},"2"),(0,r.kt)("p",null,"The following attribute is defined for a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-4/AA-4.1#S0093"},"prefix"))," X that denotes an aliased view of an object: ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{mdxType:"MarginText"},"3"),(0,r.kt)("dt",null,(0,r.kt)("br",null),"X'Unchecked_Access"),(0,r.kt)("dl",null,(0,r.kt)("dd",null,"All rules and semantics that apply to X'Access (see ",(0,r.kt)("a",{href:"../AA-3/AA-3.10#Subclause_3.10.2"},"3.10.2"),") apply also to X'Unchecked_Access, except that, for the purposes of accessibility rules and checks, it is as if X were declared immediately within a library package. ",(0,r.kt)("br",null))),(0,r.kt)(s.Z,{mdxType:"AnnotatedOnly"},(0,r.kt)(i.Z,{mdxType:"MarginText"},"3.a/3"),(0,r.kt)(o.Z,{items:["AI05-0005-1"],mdxType:"MarginInfo"}),(0,r.kt)(n.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,r.kt)("strong",null),"We say \u201crules and semantics\u201d here so that library-level accessibility applies to the value created by X'Unchecked_Access as well as to the checks needed for the attribute itself. This means that any anonymous access values that inherit the accessibility of this attribute (such as access parameters) also act as if they have library-level accessibility. We don't want the \"real\" accessibility of the created value re-emerging at a later point \u2013 that would create hard-to-understand bugs. ",(0,r.kt)("br",null))),(0,r.kt)(s.Z,{mdxType:"AnnotatedOnly"},(0,r.kt)(i.Z,{mdxType:"MarginText"},"4"),(0,r.kt)(n.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE 1   This attribute is provided to support the situation where a local object is to be inserted into a global linked data structure, when the programmer knows that it will always be removed from the data structure prior to exiting the object's scope. The Access attribute would be illegal in this case (see ",(0,r.kt)("a",{href:"../AA-3/AA-3.10#Subclause_3.10.2"},"3.10.2"),", \u201c",(0,r.kt)("a",{href:"../AA-3/AA-3.10#Subclause_3.10.2"},"Operations of Access Types"),"\u201d). ",(0,r.kt)("br",null))),(0,r.kt)(s.Z,{mdxType:"AnnotatedOnly"},(0,r.kt)(i.Z,{mdxType:"MarginText"},"4.a"),(0,r.kt)(n.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,r.kt)("strong",null),"The expected type for X'Unchecked_Access is as for X'Access.",(0,r.kt)("br",null))),(0,r.kt)(s.Z,{mdxType:"AnnotatedOnly"},(0,r.kt)(i.Z,{mdxType:"MarginText"},"4.b"),(0,r.kt)(n.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"If an ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-4/AA-4.1#S0100"},"attribute_reference"))," with Unchecked_Access is used as the actual parameter for an access parameter, an Accessibility_Check can never fail on that access parameter. ",(0,r.kt)("br",null))),(0,r.kt)(s.Z,{mdxType:"AnnotatedOnly"},(0,r.kt)(i.Z,{mdxType:"MarginText"},"5"),(0,r.kt)(n.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE 2   There is no Unchecked_Access attribute for subprograms. ",(0,r.kt)("br",null))),(0,r.kt)(s.Z,{mdxType:"AnnotatedOnly"},(0,r.kt)(i.Z,{mdxType:"MarginText"},"5.a/2"),(0,r.kt)(o.Z,{items:["AI95-00254-01"],mdxType:"MarginInfo"}),(0,r.kt)(n.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,r.kt)("strong",null),"Such an attribute would allow unsafe \u201cdownward closures\u201d, where an access value designating a more nested subprogram is passed to a less nested subprogram. (Anonymous access-to-subprogram parameters provide safe \u201cdownward closures\u201d.) This requires some means of reconstructing the global environment for the more nested subprogram, so that it can do up-level references to objects. The two methods of implementing up-level references are displays and static links. If unsafe downward closures were supported, each access-to-subprogram value would have to carry the static link or display with it. We don't want to require the space and time overhead of requiring the extra information for all access-to-subprogram types, especially as including it would make interfacing to other languages (like C) harder.",(0,r.kt)("br",null))),(0,r.kt)(s.Z,{mdxType:"AnnotatedOnly"},(0,r.kt)(i.Z,{mdxType:"MarginText"},"5.b"),(0,r.kt)(n.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"If desired, an instance of Unchecked_Conversion can be used to create an access value of a global access-to-subprogram type that designates a local subprogram. The semantics of using such a value are not specified by the language. In particular, it is not specified what happens if such subprograms make up-level references; even if the frame being referenced still exists, the up-level reference might go awry if the representation of a value of a global access-to-subprogram type doesn't include a static link. ",(0,r.kt)("br",null))))}x.isMDXComponent=!0}}]);