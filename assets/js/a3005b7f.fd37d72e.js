"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[9501],{85423:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var i=t(58168),n=(t(96540),t(15680));const s={title:"4.4 Summary"},r=void 0,o={unversionedId:"style-guide/s4/04",id:"style-guide/s4/04",title:"4.4 Summary",description:"high-level structure",source:"@site/docs/style-guide/s4/04.mdx",sourceDirName:"style-guide/s4",slug:"/style-guide/s4/04",permalink:"/docs/style-guide/s4/04",draft:!1,tags:[],version:"current",frontMatter:{title:"4.4 Summary"},sidebar:"styleGuideSidebar",previous:{title:"4.3 Exceptions",permalink:"/docs/style-guide/s4/03"},next:{title:"5. Programming Practices",permalink:"/docs/style-guide/s5/"}},l={},p=[{value:"high-level structure",id:"high-level-structure",level:3},{value:"visibility",id:"visibility",level:3},{value:"exceptions",id:"exceptions",level:4}],c={toc:p},u="wrapper";function d(e){let{components:a,...t}=e;return(0,n.yg)(u,(0,i.A)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h3",{id:"high-level-structure"},"high-level structure"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Place the specification of each library unit package in a separate\nfile from its body."),(0,n.yg)("li",{parentName:"ul"},"Avoid defining library unit subprograms that are not intended to be\nused as main programs. If such subprograms are defined, then create\nan explicit specification, in a separate file, for each library unit\nsubprogram."),(0,n.yg)("li",{parentName:"ul"},"Minimize the use of subunits."),(0,n.yg)("li",{parentName:"ul"},"In preference to subunits, use child library units to structure a\nsubsystem into manageable units."),(0,n.yg)("li",{parentName:"ul"},"Place each subunit in a separate file."),(0,n.yg)("li",{parentName:"ul"},"Use a consistent file naming convention."),(0,n.yg)("li",{parentName:"ul"},"In preference to nesting in a package body, use a private child and\nwith it to the parent body."),(0,n.yg)("li",{parentName:"ul"},"Use private child unit specifications for data and subprograms that\nare required by (other) child units that extend a parent unit's\nabstraction or services."),(0,n.yg)("li",{parentName:"ul"},"When possible, express configuration pragmas through compiler\noptions or other means that do not require modifications to the\nsource code. ."),(0,n.yg)("li",{parentName:"ul"},"When configuration pragmas must be placed in source code, consider\nisolating them to one compilation unit per partition; if specified,\nthe main subprogram for the partition is recommended."),(0,n.yg)("li",{parentName:"ul"},"Use subprograms to enhance abstraction."),(0,n.yg)("li",{parentName:"ul"},"Restrict each subprogram to the performance of a single action."),(0,n.yg)("li",{parentName:"ul"},"Use a function when the subprogram's primary purpose is to provide a\nsingle value."),(0,n.yg)("li",{parentName:"ul"},"Minimize the side effect of a function."),(0,n.yg)("li",{parentName:"ul"},"Consider using a parameterless function when the value does not need\nto be static."),(0,n.yg)("li",{parentName:"ul"},"Use a parameterless function (instead of a constant) if the value\nshould be inherited by types derived from the type."),(0,n.yg)("li",{parentName:"ul"},"Use a parameterless function if the value itself is subject to\nchange."),(0,n.yg)("li",{parentName:"ul"},"Use packages for information hiding."),(0,n.yg)("li",{parentName:"ul"},"Use packages with tagged types and private types for abstract data\ntypes."),(0,n.yg)("li",{parentName:"ul"},"Use packages to model abstract entities appropriate to the problem\ndomain."),(0,n.yg)("li",{parentName:"ul"},"Use packages to group together related type and object declarations\n(e.g., common declarations for two or more library units)."),(0,n.yg)("li",{parentName:"ul"},"Encapsulate machine dependencies in packages. Place a software\ninterface to a particular device in a package to facilitate a change\nto a different device."),(0,n.yg)("li",{parentName:"ul"},"Place low-level implementation decisions or interfaces in\nsubprograms within packages."),(0,n.yg)("li",{parentName:"ul"},"Use packages and subprograms to encapsulate and hide program details\nthat may change (Nissen and Wallis 1984)."),(0,n.yg)("li",{parentName:"ul"},"If a new library unit represents a logical extension to the original\nabstraction, define it as a child library unit."),(0,n.yg)("li",{parentName:"ul"},"If a new library unit is independent (e.g., introduces a new\nabstraction that depends only in part on the existing one), then\nencapsulate the new abstraction in a separate library unit."),(0,n.yg)("li",{parentName:"ul"},"Use child packages to implement a subsystem."),(0,n.yg)("li",{parentName:"ul"},"Use public child units for those parts of a subsystem that should be\nvisible to clients of the subsystem."),(0,n.yg)("li",{parentName:"ul"},"Use private child units for those parts of a subsystem that should\nnot be visible to clients of the subsystem."),(0,n.yg)("li",{parentName:"ul"},"Use private child units for local declarations used only in\nimplementing the package specification."),(0,n.yg)("li",{parentName:"ul"},"Use child packages to implement constructors, even when they return\naccess values."),(0,n.yg)("li",{parentName:"ul"},"Make each package serve a single purpose."),(0,n.yg)("li",{parentName:"ul"},"Use packages to group related data, types, and subprograms."),(0,n.yg)("li",{parentName:"ul"},"Avoid collections of unrelated objects and subprograms (NASA 1987;\nNissen and Wallis 1984)."),(0,n.yg)("li",{parentName:"ul"},"Consider restructuring a system to move two highly related units\ninto the same package (or package hierarchy) or to move relatively\nindependent units into separate packages."),(0,n.yg)("li",{parentName:"ul"},"Avoid declaring variables in package specifications."),(0,n.yg)("li",{parentName:"ul"},"Use tasks to model abstract, asynchronous entities within the\nproblem domain."),(0,n.yg)("li",{parentName:"ul"},"Use tasks to define concurrent algorithms for multiprocessor\narchitectures."),(0,n.yg)("li",{parentName:"ul"},"Use tasks to perform concurrent, cyclic, or prioritized activities\n(NASA 1987)."),(0,n.yg)("li",{parentName:"ul"},"Use protected types to control or synchronize access to data or\ndevices."),(0,n.yg)("li",{parentName:"ul"},"Use protected types to implement synchronization tasks, such as a\npassive resource monitor.")),(0,n.yg)("h3",{id:"visibility"},"visibility"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Put only what is needed for the use of a package into its\nspecification."),(0,n.yg)("li",{parentName:"ul"},"Minimize the number of declarations in package specifications."),(0,n.yg)("li",{parentName:"ul"},"Do not include extra operations simply because they are easy to\nbuild."),(0,n.yg)("li",{parentName:"ul"},"Minimize the context (with) clauses in a package specification."),(0,n.yg)("li",{parentName:"ul"},"Reconsider subprograms that seem to require large numbers of\nparameters."),(0,n.yg)("li",{parentName:"ul"},"Do not manipulate global data within a subprogram or package merely\nto limit the number of parameters."),(0,n.yg)("li",{parentName:"ul"},"Avoid unnecessary visibility; hide the implementation details of a\nprogram unit from its users."),(0,n.yg)("li",{parentName:"ul"},"Use child library units to control the visibility of parts of a\nsubsystem interface."),(0,n.yg)("li",{parentName:"ul"},"Use private child packages for those declarations that should not be\nused outside the subsystem."),(0,n.yg)("li",{parentName:"ul"},"Use child library units to present different views of an entity to\ndifferent clients."),(0,n.yg)("li",{parentName:"ul"},"Design (and redesign) interfaces after having worked out the logic\nof various expected clients of the interface."),(0,n.yg)("li",{parentName:"ul"},"Use child packages rather than nested packages to present different\nviews of the same abstraction."),(0,n.yg)("li",{parentName:"ul"},"Nest package specifications within another package specification\nonly for grouping operations or hiding common implementation\ndetails."),(0,n.yg)("li",{parentName:"ul"},"Consider using private child packages in lieu of nesting."),(0,n.yg)("li",{parentName:"ul"},"Restrict the visibility of program units as much as possible by\nnesting them inside package bodies (Nissen and Wallis 1984) if you\ncannot use a private child package."),(0,n.yg)("li",{parentName:"ul"},"Minimize nesting program units inside subprograms and tasks."),(0,n.yg)("li",{parentName:"ul"},"Minimize the scope within which with clauses apply."),(0,n.yg)("li",{parentName:"ul"},"Only with those units directly needed."),(0,n.yg)("li",{parentName:"ul"},"Carefully consider encapsulation of tasks.")),(0,n.yg)("h4",{id:"exceptions"},"exceptions"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"For unavoidable internal errors for which no user recovery is\npossible, declare a single user-visible exception. Inside the\nabstraction, provide a way to distinguish between the different\ninternal errors."),(0,n.yg)("li",{parentName:"ul"},"Do not borrow an exception name from another context."),(0,n.yg)("li",{parentName:"ul"},"Export (declare visibly to the user) the names of all exceptions\nthat can be raised."),(0,n.yg)("li",{parentName:"ul"},"In a package, document which exceptions can be raised by each\nsubprogram and task entry."),(0,n.yg)("li",{parentName:"ul"},"Do not raise exceptions for internal errors that can be avoided or\ncorrected within the unit."),(0,n.yg)("li",{parentName:"ul"},"Do not raise the same exception to report different kinds of errors\nthat are distinguishable by the user of the unit."),(0,n.yg)("li",{parentName:"ul"},"Provide interrogative functions that allow the user of a unit to\navoid causing exceptions to be raised."),(0,n.yg)("li",{parentName:"ul"},"When possible, avoid changing state information in a unit before\nraising an exception."),(0,n.yg)("li",{parentName:"ul"},"Catch and convert or handle all predefined and compiler-defined\nexceptions at the earliest opportunity."),(0,n.yg)("li",{parentName:"ul"},"Do not explicitly raise predefined or implementation-defined\nexceptions."),(0,n.yg)("li",{parentName:"ul"},"Never let an exception propagate beyond its scope.")),(0,n.yg)("admonition",{type:"note"},(0,n.yg)("p",{parentName:"admonition"},'This page of the "Ada Quality and Style Guide" has been adapted from the\noriginal work at ',(0,n.yg)("a",{parentName:"p",href:"https://en.wikibooks.org/wiki/Ada_Style_Guide"},"https://en.wikibooks.org/wiki/Ada_Style_Guide"),", which is\nlicensed under the\n",(0,n.yg)("a",{parentName:"p",href:"https://creativecommons.org/licenses/by-sa/3.0/"},"Creative Commons Attribution-ShareAlike License"),";\nadditional terms may apply. Page not endorsed by Wikibooks or the Ada\nStyle Guide Wikibook authors. This page is licensed under the same license\nas the original work.")))}d.isMDXComponent=!0}}]);