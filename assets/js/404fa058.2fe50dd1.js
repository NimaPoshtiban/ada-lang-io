"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[4074],{8240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>f,default:()=>R,frontMatter:()=>d,metadata:()=>x,toc:()=>_});var r=n(1716),o=n(7556),i=n(9464),a=Object.defineProperty,l=Object.defineProperties,s=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,h=(e,t)=>{for(var n in t||(t={}))m.call(t,n)&&p(e,n,t[n]);if(u)for(var n of u(t))c.call(t,n)&&p(e,n,t[n]);return e};const d={sidebar_position:181},f="G.3 Vector and Matrix Manipulation",x={unversionedId:"arm/AA-G/AA-G.3",id:"arm/AA-G/AA-G.3",title:"G.3 Vector and Matrix Manipulation",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-G/AA-G.3.mdx",sourceDirName:"arm/AA-G",slug:"/arm/AA-G/AA-G.3",permalink:"/docs/arm/AA-G/AA-G.3",draft:!1,tags:[],version:"current",sidebarPosition:181,frontMatter:{sidebar_position:181},sidebar:"referenceManualSidebar",previous:{title:"G.2 Numeric Performance Requirements",permalink:"/docs/arm/AA-G/AA-G.2"},next:{title:"Annex H High Integrity Systems",permalink:"/docs/arm/AA-H/"}},g={},_=[{value:"Extensions to Ada 95",id:"extensions-to-ada-95",level:4},{value:"G.3.1  Real Vectors and Matrices",id:"g31--real-vectors-and-matrices",level:2},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Implementation Requirements",id:"implementation-requirements",level:4},{value:"Documentation Requirements",id:"documentation-requirements",level:4},{value:"Implementation Permissions",id:"implementation-permissions",level:4},{value:"Implementation Advice",id:"implementation-advice",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95-1",level:4},{value:"Wording Changes from Ada 2005",id:"wording-changes-from-ada-2005",level:4},{value:"G.3.2  Complex Vectors and Matrices",id:"g32--complex-vectors-and-matrices",level:2},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"Implementation Requirements",id:"implementation-requirements-1",level:4},{value:"Documentation Requirements",id:"documentation-requirements-1",level:4},{value:"Implementation Permissions",id:"implementation-permissions-1",level:4},{value:"Implementation Advice",id:"implementation-advice-1",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95-2",level:4},{value:"Wording Changes from Ada 2005",id:"wording-changes-from-ada-2005-1",level:4}],k={toc:_};function R(e){var t,n=e,{components:a}=n,p=((e,t)=>{var n={};for(var r in e)m.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&u)for(var r of u(e))t.indexOf(r)<0&&c.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=h(h({},k),p),l(t,s({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",h({},{id:"g3-vector-and-matrix-manipulation"}),"G.3 Vector and Matrix Manipulation"),(0,r.kt)("admonition",h({},{type:"warning"}),(0,r.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,r.kt)("a",h({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Types and operations for the manipulation of real vectors and matrices are provided in Generic_Real_Arrays, which is defined in G.3.1. Types and operations for the manipulation of complex vectors and matrices are provided in Generic_Complex_Arrays, which is defined in G.3.2. Both of these library units are generic children of the predefined package Numerics (see A.5). Nongeneric equivalents of these packages for each of the predefined floating point types are also provided as children of Numerics. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"discussion",title:"Discussion: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"Vector and matrix manipulation is defined in the Numerics Annex, rather than in the core, because it is considered to be a specialized need of (some) numeric applications.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},"These packages provide facilities that are similar to and replace those found in ISO/IEC 13813:1998 ",(0,r.kt)("em",null,"Information technology - Programming languages - Generic packages of real and complex type declarations and basic operations for Ada (including vector and matrix types)"),". (The other facilities provided by that Standard were already provided in Ada 95.) In addition to the main facilities of that Standard, these packages also include subprograms for the solution of linear equations, matrix inversion, determinants, and the determination of the eigenvalues and eigenvectors of real symmetric matrices and Hermitian matrices. ",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"extensions-to-ada-95"}),"Extensions to Ada 95"),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI05-0299-1"),"}"," This subclause It just provides an introduction to the following subclauses. ",(0,r.kt)("br",null)),(0,r.kt)("h2",h({},{id:"g31--real-vectors-and-matrices"}),"G.3.1  Real Vectors and Matrices"),(0,r.kt)("h4",h({},{id:"static-semantics"}),"Static Semantics"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI95-00418-01"),"}"," The generic library package Numerics.Generic_Real_Arrays has the following declaration: ",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"--  ","{","AI12-0241-1","}","\n"," generic","\n","   type Real is digits ","<",">",";","\n","package Ada.Numerics.Generic_Real_Arrays","\n","   with Pure, Nonblocking is","\n","-- Types","\n","type Real_Vector is array (Integer range ","<",">",") of Real'Base;","\n","   type Real_Matrix is array (Integer range ","<",">",", Integer range ","<",">",")","\n","                                                   of Real'Base;","\n","-- Subprograms for Real_Vector types","\n","-- Real_Vector arithmetic operations","\n",'function "+"   (Right : Real_Vector)       return Real_Vector;',"\n",'   function "-"   (Right : Real_Vector)       return Real_Vector;',"\n",'   function "abs" (Right : Real_Vector)       return Real_Vector;',"\n",'function "+"   (Left, Right : Real_Vector) return Real_Vector;',"\n",'   function "-"   (Left, Right : Real_Vector) return Real_Vector;',"\n",'function "*"   (Left, Right : Real_Vector) return Real\'Base;',"\n",'function "abs" (Right : Real_Vector)       return Real\'Base;',"\n","-- Real_Vector scaling operations","\n",'function "*" (Left : Real\'Base;   Right : Real_Vector)',"\n","      return Real_Vector;","\n",'   function "*" (Left : Real_Vector; Right : Real\'Base)',"\n","      return Real_Vector;","\n",'   function "/" (Left : Real_Vector; Right : Real\'Base)',"\n","      return Real_Vector;","\n","-- Other Real_Vector operations","\n","function Unit_Vector (Index : Integer;","\n","                         Order : Positive;","\n","                         First : Integer := 1) return Real_Vector;","\n","-- Subprograms for Real_Matrix types","\n","-- Real_Matrix arithmetic operations","\n",'function "+"       (Right : Real_Matrix) return Real_Matrix;',"\n",'   function "-"       (Right : Real_Matrix) return Real_Matrix;',"\n",'   function "abs"     (Right : Real_Matrix) return Real_Matrix;',"\n","   function Transpose (X     : Real_Matrix) return Real_Matrix;","\n",'function "+" (Left, Right : Real_Matrix) return Real_Matrix;',"\n",'   function "-" (Left, Right : Real_Matrix) return Real_Matrix;',"\n",'   function "*" (Left, Right : Real_Matrix) return Real_Matrix;',"\n",'function "*" (Left, Right : Real_Vector) return Real_Matrix;',"\n",'function "*" (Left : Real_Vector; Right : Real_Matrix)',"\n","      return Real_Vector;","\n",'   function "*" (Left : Real_Matrix; Right : Real_Vector)',"\n","      return Real_Vector;","\n","-- Real_Matrix scaling operations","\n",'function "*" (Left : Real\'Base;   Right : Real_Matrix)',"\n","      return Real_Matrix;","\n",'   function "*" (Left : Real_Matrix; Right : Real\'Base)',"\n","      return Real_Matrix;","\n",'   function "/" (Left : Real_Matrix; Right : Real\'Base)',"\n","      return Real_Matrix;","\n","-- Real_Matrix inversion and related operations","\n","function Solve (A : Real_Matrix; X : Real_Vector) return Real_Vector;","\n","   function Solve (A, X : Real_Matrix) return Real_Matrix;","\n","   function Inverse (A : Real_Matrix) return Real_Matrix;","\n","   function Determinant (A : Real_Matrix) return Real'Base;","\n","-- Eigenvalues and vectors of a real symmetric matrix","\n","function Eigenvalues (A : Real_Matrix) return Real_Vector;","\n","procedure Eigensystem (A       : in  Real_Matrix;","\n","                          Values  : out Real_Vector;","\n","                          Vectors : out Real_Matrix);","\n","-- Other Real_Matrix operations","\n","function Unit_Matrix (Order            : Positive;","\n","                         First_1, First_2 : Integer := 1)","\n","                                            return Real_Matrix;","\n","end Ada.Numerics.Generic_Real_Arrays;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," The library package Numerics.Real_Arrays is declared pure and defines the same types and subprograms as Numerics.Generic_Real_Arrays, except that the predefined type Float is systematically substituted for Real'Base throughout. Nongeneric equivalents for each of the other predefined floating point types are defined similarly, with the names Numerics.Short_Real_Arrays, Numerics.Long_Real_Arrays, etc. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"reason",title:"Reason: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"The nongeneric equivalents are provided to allow the programmer to construct simple mathematical applications without being required to understand and use generics, and to be consistent with other Numerics packages. ",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Two types are defined and exported by Numerics.Generic_Real_Arrays. The composite type Real_Vector is provided to represent a vector with components of type Real; it is defined as an unconstrained, one-dimensional array with an index of type Integer. The composite type Real_Matrix is provided to represent a matrix with components of type Real; it is defined as an unconstrained, two-dimensional array with indices of type Integer.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," The effect of the various subprograms is as described below. In most cases the subprograms are described in terms of corresponding scalar operations of the type Real; any exception raised by those operations is propagated by the array operation. Moreover, the accuracy of the result for each individual component is as defined for the scalar operation unless stated otherwise.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," In the case of those operations which are defined to ",(0,r.kt)("em",null,"involve an inner product"),", Constraint_Error may be raised if an intermediate result is outside the range of Real'Base even though the mathematical final result would not be.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+"   (Right : Real_Vector) return Real_Vector;',"\n",'function "-"   (Right : Real_Vector) return Real_Vector;',"\n",'function "abs" (Right : Real_Vector) return Real_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation of the type Real to each component of Right. The index range of the result is Right'Range.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+" (Left, Right : Real_Vector) return Real_Vector;',"\n",'function "-" (Left, Right : Real_Vector) return Real_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation of the type Real to each component of Left and the matching component of Right. The index range of the result is Left'Range. Constraint_Error is raised if Left'Length is not equal to Right'Length.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left, Right : Real_Vector) return Real\'Base;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation returns the inner product of Left and Right. Constraint_Error is raised if Left'Length is not equal to Right'Length. This operation involves an inner product.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "abs" (Right : Real_Vector) return Real\'Base;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00418-01"),"}"," This operation returns the L2-norm of Right (the square root of the inner product of the vector with itself).",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"discussion",title:"Discussion: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"Normalization of vectors is a frequent enough operation that it is useful to provide the norm as a basic operation. Furthermore, implementing the norm is not entirely straightforward, because the inner product might overflow while the final norm does not. An implementation cannot merely return Sqrt (X * X), it has to cope with a possible overflow of the inner product. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-note",title:"Implementation Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null),'While the definition is given in terms of an inner product, the norm doesn\'t "involve an inner product" in the technical sense. The reason is that it has accuracy requirements substantially different from those applicable to inner products; and that cancellations cannot occur, because all the terms are positive, so there is no possibility of intermediate overflow. ',(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real\'Base; Right : Real_Vector) return Real_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}",' This operation returns the result of multiplying each component of Right by the scalar Left using the "*" operation of the type Real. The index range of the result is Right\'Range.',(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real_Vector; Right : Real\'Base) return Real_Vector;',"\n",'function "/" (Left : Real_Vector; Right : Real\'Base) return Real_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation of the type Real to each component of Left and to the scalar Right. The index range of the result is Left'Range.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Unit_Vector (Index : Integer;","\n","                      Order : Positive;","\n","                      First : Integer := 1) return Real_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a ",(0,r.kt)("em",null,"unit vector")," with Order components and a lower bound of First. All components are set to 0.0 except for the Index component which is set to 1.0. Constraint_Error is raised if Index ","<"," First, Index ",">"," First + Order  1 or if First + Order  1 ",">"," Integer'Last.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+"   (Right : Real_Matrix) return Real_Matrix;',"\n",'function "-"   (Right : Real_Matrix) return Real_Matrix;',"\n",'function "abs" (Right : Real_Matrix) return Real_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation of the type Real to each component of Right. The index ranges of the result are those of Right.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Transpose (X : Real_Matrix) return Real_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns the transpose of a matrix X. The first and second index ranges of the result are X'Range(2) and X'Range(1) respectively.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+" (Left, Right : Real_Matrix) return Real_Matrix;',"\n",'function "-" (Left, Right : Real_Matrix) return Real_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation of the type Real to each component of Left and the matching component of Right. The index ranges of the result are those of Left. Constraint_Error is raised if Left'Length(1) is not equal to Right'Length(1) or Left'Length(2) is not equal to Right'Length(2).",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left, Right : Real_Matrix) return Real_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation provides the standard mathematical operation for matrix multiplication. The first and second index ranges of the result are Left'Range(1) and Right'Range(2) respectively. Constraint_Error is raised if Left'Length(2) is not equal to Right'Length(1). This operation involves inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left, Right : Real_Vector) return Real_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation returns the outer product of a (column) vector Left by a (row) vector Right using the operation \"*\" of the type Real for computing the individual components. The first and second index ranges of the result are Left'Range and Right'Range respectively.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real_Vector; Right : Real_Matrix) return Real_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation provides the standard mathematical operation for multiplication of a (row) vector Left by a matrix Right. The index range of the (row) vector result is Right'Range(2). Constraint_Error is raised if Left'Length is not equal to Right'Length(1). This operation involves inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real_Matrix; Right : Real_Vector) return Real_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation provides the standard mathematical operation for multiplication of a matrix Left by a (column) vector Right. The index range of the (column) vector result is Left'Range(1). Constraint_Error is raised if Left'Length(2) is not equal to Right'Length. This operation involves inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real\'Base; Right : Real_Matrix) return Real_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}",' This operation returns the result of multiplying each component of Right by the scalar Left using the "*" operation of the type Real. The index ranges of the result are those of Right.',(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real_Matrix; Right : Real\'Base) return Real_Matrix;',"\n",'function "/" (Left : Real_Matrix; Right : Real\'Base) return Real_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation of the type Real to each component of Left and to the scalar Right. The index ranges of the result are those of Left.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Solve (A : Real_Matrix; X : Real_Vector) return Real_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a vector Y such that X is (nearly) equal to A * Y. This is the standard mathematical operation for solving a single set of linear equations. The index range of the result is A'Range(2). Constraint_Error is raised if A'Length(1), A'Length(2), and X'Length are not equal. Constraint_Error is raised if the matrix A is ill-conditioned.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),'The text says that Y is such that "X is (nearly) equal to A * Y" rather than "X is equal to A * Y" because rounding errors may mean that there is no value of Y such that X is exactly equal to A * Y. On the other hand it does not mean that any old rough value will do. The algorithm given under  should be followed.',(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},"The requirement to raise Constraint_Error if the matrix is ill-conditioned is really a reflection of what will happen if the matrix is ill-conditioned. See . We do not make any attempt to define ill-conditioned formally.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},"These remarks apply to all versions of Solve and Inverse. ",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Solve (A, X : Real_Matrix) return Real_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a matrix Y such that X is (nearly) equal to A * Y. This is the standard mathematical operation for solving several sets of linear equations. The index ranges of the result are A'Range(2) and X'Range(2). Constraint_Error is raised if A'Length(1), A'Length(2), and X'Length(1) are not equal. Constraint_Error is raised if the matrix A is ill-conditioned.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Inverse (A : Real_Matrix) return Real_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a matrix B such that A * B is (nearly) equal to the unit matrix. The index ranges of the result are A'Range(2) and A'Range(1). Constraint_Error is raised if A'Length(1) is not equal to A'Length(2). Constraint_Error is raised if the matrix A is ill-conditioned.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Determinant (A : Real_Matrix) return Real'Base;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns the determinant of the matrix A. Constraint_Error is raised if A'Length(1) is not equal to A'Length(2).",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Eigenvalues(A : Real_Matrix) return Real_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns the eigenvalues of the symmetric matrix A as a vector sorted into order with the largest first. Constraint_Error is raised if A'Length(1) is not equal to A'Length(2). The index range of the result is A'Range(1). Argument_Error is raised if the matrix A is not symmetric.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"procedure Eigensystem(A       : in  Real_Matrix;","\n","                      Values  : out Real_Vector;","\n","                      Vectors : out Real_Matrix);","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," This procedure computes both the eigenvalues and eigenvectors of the symmetric matrix A. The out parameter Values is the same as that obtained by calling the function Eigenvalues. The out parameter Vectors is a matrix whose columns are the eigenvectors of the matrix A. The order of the columns corresponds to the order of the eigenvalues. The eigenvectors are normalized and mutually orthogonal (they are orthonormal), including when there are repeated eigenvalues. Constraint_Error is raised if A'Length(1) is not equal to A'Length(2), or if Values'Range is not equal to A'Range(1), or if the index ranges of the parameter Vectors are not equal to those of A. Argument_Error is raised if the matrix A is not symmetric. Constraint_Error is also raised in implementation-defined circumstances if the algorithm used does not converge quickly enough.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"ramification",title:"Ramification: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," There is no requirement on the absolute direction of the returned eigenvectors. Thus they might be multiplied by -1. It is only the ratios of the components that matter. This is standard practice. ",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Unit_Matrix (Order            : Positive;","\n","                      First_1, First_2 : Integer := 1) return Real_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a square ",(0,r.kt)("em",null,"unit matrix")," with Order**2 components and lower bounds of First_1 and First_2 (for the first and second index ranges respectively). All components are set to 0.0 except for the main diagonal, whose components are set to 1.0. Constraint_Error is raised if First_1 + Order  1 ",">"," Integer'Last or First_2 + Order  1 ",">"," Integer'Last.",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"implementation-requirements"}),"Implementation Requirements"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Accuracy requirements for the subprograms Solve, Inverse, Determinant, Eigenvalues and Eigensystem are implementation defined. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-defined",title:"Implementation defined: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"The accuracy requirements for the subprograms Solve, Inverse, Determinant, Eigenvalues and Eigensystem for type Real_Matrix.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"For operations not involving an inner product, the accuracy requirements are those of the corresponding operations of the type Real in both the strict mode and the relaxed mode (see G.2).",(0,r.kt)("br",null)),(0,r.kt)("p",null,"For operations involving an inner product, no requirements are specified in the relaxed mode. In the strict mode the modulus of the absolute error of the inner product ",(0,r.kt)("em",null,"X"),"*",(0,r.kt)("em",null,"Y")," shall not exceed ",(0,r.kt)("em",null,"g"),"*",(0,r.kt)("strong",null,"abs"),"(",(0,r.kt)("em",null,"X"),")*",(0,r.kt)("strong",null,"abs"),"(",(0,r.kt)("em",null,"Y"),") where ",(0,r.kt)("em",null,"g")," is defined as ",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("em",null,"g")," = ",(0,r.kt)("em",null,"X"),"'Length * Real'Machine_Radix**(1  Real'Model_Mantissa)",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00418-01"),"}"," For the L2-norm, no accuracy requirements are specified in the relaxed mode. In the strict mode the relative error on the norm shall not exceed ",(0,r.kt)("em",null,"g")," / 2.0 + 3.0 * Real'Model_Epsilon where ",(0,r.kt)("em",null,"g")," is defined as above.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"reason",title:"Reason: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"This is simply the combination of the error on the inner product with the error on Sqrt. A first order computation would lead to 2.0 * Real'Model_Epsilon above, but we are adding an extra Real'Model_Epsilon to account for higher order effects. ",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"documentation-requirements"}),"Documentation Requirements"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Implementations shall document any techniques used to reduce cancellation errors such as extended precision arithmetic. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null,"Documentation Requirement: "),"Any techniques used to reduce cancellation errors in Numerics.Generic_Real_Arrays shall be documented.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-note",title:"Implementation Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"The above accuracy requirement is met by the canonical implementation of the inner product by multiplication and addition using the corresponding operations of type Real'Base and performing the cumulative addition using ascending indices. Note however, that some hardware provides special operations for the computation of the inner product and although these may be fast they may not meet the accuracy requirement specified. See Accuracy and Stability of Numerical Algorithms By N J Higham (ISBN 0-89871-355-2), Section 3.1.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},"{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," Note moreover that the componentwise accuracy requirements are not met by subcubic methods for matrix multiplication such as that devised by Strassen. These methods, which are typically used for the fast multiplication of very large matrices (e.g. order more than a few thousands), have normwise accuracy properties. If it is desired to use such methods, then distinct subprograms should be provided (perhaps in a child package). See Section 22.2.2 in the above reference. ",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"implementation-permissions"}),"Implementation Permissions"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI12-0444-1"),"}"," The nongeneric equivalent packages can be actual instantiations of the generic package for the appropriate predefined type, though that is not required.",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"implementation-advice"}),"Implementation Advice"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI05-0264-1"),"}"," Implementations should implement the Solve and Inverse functions using established techniques such as LU decomposition with row interchanges followed by back and forward substitution. Implementations are recommended to refine the result by performing an iteration on the residuals; if this is done, then it should be documented. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),"Solve and Inverse for Numerics.Generic_Real_Arrays should be implemented using established techniques such as LU decomposition and the result should be refined by an iteration on the residuals.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"It is not the intention that any special provision should be made to determine whether a matrix is ill-conditioned or not. The naturally occurring overflow (including division by zero) which will result from executing these functions with an ill-conditioned matrix and thus raise Constraint_Error is sufficient. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"discussion",title:"Discussion: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"There isn't any advice for the implementation to document with this paragraph. ",(0,r.kt)("br",null)),(0,r.kt)("p",null,"The test that a matrix is symmetric should be performed by using the equality operator to compare the relevant components. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),"The equality operator should be used to test that a matrix in Numerics.Generic_Real_Arrays is symmetric.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," An implementation should minimize the circumstances under which the algorithm used for Eigenvalues and Eigensystem fails to converge. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),"An implementation should minimize the circumstances under which the algorithm used for Numerics.Generic_Real_Arrays.Eigenvalues and Numerics.Generic_Real_Arrays.Eigensystem fails to converge.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-note",title:"Implementation Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"J. H. Wilkinson is the acknowledged expert in this area. See for example Wilkinson, J. H., and Reinsch, C. , Linear Algebra , vol II of Handbook for Automatic Computation, Springer-Verlag, or Wilkinson, J. H., The Algebraic Eigenvalue Problem, Oxford University Press. ",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"extensions-to-ada-95-1"}),"Extensions to Ada 95"),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," The package Numerics.Generic_Real_Arrays and its nongeneric equivalents are new. ",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"wording-changes-from-ada-2005"}),"Wording Changes from Ada 2005"),(0,r.kt)(i.Z,{type:"aarm",aarm:"correction",title:"Correction:",mdxType:"Admonition"},"{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," ",(0,r.kt)("strong",null)," Corrected various accuracy and definition issues. ",(0,r.kt)("br",null)),(0,r.kt)("h2",h({},{id:"g32--complex-vectors-and-matrices"}),"G.3.2  Complex Vectors and Matrices"),(0,r.kt)("h4",h({},{id:"static-semantics-1"}),"Static Semantics"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," The generic library package Numerics.Generic_Complex_Arrays has the following declaration: ",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"--  ","{","AI12-0241-1","}","\n"," with Ada.Numerics.Generic_Real_Arrays, Ada.Numerics.Generic_Complex_Types;","\n","generic","\n","   with package Real_Arrays   is new","\n","      Ada.Numerics.Generic_Real_Arrays   (","<",">",");","\n","   use Real_Arrays;","\n","   with package Complex_Types is new","\n","      Ada.Numerics.Generic_Complex_Types (Real);","\n","   use Complex_Types;","\n","package Ada.Numerics.Generic_Complex_Arrays","\n","   with Pure, Nonblocking is","\n","-- Types","\n","type Complex_Vector is array (Integer range ","<",">",") of Complex;","\n","   type Complex_Matrix is array (Integer range ","<",">",",","\n","                                 Integer range ","<",">",") of Complex;","\n","-- Subprograms for Complex_Vector types","\n","-- Complex_Vector selection, conversion and composition operations","\n","function Re (X : Complex_Vector) return Real_Vector;","\n","   function Im (X : Complex_Vector) return Real_Vector;","\n","procedure Set_Re (X  : in out Complex_Vector;","\n","                     Re : in     Real_Vector);","\n","   procedure Set_Im (X  : in out Complex_Vector;","\n","                     Im : in     Real_Vector);","\n","function Compose_From_Cartesian (Re     : Real_Vector)","\n","      return Complex_Vector;","\n","   function Compose_From_Cartesian (Re, Im : Real_Vector)","\n","      return Complex_Vector;","\n","function Modulus  (X     : Complex_Vector) return Real_Vector;","\n",'   function "abs"    (Right : Complex_Vector) return Real_Vector',"\n","                                                 renames Modulus;","\n","   function Argument (X     : Complex_Vector) return Real_Vector;","\n","   function Argument (X     : Complex_Vector;","\n","                      Cycle : Real'Base)      return Real_Vector;","\n","function Compose_From_Polar (Modulus, Argument : Real_Vector)","\n","      return Complex_Vector;","\n","   function Compose_From_Polar (Modulus, Argument : Real_Vector;","\n","                                Cycle             : Real'Base)","\n","      return Complex_Vector;","\n","-- Complex_Vector arithmetic operations","\n",'function "+"       (Right  : Complex_Vector) return Complex_Vector;',"\n",'   function "-"       (Right  : Complex_Vector) return Complex_Vector;',"\n","   function Conjugate (X      : Complex_Vector) return Complex_Vector;","\n",'function "+"  (Left, Right : Complex_Vector) return Complex_Vector;',"\n",'   function "-"  (Left, Right : Complex_Vector) return Complex_Vector;',"\n",'function "*"  (Left, Right : Complex_Vector) return Complex;',"\n","--  ","{","AI05-0047-1","}","\n",'    function "abs"     (Right : Complex_Vector) return Real\'Base;',"\n","-- Mixed Real_Vector and Complex_Vector arithmetic operations","\n",'function "+" (Left  : Real_Vector;',"\n","                 Right : Complex_Vector) return Complex_Vector;","\n",'   function "+" (Left  : Complex_Vector;',"\n","                 Right : Real_Vector)    return Complex_Vector;","\n",'   function "-" (Left  : Real_Vector;',"\n","                 Right : Complex_Vector) return Complex_Vector;","\n",'   function "-" (Left  : Complex_Vector;',"\n","                 Right : Real_Vector)    return Complex_Vector;","\n",'function "*" (Left  : Real_Vector;    Right : Complex_Vector)',"\n","      return Complex;","\n",'   function "*" (Left  : Complex_Vector; Right : Real_Vector)',"\n","      return Complex;","\n","-- Complex_Vector scaling operations","\n",'function "*" (Left  : Complex;',"\n","                 Right : Complex_Vector) return Complex_Vector;","\n",'   function "*" (Left  : Complex_Vector;',"\n","                 Right : Complex)        return Complex_Vector;","\n",'   function "/" (Left  : Complex_Vector;',"\n","                 Right : Complex)        return Complex_Vector;","\n",'function "*" (Left  : Real\'Base;',"\n","                 Right : Complex_Vector) return Complex_Vector;","\n",'   function "*" (Left  : Complex_Vector;',"\n","                 Right : Real'Base)      return Complex_Vector;","\n",'   function "/" (Left  : Complex_Vector;',"\n","                 Right : Real'Base)      return Complex_Vector;","\n","-- Other Complex_Vector operations","\n","function Unit_Vector (Index : Integer;","\n","                         Order : Positive;","\n","                         First : Integer := 1) return Complex_Vector;","\n","-- Subprograms for Complex_Matrix types","\n","-- Complex_Matrix selection, conversion and composition operations","\n","function Re (X : Complex_Matrix) return Real_Matrix;","\n","   function Im (X : Complex_Matrix) return Real_Matrix;","\n","procedure Set_Re (X  : in out Complex_Matrix;","\n","                     Re : in     Real_Matrix);","\n","   procedure Set_Im (X  : in out Complex_Matrix;","\n","                     Im : in     Real_Matrix);","\n","function Compose_From_Cartesian (Re     : Real_Matrix)","\n","      return Complex_Matrix;","\n","   function Compose_From_Cartesian (Re, Im : Real_Matrix)","\n","      return Complex_Matrix;","\n","function Modulus  (X     : Complex_Matrix) return Real_Matrix;","\n",'   function "abs"    (Right : Complex_Matrix) return Real_Matrix',"\n","                                                 renames Modulus;","\n","function Argument (X     : Complex_Matrix) return Real_Matrix;","\n","   function Argument (X     : Complex_Matrix;","\n","                      Cycle : Real'Base)      return Real_Matrix;","\n","function Compose_From_Polar (Modulus, Argument : Real_Matrix)","\n","      return Complex_Matrix;","\n","   function Compose_From_Polar (Modulus, Argument : Real_Matrix;","\n","                                Cycle             : Real'Base)","\n","      return Complex_Matrix;","\n","-- Complex_Matrix arithmetic operations","\n",'function "+"       (Right : Complex_Matrix) return Complex_Matrix;',"\n",'   function "-"       (Right : Complex_Matrix) return Complex_Matrix;',"\n","   function Conjugate (X     : Complex_Matrix) return Complex_Matrix;","\n","   function Transpose (X     : Complex_Matrix) return Complex_Matrix;","\n",'function "+" (Left, Right : Complex_Matrix) return Complex_Matrix;',"\n",'   function "-" (Left, Right : Complex_Matrix) return Complex_Matrix;',"\n",'   function "*" (Left, Right : Complex_Matrix) return Complex_Matrix;',"\n",'function "*" (Left, Right : Complex_Vector) return Complex_Matrix;',"\n",'function "*" (Left  : Complex_Vector;',"\n","                 Right : Complex_Matrix) return Complex_Vector;","\n",'   function "*" (Left  : Complex_Matrix;',"\n","                 Right : Complex_Vector) return Complex_Vector;","\n","-- Mixed Real_Matrix and Complex_Matrix arithmetic operations","\n",'function "+" (Left  : Real_Matrix;',"\n","                 Right : Complex_Matrix) return Complex_Matrix;","\n",'   function "+" (Left  : Complex_Matrix;',"\n","                 Right : Real_Matrix)    return Complex_Matrix;","\n",'   function "-" (Left  : Real_Matrix;',"\n","                 Right : Complex_Matrix) return Complex_Matrix;","\n",'   function "-" (Left  : Complex_Matrix;',"\n","                 Right : Real_Matrix)    return Complex_Matrix;","\n",'   function "*" (Left  : Real_Matrix;',"\n","                 Right : Complex_Matrix) return Complex_Matrix;","\n",'   function "*" (Left  : Complex_Matrix;',"\n","                 Right : Real_Matrix)    return Complex_Matrix;","\n",'function "*" (Left  : Real_Vector;',"\n","                 Right : Complex_Vector) return Complex_Matrix;","\n",'   function "*" (Left  : Complex_Vector;',"\n","                 Right : Real_Vector)    return Complex_Matrix;","\n",'function "*" (Left  : Real_Vector;',"\n","                 Right : Complex_Matrix) return Complex_Vector;","\n",'   function "*" (Left  : Complex_Vector;',"\n","                 Right : Real_Matrix)    return Complex_Vector;","\n",'   function "*" (Left  : Real_Matrix;',"\n","                 Right : Complex_Vector) return Complex_Vector;","\n",'   function "*" (Left  : Complex_Matrix;',"\n","                 Right : Real_Vector)    return Complex_Vector;","\n","-- Complex_Matrix scaling operations","\n",'function "*" (Left  : Complex;',"\n","                 Right : Complex_Matrix) return Complex_Matrix;","\n",'   function "*" (Left  : Complex_Matrix;',"\n","                 Right : Complex)        return Complex_Matrix;","\n",'   function "/" (Left  : Complex_Matrix;',"\n","                 Right : Complex)        return Complex_Matrix;","\n",'function "*" (Left  : Real\'Base;',"\n","                 Right : Complex_Matrix) return Complex_Matrix;","\n",'   function "*" (Left  : Complex_Matrix;',"\n","                 Right : Real'Base)      return Complex_Matrix;","\n",'   function "/" (Left  : Complex_Matrix;',"\n","                 Right : Real'Base)      return Complex_Matrix;","\n","-- Complex_Matrix inversion and related operations","\n","function Solve (A : Complex_Matrix; X : Complex_Vector)","\n","      return Complex_Vector;","\n","   function Solve (A, X : Complex_Matrix) return Complex_Matrix;","\n","   function Inverse (A : Complex_Matrix) return Complex_Matrix;","\n","   function Determinant (A : Complex_Matrix) return Complex;","\n","-- Eigenvalues and vectors of a Hermitian matrix","\n","function Eigenvalues(A : Complex_Matrix) return Real_Vector;","\n","procedure Eigensystem(A       : in  Complex_Matrix;","\n","                         Values  : out Real_Vector;","\n","                         Vectors : out Complex_Matrix);","\n","-- Other Complex_Matrix operations","\n","function Unit_Matrix (Order            : Positive;","\n","                         First_1, First_2 : Integer := 1)","\n","                                            return Complex_Matrix;","\n","end Ada.Numerics.Generic_Complex_Arrays;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," The library package Numerics.Complex_Arrays is declared pure and defines the same types and subprograms as Numerics.Generic_Complex_Arrays, except that the predefined type Float is systematically substituted for Real'Base, and the Real_Vector and Real_Matrix types exported by Numerics.Real_Arrays are systematically substituted for Real_Vector and Real_Matrix, and the Complex type exported by Numerics.Complex_Types is systematically substituted for Complex, throughout. Nongeneric equivalents for each of the other predefined floating point types are defined similarly, with the names Numerics.Short_Complex_Arrays, Numerics.Long_Complex_Arrays, etc.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Two types are defined and exported by Numerics.Generic_Complex_Arrays. The composite type Complex_Vector is provided to represent a vector with components of type Complex; it is defined as an unconstrained one-dimensional array with an index of type Integer. The composite type Complex_Matrix is provided to represent a matrix with components of type Complex; it is defined as an unconstrained, two-dimensional array with indices of type Integer.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," The effect of the various subprograms is as described below. In many cases they are described in terms of corresponding scalar operations in Numerics.Generic_Complex_Types. Any exception raised by those operations is propagated by the array subprogram. Moreover, any constraints on the parameters and the accuracy of the result for each individual component are as defined for the scalar operation.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," In the case of those operations which are defined to ",(0,r.kt)("em",null,"involve an inner product"),", Constraint_Error may be raised if an intermediate result has a component outside the range of Real'Base even though the final mathematical result would not.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"discussion",title:"Discussion: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," An inner product never involves implicit complex conjugation. If the product of a vector with the conjugate of another (or the same) vector is required, then this has to be stated explicitly by writing for example X * Conjugate(Y). This mimics the usual mathematical notation. ",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Re (X : Complex_Vector) return Real_Vector;","\n","function Im (X : Complex_Vector) return Real_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each function returns a vector of the specified Cartesian components of X. The index range of the result is X'Range.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"procedure Set_Re (X  : in out Complex_Vector; Re : in Real_Vector);","\n","procedure Set_Im (X  : in out Complex_Vector; Im : in Real_Vector);","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each procedure replaces the specified (Cartesian) component of each of the components of X by the value of the matching component of Re or Im; the other (Cartesian) component of each of the components is unchanged. Constraint_Error is raised if X'Length is not equal to Re'Length or Im'Length.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Compose_From_Cartesian (Re     : Real_Vector)","\n","   return Complex_Vector;","\n","function Compose_From_Cartesian (Re, Im : Real_Vector)","\n","   return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each function constructs a vector of Complex results (in Cartesian representation) formed from given vectors of Cartesian components; when only the real components are given, imaginary components of zero are assumed. The index range of the result is Re'Range. Constraint_Error is raised if Re'Length is not equal to Im'Length.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Modulus  (X     : Complex_Vector) return Real_Vector;","\n",'function "abs"    (Right : Complex_Vector) return Real_Vector',"\n","                                              renames Modulus;","\n","function Argument (X     : Complex_Vector) return Real_Vector;","\n","function Argument (X     : Complex_Vector;","\n","                   Cycle : Real'Base)      return Real_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each function calculates and returns a vector of the specified polar components of X or Right using the corresponding function in numerics.generic_complex_types. The index range of the result is X'Range or Right'Range.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Compose_From_Polar (Modulus, Argument : Real_Vector)","\n","   return Complex_Vector;","\n","function Compose_From_Polar (Modulus, Argument : Real_Vector;","\n","                             Cycle             : Real'Base)","\n","   return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each function constructs a vector of Complex results (in Cartesian representation) formed from given vectors of polar components using the corresponding function in numerics.generic_complex_types on matching components of Modulus and Argument. The index range of the result is Modulus'Range. Constraint_Error is raised if Modulus'Length is not equal to Argument'Length.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+" (Right : Complex_Vector) return Complex_Vector;',"\n",'function "-" (Right : Complex_Vector) return Complex_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of Right. The index range of the result is Right'Range.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Conjugate (X : Complex_Vector) return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns the result of applying the appropriate function Conjugate in numerics.generic_complex_types to each component of X. The index range of the result is X'Range.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+" (Left, Right : Complex_Vector) return Complex_Vector;',"\n",'function "-" (Left, Right : Complex_Vector) return Complex_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of Left and the matching component of Right. The index range of the result is Left'Range. Constraint_Error is raised if Left'Length is not equal to Right'Length.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left, Right : Complex_Vector) return Complex;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation returns the inner product of Left and Right. Constraint_Error is raised if Left'Length is not equal to Right'Length. This operation involves an inner product.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"--  ","{","AI05-0047-1","}","\n",' function "abs" (Right : Complex_Vector) return Real\'Base;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00418-01"),"}"," This operation returns the Hermitian L2-norm of Right (the square root of the inner product of the vector with its conjugate).",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-note",title:"Implementation Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null),'While the definition is given in terms of an inner product, the norm doesn\'t "involve an inner product" in the technical sense. The reason is that it has accuracy requirements substantially different from those applicable to inner products; and that cancellations cannot occur, because all the terms are positive, so there is no possibility of intermediate overflow. ',(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+" (Left  : Real_Vector;',"\n","              Right : Complex_Vector) return Complex_Vector;","\n",'function "+" (Left  : Complex_Vector;',"\n","              Right : Real_Vector)    return Complex_Vector;","\n",'function "-" (Left  : Real_Vector;',"\n","              Right : Complex_Vector) return Complex_Vector;","\n",'function "-" (Left  : Complex_Vector;',"\n","              Right : Real_Vector)    return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of Left and the matching component of Right. The index range of the result is Left'Range. Constraint_Error is raised if Left'Length is not equal to Right'Length.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real_Vector;    Right : Complex_Vector) return Complex;',"\n",'function "*" (Left : Complex_Vector; Right : Real_Vector)    return Complex;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the inner product of Left and Right. Constraint_Error is raised if Left'Length is not equal to Right'Length. These operations involve an inner product.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Complex; Right : Complex_Vector) return Complex_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}",' This operation returns the result of multiplying each component of Right by the complex number Left using the appropriate operation "*" in numerics.generic_complex_types. The index range of the result is Right\'Range.',(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Complex_Vector; Right : Complex) return Complex_Vector;',"\n",'function "/" (Left : Complex_Vector; Right : Complex) return Complex_Vector;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of the vector Left and the complex number Right. The index range of the result is Left'Range.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real\'Base;',"\n","              Right : Complex_Vector) return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}",' This operation returns the result of multiplying each component of Right by the real number Left using the appropriate operation "*" in numerics.generic_complex_types. The index range of the result is Right\'Range.',(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Complex_Vector;',"\n","              Right : Real'Base) return Complex_Vector;","\n",'function "/" (Left : Complex_Vector;',"\n","              Right : Real'Base) return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of the vector Left and the real number Right. The index range of the result is Left'Range.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Unit_Vector (Index : Integer;","\n","                      Order : Positive;","\n","                      First : Integer := 1) return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a ",(0,r.kt)("em",null,"unit vector")," with Order components and a lower bound of First. All components are set to (0.0, 0.0) except for the Index component which is set to (1.0, 0.0). Constraint_Error is raised if Index ","<"," First, Index ",">"," First + Order  1, or if First + Order  1 ",">"," Integer'Last.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Re (X : Complex_Matrix) return Real_Matrix;","\n","function Im (X : Complex_Matrix) return Real_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each function returns a matrix of the specified Cartesian components of X. The index ranges of the result are those of X.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"procedure Set_Re (X : in out Complex_Matrix; Re : in Real_Matrix);","\n","procedure Set_Im (X : in out Complex_Matrix; Im : in Real_Matrix);","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each procedure replaces the specified (Cartesian) component of each of the components of X by the value of the matching component of Re or Im; the other (Cartesian) component of each of the components is unchanged. Constraint_Error is raised if X'Length(1) is not equal to Re'Length(1) or Im'Length(1) or if X'Length(2) is not equal to Re'Length(2) or Im'Length(2).",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Compose_From_Cartesian (Re     : Real_Matrix)","\n","   return Complex_Matrix;","\n","function Compose_From_Cartesian (Re, Im : Real_Matrix)","\n","   return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each function constructs a matrix of Complex results (in Cartesian representation) formed from given matrices of Cartesian components; when only the real components are given, imaginary components of zero are assumed. The index ranges of the result are those of Re. Constraint_Error is raised if Re'Length(1) is not equal to Im'Length(1) or Re'Length(2) is not equal to Im'Length(2).",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Modulus  (X     : Complex_Matrix) return Real_Matrix;","\n",'function "abs"    (Right : Complex_Matrix) return Real_Matrix',"\n","                                              renames Modulus;","\n","function Argument (X     : Complex_Matrix) return Real_Matrix;","\n","function Argument (X     : Complex_Matrix;","\n","                   Cycle : Real'Base)      return Real_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each function calculates and returns a matrix of the specified polar components of X or Right using the corresponding function in numerics.generic_complex_types. The index ranges of the result are those of X or Right.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Compose_From_Polar (Modulus, Argument : Real_Matrix)","\n","   return Complex_Matrix;","\n","function Compose_From_Polar (Modulus, Argument : Real_Matrix;","\n","                             Cycle             : Real'Base)","\n","   return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each function constructs a matrix of Complex results (in Cartesian representation) formed from given matrices of polar components using the corresponding function in numerics.generic_complex_types on matching components of Modulus and Argument. The index ranges of the result are those of Modulus. Constraint_Error is raised if Modulus'Length(1) is not equal to Argument'Length(1) or Modulus'Length(2) is not equal to Argument'Length(2).",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+" (Right : Complex_Matrix) return Complex_Matrix;',"\n",'function "-" (Right : Complex_Matrix) return Complex_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of Right. The index ranges of the result are those of Right.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Conjugate (X : Complex_Matrix) return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns the result of applying the appropriate function Conjugate in numerics.generic_complex_types to each component of X. The index ranges of the result are those of X.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Transpose (X : Complex_Matrix) return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns the transpose of a matrix X. The first and second index ranges of the result are X'Range(2) and X'Range(1) respectively.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+" (Left, Right : Complex_Matrix) return Complex_Matrix;',"\n",'function "-" (Left, Right : Complex_Matrix) return Complex_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of Left and the matching component of Right. The index ranges of the result are those of Left. Constraint_Error is raised if Left'Length(1) is not equal to Right'Length(1) or Left'Length(2) is not equal to Right'Length(2).",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left, Right : Complex_Matrix) return Complex_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation provides the standard mathematical operation for matrix multiplication. The first and second index ranges of the result are Left'Range(1) and Right'Range(2) respectively. Constraint_Error is raised if Left'Length(2) is not equal to Right'Length(1). This operation involves inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left, Right : Complex_Vector) return Complex_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation returns the outer product of a (column) vector Left by a (row) vector Right using the appropriate operation \"*\" in numerics.generic_complex_types for computing the individual components. The first and second index ranges of the result are Left'Range and Right'Range respectively.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left  : Complex_Vector;',"\n","              Right : Complex_Matrix) return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation provides the standard mathematical operation for multiplication of a (row) vector Left by a matrix Right. The index range of the (row) vector result is Right'Range(2). Constraint_Error is raised if Left'Length is not equal to Right'Length(1). This operation involves inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left  : Complex_Matrix;',"\n","              Right : Complex_Vector) return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This operation provides the standard mathematical operation for multiplication of a matrix Left by a (column) vector Right. The index range of the (column) vector result is Left'Range(1). Constraint_Error is raised if Left'Length(2) is not equal to Right'Length. This operation involves inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "+" (Left  : Real_Matrix;',"\n","              Right : Complex_Matrix) return Complex_Matrix;","\n",'function "+" (Left  : Complex_Matrix;',"\n","              Right : Real_Matrix)    return Complex_Matrix;","\n",'function "-" (Left  : Real_Matrix;',"\n","              Right : Complex_Matrix) return Complex_Matrix;","\n",'function "-" (Left  : Complex_Matrix;',"\n","              Right : Real_Matrix)    return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of Left and the matching component of Right. The index ranges of the result are those of Left. Constraint_Error is raised if Left'Length(1) is not equal to Right'Length(1) or Left'Length(2) is not equal to Right'Length(2).",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left  : Real_Matrix;',"\n","              Right : Complex_Matrix) return Complex_Matrix;","\n",'function "*" (Left  : Complex_Matrix;',"\n","              Right : Real_Matrix)    return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation provides the standard mathematical operation for matrix multiplication. The first and second index ranges of the result are Left'Range(1) and Right'Range(2) respectively. Constraint_Error is raised if Left'Length(2) is not equal to Right'Length(1). These operations involve inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left  : Real_Vector;',"\n","              Right : Complex_Vector) return Complex_Matrix;","\n",'function "*" (Left  : Complex_Vector;',"\n","              Right : Real_Vector)    return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the outer product of a (column) vector Left by a (row) vector Right using the appropriate operation \"*\" in numerics.generic_complex_types for computing the individual components. The first and second index ranges of the result are Left'Range and Right'Range respectively.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left  : Real_Vector;',"\n","              Right : Complex_Matrix) return Complex_Vector;","\n",'function "*" (Left  : Complex_Vector;',"\n","              Right : Real_Matrix)    return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation provides the standard mathematical operation for multiplication of a (row) vector Left by a matrix Right. The index range of the (row) vector result is Right'Range(2). Constraint_Error is raised if Left'Length is not equal to Right'Length(1). These operations involve inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left  : Real_Matrix;',"\n","              Right : Complex_Vector) return Complex_Vector;","\n",'function "*" (Left  : Complex_Matrix;',"\n","              Right : Real_Vector)    return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation provides the standard mathematical operation for multiplication of a matrix Left by a (column) vector Right. The index range of the (column) vector result is Left'Range(1). Constraint_Error is raised if Left'Length(2) is not equal to Right'Length. These operations involve inner products.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Complex; Right : Complex_Matrix) return Complex_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}",' This operation returns the result of multiplying each component of Right by the complex number Left using the appropriate operation "*" in numerics.generic_complex_types. The index ranges of the result are those of Right.',(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Complex_Matrix; Right : Complex) return Complex_Matrix;',"\n",'function "/" (Left : Complex_Matrix; Right : Complex) return Complex_Matrix;',"\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of the matrix Left and the complex number Right. The index ranges of the result are those of Left.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Real\'Base;',"\n","              Right : Complex_Matrix) return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}",' This operation returns the result of multiplying each component of Right by the real number Left using the appropriate operation "*" in numerics.generic_complex_types. The index ranges of the result are those of Right.',(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},'function "*" (Left : Complex_Matrix;',"\n","              Right : Real'Base) return Complex_Matrix;","\n",'function "/" (Left : Complex_Matrix;',"\n","              Right : Real'Base) return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Each operation returns the result of applying the corresponding operation in numerics.generic_complex_types to each component of the matrix Left and the real number Right. The index ranges of the result are those of Left.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Solve (A : Complex_Matrix; X : Complex_Vector) return Complex_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a vector Y such that X is (nearly) equal to A * Y. This is the standard mathematical operation for solving a single set of linear equations. The index range of the result is A'Range(2). Constraint_Error is raised if A'Length(1), A'Length(2), and X'Length are not equal. Constraint_Error is raised if the matrix A is ill-conditioned.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),'The text says that Y is such that "X is (nearly) equal to A * Y" rather than "X is equal to A * Y" because rounding errors may mean that there is no value of Y such that X is exactly equal to A * Y. On the other hand it does not mean that any old rough value will do. The algorithm given under  should be followed.',(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},"The requirement to raise Constraint_Error if the matrix is ill-conditioned is really a reflection of what will happen if the matrix is ill-conditioned. See . We do not make any attempt to define ill-conditioned formally.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},"These remarks apply to all versions of Solve and Inverse. ",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Solve (A, X : Complex_Matrix) return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a matrix Y such that X is (nearly) equal to A * Y. This is the standard mathematical operation for solving several sets of linear equations. The index ranges of the result are A'Range(2) and X'Range(2). Constraint_Error is raised if A'Length(1), A'Length(2), and X'Length(1) are not equal. Constraint_Error is raised if the matrix A is ill-conditioned.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Inverse (A : Complex_Matrix) return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a matrix B such that A * B is (nearly) equal to the unit matrix. The index ranges of the result are A'Range(2) and A'Range(1). Constraint_Error is raised if A'Length(1) is not equal to A'Length(2). Constraint_Error is raised if the matrix A is ill-conditioned.",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Determinant (A : Complex_Matrix) return Complex;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns the determinant of the matrix A. Constraint_Error is raised if A'Length(1) is not equal to A'Length(2).",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Eigenvalues(A : Complex_Matrix) return Real_Vector;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns the eigenvalues of the Hermitian matrix A as a vector sorted into order with the largest first. Constraint_Error is raised if A'Length(1) is not equal to A'Length(2). The index range of the result is A'Range(1). Argument_Error is raised if the matrix A is not Hermitian.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"discussion",title:"Discussion: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"A Hermitian matrix is one whose transpose is equal to its complex conjugate. The eigenvalues of a Hermitian matrix are always real. We only support this case because algorithms for solving the general case are inherently unstable. ",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"procedure Eigensystem(A       : in  Complex_Matrix;","\n","                      Values  :  out Real_Vector;","\n","                      Vectors :  out Complex_Matrix);","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," This procedure computes both the eigenvalues and eigenvectors of the Hermitian matrix A. The out parameter Values is the same as that obtained by calling the function Eigenvalues. The out parameter Vectors is a matrix whose columns are the eigenvectors of the matrix A. The order of the columns corresponds to the order of the eigenvalues. The eigenvectors are mutually orthonormal, including when there are repeated eigenvalues. Constraint_Error is raised if A'Length(1) is not equal to A'Length(2), or if Values'Range is not equal to A'Range(1), or if the index ranges of the parameter Vectors are not equal to those of A. Argument_Error is raised if the matrix A is not Hermitian. Constraint_Error is also raised in implementation-defined circumstances if the algorithm used does not converge quickly enough.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"ramification",title:"Ramification: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," There is no requirement on the absolute direction of the returned eigenvectors. Thus they might be multiplied by any complex number whose modulus is 1. It is only the ratios of the components that matter. This is standard practice. ",(0,r.kt)("br",null)),(0,r.kt)(o.Z,{mdxType:"CodeBlock"},"function Unit_Matrix (Order            : Positive;","\n","                      First_1, First_2 : Integer := 1)","\n","                                         return Complex_Matrix;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," This function returns a square ",(0,r.kt)("em",null,"unit matrix")," with Order**2 components and lower bounds of First_1 and First_2 (for the first and second index ranges respectively). All components are set to (0.0, 0.0) except for the main diagonal, whose components are set to (1.0, 0.0). Constraint_Error is raised if First_1 + Order  1 ",">"," Integer'Last or First_2 + Order  1 ",">"," Integer'Last.",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"implementation-requirements-1"}),"Implementation Requirements"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Accuracy requirements for the subprograms Solve, Inverse, Determinant, Eigenvalues and Eigensystem are implementation defined. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-defined",title:"Implementation defined: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"The accuracy requirements for the subprograms Solve, Inverse, Determinant, Eigenvalues and Eigensystem for type Complex_Matrix.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," For operations not involving an inner product, the accuracy requirements are those of the corresponding operations of the type Real'Base and Complex in both the strict mode and the relaxed mode (see G.2).",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," For operations involving an inner product, no requirements are specified in the relaxed mode. In the strict mode the modulus of the absolute error of the inner product ",(0,r.kt)("em",null,"X"),"*",(0,r.kt)("em",null,"Y")," shall not exceed ",(0,r.kt)("em",null,"g"),"*",(0,r.kt)("strong",null,"abs"),"(",(0,r.kt)("em",null,"X"),")*",(0,r.kt)("strong",null,"abs"),"(",(0,r.kt)("em",null,"Y"),") where ",(0,r.kt)("em",null,"g")," is defined as ",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("em",null,"g")," = ",(0,r.kt)("em",null,"X"),"'Length * Real'Machine_Radix**(1  Real'Model_Mantissa)",(0,r.kt)("br",null),"    for mixed complex and real operands",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("em",null,"g")," = sqrt(2.0) * ",(0,r.kt)("em",null,"X"),"'Length * Real'Machine_Radix**(1  Real'Model_Mantissa)",(0,r.kt)("br",null),"    for two complex operands",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00418-01"),"}"," For the L2-norm, no accuracy requirements are specified in the relaxed mode. In the strict mode the relative error on the norm shall not exceed ",(0,r.kt)("em",null,"g")," / 2.0 + 3.0 * Real'Model_Epsilon where ",(0,r.kt)("em",null,"g")," has the definition appropriate for two complex operands.",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"documentation-requirements-1"}),"Documentation Requirements"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Implementations shall document any techniques used to reduce cancellation errors such as extended precision arithmetic. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null,"Documentation Requirement: "),"Any techniques used to reduce cancellation errors in Numerics.Generic_Complex_Arrays shall be documented.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-note",title:"Implementation Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"The above accuracy requirement is met by the canonical implementation of the inner product by multiplication and addition using the corresponding operations of type Complex and performing the cumulative addition using ascending indices. Note however, that some hardware provides special operations for the computation of the inner product and although these may be fast they may not meet the accuracy requirement specified. See Accuracy and Stability of Numerical Algorithms by N J Higham (ISBN 0-89871-355-2), Sections 3.1 and 3.6. ",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"implementation-permissions-1"}),"Implementation Permissions"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI12-0444-1"),"}"," The nongeneric equivalent packages can be actual instantiations of the generic package for the appropriate predefined type, though that is not required.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI12-0444-1"),"}"," Although many operations are defined in terms of operations from Numerics.Generic_Complex_Types, they can be implemented by other operations that have the same effect. ",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"implementation-advice-1"}),"Implementation Advice"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," ","{",(0,r.kt)("em",null,"AI05-0264-1"),"}"," Implementations should implement the Solve and Inverse functions using established techniques. Implementations are recommended to refine the result by performing an iteration on the residuals; if this is done, then it should be documented. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),"Solve and Inverse for Numerics.Generic_Complex_Arrays should be implemented using established techniques and the result should be refined by an iteration on the residuals.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," It is not the intention that any special provision should be made to determine whether a matrix is ill-conditioned or not. The naturally occurring overflow (including division by zero) which will result from executing these functions with an ill-conditioned matrix and thus raise Constraint_Error is sufficient. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"discussion",title:"Discussion: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"There isn't any advice for the implementation to document with this paragraph. ",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," The test that a matrix is Hermitian should use the equality operator to compare the real components and negation followed by equality to compare the imaginary components (see G.2.1). ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),"The equality and negation operators should be used to test that a matrix is Hermitian.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"An implementation should minimize the circumstances under which the algorithm used for Eigenvalues and Eigensystem fails to converge. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),"An implementation should minimize the circumstances under which the algorithm used for Numerics.Generic_Complex_Arrays.Eigenvalues and Numerics.Generic_Complex_Arrays.Eigensystem fails to converge.",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-note",title:"Implementation Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"J. H. Wilkinson is the acknowledged expert in this area. See for example Wilkinson, J. H., and Reinsch, C. , Linear Algebra , vol II of Handbook for Automatic Computation, Springer-Verlag, or Wilkinson, J. H., The Algebraic Eigenvalue Problem, Oxford University Press. ",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," Implementations should not perform operations on mixed complex and real operands by first converting the real operand to complex. See G.1.1. ",(0,r.kt)("br",null)),(0,r.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",title:"Implementation Advice",mdxType:"Admonition"},(0,r.kt)("strong",null),"Mixed real and complex operations should not be performed by converting the real operand to complex.",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"extensions-to-ada-95-2"}),"Extensions to Ada 95"),(0,r.kt)(i.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},"{",(0,r.kt)("em",null,"AI95-00296-01"),"}"," The package Numerics.Generic_Complex_Arrays and its nongeneric equivalents are new. ",(0,r.kt)("br",null)),(0,r.kt)("h4",h({},{id:"wording-changes-from-ada-2005-1"}),"Wording Changes from Ada 2005"),(0,r.kt)(i.Z,{type:"aarm",aarm:"correction",title:"Correction:",mdxType:"Admonition"},"{",(0,r.kt)("em",null,"AI05-0047-1"),"}"," ",(0,r.kt)("strong",null)," Corrected various accuracy and definition issues. ",(0,r.kt)("br",null)))}R.isMDXComponent=!0}}]);