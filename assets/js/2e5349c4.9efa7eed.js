"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[7194],{6805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>k,default:()=>S,frontMatter:()=>p,metadata:()=>h,toc:()=>y});var a=n(1716),o=n(7556),i=n(3183),l=Object.defineProperty,s=Object.defineProperties,r=Object.getOwnPropertyDescriptors,d=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,A=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&m(e,n,t[n]);if(d)for(var n of d(t))A.call(t,n)&&m(e,n,t[n]);return e};const p={sidebar_position:110},k="13.8 Machine Code Insertions",h={unversionedId:"arm/AA-13/AA-13.8",id:"arm/AA-13/AA-13.8",title:"13.8 Machine Code Insertions",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-13/AA-13.8.mdx",sourceDirName:"arm/AA-13",slug:"/arm/AA-13/AA-13.8",permalink:"/docs/arm/AA-13/AA-13.8",draft:!1,tags:[],version:"current",sidebarPosition:110,frontMatter:{sidebar_position:110},sidebar:"tutorialSidebar",previous:{title:"13.7 The Package System",permalink:"/docs/arm/AA-13/AA-13.7"},next:{title:"13.9 Unchecked Type Conversions",permalink:"/docs/arm/AA-13/AA-13.9"}},f={},y=[{value:"Syntax",id:"syntax",level:4},{value:"Name Resolution Rules",id:"name-resolution-rules",level:4},{value:"Legality Rules",id:"legality-rules",level:4},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Implementation Permissions",id:"implementation-permissions",level:4},{value:"Examples",id:"examples",level:4},{value:"Extensions to Ada 83",id:"extensions-to-ada-83",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4}],g={toc:y};function S(e){var t,n=e,{components:l}=n,m=((e,t)=>{var n={};for(var a in e)c.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&d)for(var a of d(e))t.indexOf(a)<0&&A.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=u(u({},g),m),s(t,r({components:l,mdxType:"MDXLayout"}))),(0,a.kt)("h1",u({},{id:"138-machine-code-insertions"}),"13.8 Machine Code Insertions"),(0,a.kt)("admonition",u({},{type:"warning"}),(0,a.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,a.kt)("a",u({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,a.kt)("p",null,"[ A machine code insertion can be achieved by a call to a subprogram whose ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," contains ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement")),"s.] "),(0,a.kt)("h4",u({},{id:"syntax"}),"Syntax"),(0,a.kt)("p",null,(0,a.kt)("code",null,"code_statement"),(0,a.kt)("a",{id:"S0357"}),(0,a.kt)("code",null," ::= "),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.7#S0163"},"qualified_expression")),";"),(0,a.kt)("p",null,"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement"))," is only allowed in the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.2#S0304"},"handled_sequence_of_statements"))," of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body")),". If a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body"))," contains any ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement")),"s, then within this ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body"))," the only allowed form of ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0167"},"statement"))," is a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement"))," (labeled or not), the only allowed ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.11#S0087"},"declarative_item")),"s are ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-8/AA-8.4#S0235"},"use_clause")),"s, and no ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.2#S0305"},"exception_handler"))," is allowed (",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.7#S0018"},"comment")),"s and ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma")),"s are allowed as usual). "),(0,a.kt)("h4",u({},{id:"name-resolution-rules"}),"Name Resolution Rules"),(0,a.kt)("p",null,"The ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.7#S0163"},"qualified_expression"))," is expected to be of any type. "),(0,a.kt)("h4",u({},{id:"legality-rules"}),"Legality Rules"),(0,a.kt)("p",null,"The ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.7#S0163"},"qualified_expression"))," shall be of a type declared in package System.Machine_Code. "),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Ramification: "),"This includes types declared in children of System.Machine_Code. ")),(0,a.kt)("p",null,"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement"))," shall appear only within the scope of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-10/AA-10.1#S0294"},"with_clause"))," that mentions package System.Machine_Code. "),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Ramification: "),"Note that this is not a note; without this rule, it would be possible to write machine code in compilation units which depend on System.Machine_Code only indirectly. ")),(0,a.kt)("h4",u({},{id:"static-semantics"}),"Static Semantics"),(0,a.kt)("p",null,"The contents of the library package System.Machine_Code (if provided) are implementation defined. The meaning of ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement")),"s is implementation defined. [Typically, each ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.7#S0163"},"qualified_expression"))," represents a machine instruction or assembly directive.] "),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Discussion: "),"For example, an instruction might be a record with an Op_Code component and other components for the operands. ")),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Implementation defined: "),"The contents of the visible part of package System.Machine_Code, and the meaning of ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement")),"s.")),(0,a.kt)("h4",u({},{id:"implementation-permissions"}),"Implementation Permissions"),(0,a.kt)("p",null,"An implementation may place restrictions on ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement")),"s. An implementation is not required to provide package System.Machine_Code. "),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"NOTE 1   ","{",(0,a.kt)("em",null,"AI12-0440-1"),"}"," An implementation can provide implementation-defined pragmas specifying register conventions and calling conventions.")),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"NOTE 2   ","{",(0,a.kt)("em",null,"AI95-00318-02"),"}"," Machine code functions are exempt from the rule that a return statement is required. In fact, return statements are forbidden, since only ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement")),"s are allowed. ")),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Discussion: "),'The idea is that the author of a machine code subprogram knows the calling conventions, and refers to parameters and results accordingly. The implementation should document where to put the result of a machine code function, for example, "Scalar results are returned in register 0". ')),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,'NOTE 3   Intrinsic subprograms (see 6.3.1, "Conformance Rules") can also be used to achieve machine code insertions. Interface to assembly language can be achieved using the features in Annex B, "Interface to Other Languages". ')),(0,a.kt)("h4",u({},{id:"examples"}),"Examples"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Example of a code statement:")," "),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},"{","AI05-0229-1","}"," M : Mask;","\n","procedure Set_Mask","\n","  with Inline;","\n"),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},"procedure Set_Mask is","\n",'  use System.Machine_Code; -- assume "with System.Machine_Code;" appears somewhere above',"\n","begin","\n","  SI_Format'(Code =",">"," SSM, B =",">"," M'Base_Reg, D =",">"," M'Disp);","\n","  --  Base_Reg and Disp are implementation-defined attributes","\n","end Set_Mask;","\n"),(0,a.kt)("h4",u({},{id:"extensions-to-ada-83"}),"Extensions to Ada 83"),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"Machine code functions are allowed in Ada 95; in Ada 83, only procedures were allowed. ")),(0,a.kt)("h4",u({},{id:"wording-changes-from-ada-83"}),"Wording Changes from Ada 83"),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"The syntax for ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.8#S0357"},"code_statement")),' is changed to say "',(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.7#S0163"},"qualified_expression")),'" instead of "',(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.2#S0028"},"subtype_mark")),"'",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.3#S0107"},"record_aggregate")),'". Requiring the type of each instruction to be a record type is overspecification. ')))}S.isMDXComponent=!0}}]);