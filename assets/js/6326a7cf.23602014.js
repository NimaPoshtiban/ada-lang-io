"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[3464],{9412:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>k,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var t=a(9440),o=(a(6687),a(1716)),i=a(2526);const r={sidebar_position:101},s="12.8  Example of a Generic Package",c={unversionedId:"arm/AA-12.8",id:"arm/AA-12.8",title:"12.8  Example of a Generic Package",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-12.8.mdx",sourceDirName:"arm",slug:"/arm/AA-12.8",permalink:"/docs/arm/AA-12.8",draft:!1,tags:[],version:"current",sidebarPosition:101,frontMatter:{sidebar_position:101},sidebar:"tutorialSidebar",previous:{title:"12.7  Formal Packages",permalink:"/docs/arm/AA-12.7"},next:{title:"13 Representation Issues",permalink:"/docs/arm/AA-13"}},l={},d=[{value:"Examples",id:"examples",level:4}],p={toc:d};function k(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"128--example-of-a-generic-package"},"12.8  Example of a Generic Package"),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"},"tracking issue"))),(0,o.kt)("p",null,"The following example provides a possible formulation of stacks by means of a generic package. The size of each stack and the type of the stack elements are provided as generic formal parameters. "),(0,o.kt)("h4",{id:"examples"},"Examples"),(0,o.kt)("p",null,(0,o.kt)("em",null,"This paragraph was deleted.")),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"generic","\n","   Size : Positive;","\n","   type Item is private;","\n","package Stack is","\n","   procedure Push(E : in  Item);","\n","   procedure Pop (E : out Item);","\n","   Overflow, Underflow : exception;","\n","end Stack;","\n"),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"package body Stack is","\n"),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"type Table is array (Positive range ","<",">",") of Item;","\n","   Space : Table(1 .. Size);","\n","   Index : Natural := 0;","\n"),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"procedure Push(E : in Item) is","\n","   begin","\n","      if Index ",">","= Size then","\n","         raise Overflow;","\n","      end if;","\n","      Index := Index + 1;","\n","      Space(Index) := E;","\n","   end Push;","\n"),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"procedure Pop(E : out Item) is","\n","   begin","\n","      if Index = 0 then","\n","         raise Underflow;","\n","      end if;","\n","      E := Space(Index);","\n","      Index := Index - 1;","\n","   end Pop;","\n"),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"end Stack;","\n"),(0,o.kt)("p",null,"Instances of this generic package can be obtained as follows: "),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"package Stack_Int  is new Stack(Size =",">"," 200, Item =",">"," Integer);","\n","package Stack_Bool is new Stack(100, Boolean);","\n"),(0,o.kt)("p",null,"Thereafter, the procedures of the instantiated packages can be called as follows: "),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"Stack_Int.Push(N);","\n","Stack_Bool.Push(True);","\n"),(0,o.kt)("p",null,"Alternatively, a generic formulation of the type Stack can be given as follows (package body omitted): "),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"generic","\n","   type Item is private;","\n","package On_Stacks is","\n","   type Stack(Size : Positive) is limited private;","\n","   procedure Push(S : in out Stack; E : in  Item);","\n","   procedure Pop (S : in out Stack; E : out Item);","\n","   Overflow, Underflow : exception;","\n","private","\n","   type Table is array (Positive range ","<",">",") of Item;","\n","   type Stack(Size : Positive) is","\n","      record","\n","         Space : Table(1 .. Size);","\n","         Index : Natural := 0;","\n","      end record;","\n","end On_Stacks;","\n"),(0,o.kt)("p",null,"In order to use such a package, an instance has to be created and thereafter stacks of the corresponding type can be declared: "),(0,o.kt)(i.Z,{mdxType:"CodeBlock"},"declare","\n","   package Stack_Real is new On_Stacks(Real); use Stack_Real;","\n","   S : Stack(100);","\n","begin","\n","   ...","\n","   Push(S, 2.54);","\n","   ...","\n","end;","\n"))}k.isMDXComponent=!0}}]);