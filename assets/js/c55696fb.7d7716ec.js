"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6147],{2641:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>A,metadata:()=>d,toc:()=>m});var t=a(58168),l=(a(96540),a(15680)),o=a(20793),r=a(91435),y=a(21432),i=a(79162),g=a(34421);const A={sidebar_position:47},s="5.6 Block Statements",d={unversionedId:"arm/AA-5/AA-5.6",id:"arm/AA-5/AA-5.6",title:"5.6 Block Statements",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-5/AA-5.6.mdx",sourceDirName:"arm/AA-5",slug:"/arm/AA-5/AA-5.6",permalink:"/docs/arm/AA-5/AA-5.6",draft:!1,tags:[],version:"current",sidebarPosition:47,frontMatter:{sidebar_position:47},sidebar:"referenceManualSidebar",previous:{title:"5.5 Loop Statements",permalink:"/docs/arm/AA-5/AA-5.5"},next:{title:"5.7 Exit Statements",permalink:"/docs/arm/AA-5/AA-5.7"}},c={},m=[{value:"Syntax",id:"syntax",level:4},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Dynamic Semantics",id:"dynamic-semantics",level:4},{value:"Examples",id:"examples",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4},{value:"5.6.1  Parallel Block Statements",id:"561--parallel-block-statements",level:2},{value:"Syntax",id:"syntax-1",level:4},{value:"Dynamic Semantics",id:"dynamic-semantics-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Extensions to Ada 2012",id:"extensions-to-ada-2012",level:4}],u={toc:m},h="wrapper";function p(e){let{components:n,...a}=e;return(0,l.yg)(h,(0,t.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"56-block-statements"},"5.6 Block Statements"),(0,l.yg)("admonition",{type:"warning"},(0,l.yg)("p",{parentName:"admonition"},"This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"},"tracking issue"))),(0,l.yg)(i.A,{mdxType:"MarginText"},"1"),(0,l.yg)("p",null,"[A ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement"))," encloses a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-11/AA-11.2#S0304"},"handled_sequence_of_statements"))," optionally preceded by a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part")),".] ",(0,l.yg)("br",null)),(0,l.yg)("h4",{id:"syntax"},"Syntax"),(0,l.yg)(i.A,{mdxType:"MarginText"},"2"),(0,l.yg)(y.A,{mdxType:"CodeBlock"},(0,l.yg)("code",null,"block","_","statement"),(0,l.yg)("a",{id:"S0191"}),(0,l.yg)("code",null," ::= "),(0,l.yg)("br",null),"   [",(0,l.yg)("em",null,"block","_"),(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0172"},"statement_identifier")),":]",(0,l.yg)("br",null),"       [",(0,l.yg)("strong",null,"declare"),(0,l.yg)("br",null),"            ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part")),"]",(0,l.yg)("br",null),"        ",(0,l.yg)("strong",null,"begin"),(0,l.yg)("br",null),"            ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-11/AA-11.2#S0304"},"handled_sequence_of_statements")),(0,l.yg)("br",null),"        ",(0,l.yg)("strong",null,"end")," [",(0,l.yg)("em",null,"block","_"),(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier")),"];",(0,l.yg)("br",null)),(0,l.yg)(i.A,{mdxType:"MarginText"},"3"),(0,l.yg)("p",{class:"Indented2"},"If a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement"))," has a ",(0,l.yg)("em",null,"block","_"),(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0172"},"statement_identifier")),", then the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier"))," shall be repeated after the ",(0,l.yg)("strong",null,"end"),"; otherwise, there shall not be an ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier"))," after the ",(0,l.yg)("strong",null,"end"),". ",(0,l.yg)("br",null)),(0,l.yg)("h4",{id:"static-semantics"},"Static Semantics"),(0,l.yg)(i.A,{mdxType:"MarginText"},"4"),(0,l.yg)("p",null,"A ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement"))," that has no explicit ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part"))," has an implicit empty ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part")),". ",(0,l.yg)("br",null)),(0,l.yg)(r.A,{mdxType:"AnnotatedOnly"},(0,l.yg)(i.A,{mdxType:"MarginText"},"4.a"),(0,l.yg)(o.A,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,l.yg)("strong",null),"Thus, other rules can always refer to the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part"))," of a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement")),". ",(0,l.yg)("br",null))),(0,l.yg)("h4",{id:"dynamic-semantics"},"Dynamic Semantics"),(0,l.yg)(i.A,{mdxType:"MarginText"},"5"),(0,l.yg)("p",null,"The execution of a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement"))," consists of the elaboration of its ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part"))," followed by the execution of its ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-11/AA-11.2#S0304"},"handled_sequence_of_statements")),". ",(0,l.yg)("br",null)),(0,l.yg)("h4",{id:"examples"},"Examples"),(0,l.yg)(i.A,{mdxType:"MarginText"},"6"),(0,l.yg)("p",null,(0,l.yg)("em",null,"Example of a block statement with a local variable:")," ",(0,l.yg)("br",null)),(0,l.yg)(i.A,{mdxType:"MarginText"},"7"),(0,l.yg)(y.A,{language:"ada",mdxType:"CodeBlock"},"Swap:","\n","   declare","\n","      Temp : Integer;","\n","   begin","\n","      Temp := V; V := U; U := Temp;","\n","   end Swap;","\n"),(0,l.yg)(r.A,{mdxType:"AnnotatedOnly"},(0,l.yg)(i.A,{mdxType:"MarginText"},"7.a"),(0,l.yg)(o.A,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,l.yg)("strong",null),"If task objects are declared within a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement"))," whose execution is completed, the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement"))," is not left until all its dependent tasks are terminated (see ",(0,l.yg)("a",{href:"../AA-7/AA-7.6"},"7.6"),"). This rule applies to completion caused by a transfer of control.",(0,l.yg)("br",null))),(0,l.yg)(r.A,{mdxType:"AnnotatedOnly"},(0,l.yg)(i.A,{mdxType:"MarginText"},"7.b"),(0,l.yg)(o.A,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Within a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement")),", the block name can be used in expanded names denoting local entities such as Swap.Temp in the above example (see ",(0,l.yg)("a",{href:"../AA-4/AA-4.1#Subclause_4.1.3"},"4.1.3"),"). ",(0,l.yg)("br",null))),(0,l.yg)(r.A,{mdxType:"AnnotatedOnly"},(0,l.yg)("h4",{id:"wording-changes-from-ada-83"},"Wording Changes from Ada 83")),(0,l.yg)(r.A,{mdxType:"AnnotatedOnly"},(0,l.yg)(i.A,{mdxType:"MarginText"},"7.c"),(0,l.yg)(o.A,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The syntax rule for ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement"))," now uses the syntactic category ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-11/AA-11.2#S0304"},"handled_sequence_of_statements")),". ",(0,l.yg)("br",null))),(0,l.yg)("a",{id:"Subclause_5.6.1"}),(0,l.yg)("h2",{id:"561--parallel-block-statements"},"5.6.1  Parallel Block Statements"),(0,l.yg)(i.A,{mdxType:"MarginText"},"1/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0119-1","AI12-0436-1"],mdxType:"MarginInfo"}),(0,l.yg)("p",null,"[A ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0192"},"parallel_block_statement"))," comprises two or more ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," separated by ",(0,l.yg)("strong",null,"and")," where each represents an independent activity that is intended to proceed concurrently with the others.]",(0,l.yg)("br",null)),(0,l.yg)("h4",{id:"syntax-1"},"Syntax"),(0,l.yg)(i.A,{mdxType:"MarginText"},"2/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0119-1","AI12-0427-1","AI12-0436-1"],mdxType:"MarginInfo"}),(0,l.yg)(y.A,{mdxType:"CodeBlock"},(0,l.yg)("code",null,"parallel","_","block","_","statement"),(0,l.yg)("a",{id:"S0192"}),(0,l.yg)("code",null," ::= "),(0,l.yg)("br",null),"    ",(0,l.yg)("strong",null,"parallel")," [(",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.5#S0180"},"chunk_specification")),")] [",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-13/AA-13.1#S0346"},"aspect_specification")),"] ",(0,l.yg)("strong",null,"do"),(0,l.yg)("br",null),"       ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements")),(0,l.yg)("br",null),"    ",(0,l.yg)("strong",null,"and"),(0,l.yg)("br",null),"       ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements")),(0,l.yg)("br",null),"   ","{",(0,l.yg)("strong",null,"and"),(0,l.yg)("br",null),"       ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements")),"}",(0,l.yg)("br",null),"    ",(0,l.yg)("strong",null,"end do"),";",(0,l.yg)("br",null)),(0,l.yg)(i.A,{mdxType:"MarginText"},"3/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0427-1"],mdxType:"MarginInfo"}),(0,l.yg)("p",{class:"Indented2"},"The ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.5#S0180"},"chunk_specification")),", if any, of a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0192"},"parallel_block_statement"))," shall be an ",(0,l.yg)("em",null,"integer","_"),(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-4/AA-4.4#S0138"},"simple_expression")),". ",(0,l.yg)("br",null)),(0,l.yg)("h4",{id:"dynamic-semantics-1"},"Dynamic Semantics"),(0,l.yg)(i.A,{mdxType:"MarginText"},"4/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0119-1","AI12-0427-1"],mdxType:"MarginInfo"}),(0,l.yg)("p",null,"For the execution of a ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0192"},"parallel_block_statement")),", the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.5#S0180"},"chunk_specification"))," and the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-13/AA-13.1#S0346"},"aspect_specification")),", if any, are elaborated in an arbitrary order. After elaborating the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.5#S0180"},"chunk_specification")),", if any, a check is made that the determined maximum number of chunks is greater than zero. If this check fails, Program","_","Error is raised. ",(0,l.yg)("br",null)),(0,l.yg)(i.A,{mdxType:"MarginText"},"5/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0119-1","AI12-0427-1","AI12-0436-1","AI12-0449-1"],mdxType:"MarginInfo"}),(0,l.yg)("p",null,"Then, the various ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," are grouped into one or more ",(0,l.yg)("em",null,"chunks"),", each with its own logical thread of control (see Clause ",(0,l.yg)("a",{href:"../AA-9/"},"9"),"), up to the maximum number of chunks specified by the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.5#S0180"},"chunk_specification")),", if any. Within each chunk every ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," of the chunk is executed in turn, in an arbitrary order. The ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0192"},"parallel_block_statement"))," is complete once every one of the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," has completed, either by reaching the end of its execution, or due to a transfer of control out of the construct by one of the ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," (see ",(0,l.yg)("a",{href:"../AA-5/AA-5.1"},"5.1"),").",(0,l.yg)("br",null)),(0,l.yg)(r.A,{mdxType:"AnnotatedOnly"},(0,l.yg)(i.A,{mdxType:"MarginText"},"5.a/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0119-1","AI12-0436-1"],mdxType:"MarginInfo"}),(0,l.yg)(o.A,{type:"aarm",aarm:"implementation-note",mdxType:"Admonition"},(0,l.yg)("strong",null),"Although each ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," of a parallel block represents a separate logical thread of control, the implementation may choose to combine two or more such logical threads of control into a single physical thread of control to reduce the cost of creating numerous physical threads of control. ",(0,l.yg)("br",null))),(0,l.yg)("h4",{id:"examples-1"},"Examples"),(0,l.yg)(i.A,{mdxType:"MarginText"},"6/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0429-1"],mdxType:"MarginInfo"}),(0,l.yg)("p",null,(0,l.yg)("em",null,"Example of a parallel block used to walk a binary tree in parallel:"),(0,l.yg)("br",null)),(0,l.yg)(i.A,{mdxType:"MarginText"},"7/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0119-1","AI12-0404-1"],mdxType:"MarginInfo"}),(0,l.yg)(y.A,{language:"ada",mdxType:"CodeBlock"},"procedure Traverse (T : Expr","_","Ptr) is -- see ",(0,l.yg)("a",{href:"../AA-3/AA-3.9#Subclause_3.9.1"},"3.9.1"),"\n","begin","\n","   if T /= null and then","\n","      T.all in Binary","_","Operation'Class -- see ",(0,l.yg)("a",{href:"../AA-3/AA-3.9#Subclause_3.9.1"},"3.9.1"),"\n","   then -- recurse down the binary tree","\n","      parallel do","\n","         Traverse (T.Left);","\n","      and","\n","         Traverse (T.Right);","\n","      and","\n","         Ada.Text","_","IO.Put","_","Line","\n",'            ("Processing " & Ada.Tags.Expanded',"_","Name (T'Tag));","\n","      end do;","\n","   end if;","\n","end Traverse;","\n"),(0,l.yg)(i.A,{mdxType:"MarginText"},"8/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0429-1"],mdxType:"MarginInfo"}),(0,l.yg)("p",null,(0,l.yg)("em",null,"Example of a parallel block used to search two halves of a string in parallel:"),(0,l.yg)("br",null)),(0,l.yg)(i.A,{mdxType:"MarginText"},"9/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0119-1"],mdxType:"MarginInfo"}),(0,l.yg)(y.A,{language:"ada",mdxType:"CodeBlock"},"function Search (S : String; Char : Character) return Boolean is","\n","begin","\n","   if S'Length ","<","= 1000 then","\n","       -- Sequential scan","\n","       return (for some C of S =",">"," C = Char);","\n","   else","\n","       -- Parallel divide and conquer","\n","       declare","\n","          Mid : constant Positive := S'First + S'Length/2 - 1;","\n","       begin","\n","          parallel do","\n","             for C of S(S'First .. Mid) loop","\n","                if C = Char then","\n","                   return True;  -- Terminates enclosing do","\n","                end if;","\n","             end loop;","\n","          and","\n","             for C of S(Mid + 1 .. S'Last) loop","\n","                if C = Char then","\n","                   return True;  -- Terminates enclosing do","\n","                end if;","\n","             end loop;","\n","          end do;","\n","          -- Not found","\n","          return False;","\n","       end;","\n","   end if;","\n","end Search;","\n"),(0,l.yg)(r.A,{mdxType:"AnnotatedOnly"},(0,l.yg)("h4",{id:"extensions-to-ada-2012"},"Extensions to Ada 2012")),(0,l.yg)(r.A,{mdxType:"AnnotatedOnly"},(0,l.yg)(i.A,{mdxType:"MarginText"},"9.a/5_5.6.1"),(0,l.yg)(g.A,{items:["AI12-0119-1","AI12-0427-1","AI12-0436-1"],mdxType:"MarginInfo"}),(0,l.yg)(o.A,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The ",(0,l.yg)("code",null,(0,l.yg)("a",{href:"../AA-5/AA-5.6#S0192"},"parallel_block_statement"))," is new. ",(0,l.yg)("br",null))))}p.isMDXComponent=!0}}]);