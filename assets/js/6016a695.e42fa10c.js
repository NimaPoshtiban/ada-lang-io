"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[7966],{1716:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(6687);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(9440),a=(n(6687),n(1716));const o={sidebar_position:130},i="A.13  Exceptions in Input-Output",s={unversionedId:"arm/AA-A.13",id:"arm/AA-A.13",title:"A.13  Exceptions in Input-Output",description:"The package IO_Exceptions defines the exceptions used by the predefined input-output packages.",source:"@site/docs/arm/AA-A.13.md",sourceDirName:"arm",slug:"/arm/AA-A.13",permalink:"/docs/arm/AA-A.13",draft:!1,tags:[],version:"current",sidebarPosition:130,frontMatter:{sidebar_position:130},sidebar:"tutorialSidebar",previous:{title:"A.12  Stream Input-Output",permalink:"/docs/arm/AA-A.12"},next:{title:"A.14  File Sharing",permalink:"/docs/arm/AA-A.14"}},p={},c=[{value:"Static Semantics",id:"static-semantics",level:4},{value:"Documentation Requirements",id:"documentation-requirements",level:4},{value:"Implementation Permissions",id:"implementation-permissions",level:4},{value:"Erroneous Execution",id:"erroneous-execution",level:4}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"a13--exceptions-in-input-output"},"A.13  Exceptions in Input-Output"),(0,a.kt)("p",null,"{AI12-0445-1} The package IO_Exceptions defines the exceptions used by the predefined input-output packages. "),(0,a.kt)("h4",{id:"static-semantics"},"Static Semantics"),(0,a.kt)("p",null,"The library package IO_Exceptions has the following declaration: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI12-0414-1} package Ada.IO_Exceptions\n   with Pure is\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"   Status_Error : exception;\n   Mode_Error   : exception;\n   Name_Error   : exception;\n   Use_Error    : exception;\n   Device_Error : exception;\n   End_Error    : exception;\n   Data_Error   : exception;\n   Layout_Error : exception;\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"end Ada.IO_Exceptions;\n\n")),(0,a.kt)("p",null,"If more than one error condition exists, the corresponding exception that appears earliest in the following list is the one that is propagated."),(0,a.kt)("p",null,"The exception Status_Error is propagated by an attempt to operate upon a file that is not open, and by an attempt to open a file that is already open."),(0,a.kt)("p",null,"The exception Mode_Error is propagated by an attempt to read from, or test for the end of, a file whose current mode is Out_File or Append_File, and also by an attempt to write to a file whose current mode is In_File. In the case of Text_IO, the exception Mode_Error is also propagated by specifying a file whose current mode is Out_File or Append_File in a call of Set_Input, Skip_Line, End_Of_Line, Skip_Page, or End_Of_Page; and by specifying a file whose current mode is In_File in a call of Set_Output, Set_Line_Length, Set_Page_Length, Line_Length, Page_Length, New_Line, or New_Page."),(0,a.kt)("p",null,"The exception Name_Error is propagated by a call of Create or Open if the string given for the parameter Name does not allow the identification of an external file. For example, this exception is propagated if the string is improper, or, alternatively, if either none or more than one external file corresponds to the string."),(0,a.kt)("p",null,"The exception Use_Error is propagated if an operation is attempted that is not possible for reasons that depend on characteristics of the external file. For example, this exception is propagated by the procedure Create, among other circumstances, if the given mode is Out_File but the form specifies an input only device, if the parameter Form specifies invalid access rights, or if an external file with the given name already exists and overwriting is not allowed."),(0,a.kt)("p",null,"The exception Device_Error is propagated if an input-output operation cannot be completed because of a malfunction of the underlying system."),(0,a.kt)("p",null,"The exception End_Error is propagated by an attempt to skip (read past) the end of a file."),(0,a.kt)("p",null,"The exception Data_Error can be propagated by the procedure Read (or by the Read attribute) if the element read cannot be interpreted as a value of the required subtype. This exception is also propagated by a procedure Get (defined in the package Text_IO) if the input character sequence fails to satisfy the required syntax, or if the value input does not belong to the range of the required subtype."),(0,a.kt)("p",null,"The exception Layout_Error is propagated (in text input-output) by Col, Line, or Page if the value returned exceeds Count'Last. The exception Layout_Error is also propagated on output by an attempt to set column or line numbers in excess of specified maximum line or page lengths, respectively (excluding the unbounded cases). It is also propagated by an attempt to Put too many characters to a string."),(0,a.kt)("p",null,"{AI05-0262-1} These exceptions are also propagated by various other language-defined packages and operations, see the definition of those entities for other reasons that these exceptions are propagated."),(0,a.kt)("p",null,"Reason: {AI05-0299-1} This subclause is based in Ada 95. Later versions of Ada (starting with Technical Corrigendum 1) have added a number of additional places and reasons that cause these exceptions. In particular, TC1 says that stream attributes need to raise End_Error in some circumstances; Amendment 1 adds Ada.Directories and a number of new places and reasons that Name_Error and Use_Error are raised. There are more. We don't want to try to update this text (or even this note!) for every possible reason and place that might raise one of these exceptions, so we add this blanket statement. "),(0,a.kt)("h4",{id:"documentation-requirements"},"Documentation Requirements"),(0,a.kt)("p",null,"The implementation shall document the conditions under which Name_Error, Use_Error and Device_Error are propagated. "),(0,a.kt)("p",null,"Documentation Requirement: The conditions under which Io_Exceptions.Name_Error, Io_Exceptions.Use_Error, and Io_Exceptions.Device_Error are propagated."),(0,a.kt)("h4",{id:"implementation-permissions"},"Implementation Permissions"),(0,a.kt)("p",null,"{AI12-0444-1} When the associated check is complex, it is optional to propagate Data_Error as part of a procedure Read (or the Read attribute) when the value read cannot be interpreted as a value of the required subtype. "),(0,a.kt)("p",null,'Ramification: An example where the implementation may choose not to perform the check is an enumeration type with a representation clause with "holes" in the range of internal codes.'),(0,a.kt)("h4",{id:"erroneous-execution"},"Erroneous Execution"),(0,a.kt)("p",null,"[If the element read by the procedure Read (or by the Read attribute) cannot be interpreted as a value of the required subtype, but this is not detected and Data_Error is not propagated, then the resulting value can be abnormal, and subsequent references to the value can lead to erroneous execution, as explained in 13.9.1. ]"))}u.isMDXComponent=!0}}]);