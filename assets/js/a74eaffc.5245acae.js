"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[1040],{21895:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>m,default:()=>k,frontMatter:()=>p,metadata:()=>g,toc:()=>v});var i=t(91716),o=Object.defineProperty,a=Object.defineProperties,r=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,n,t)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))s.call(n,t)&&c(e,t,n[t]);if(l)for(var t of l(n))u.call(n,t)&&c(e,t,n[t]);return e};const p={title:"10.3 Program Structure"},m=void 0,g={unversionedId:"style-guide/s10/03",id:"style-guide/s10/03",title:"10.3 Program Structure",description:"Blocks",source:"@site/docs/style-guide/s10/03.mdx",sourceDirName:"style-guide/s10",slug:"/style-guide/s10/03",permalink:"/docs/style-guide/s10/03",draft:!1,tags:[],version:"current",frontMatter:{title:"10.3 Program Structure"},sidebar:"styleGuideSidebar",previous:{title:"10.2 Performance Measurement",permalink:"/docs/style-guide/s10/02"},next:{title:"10.4 Data Structures",permalink:"/docs/style-guide/s10/04"}},f={},v=[{value:"Blocks",id:"blocks",level:3},{value:"guideline",id:"guideline",level:4},{value:"example",id:"example",level:4},{value:"rationale",id:"rationale",level:4},{value:"notes",id:"notes",level:4}],h={toc:v};function k(e){var n,t=e,{components:o}=t,c=((e,n)=>{var t={};for(var i in e)s.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&l)for(var i of l(e))n.indexOf(i)<0&&u.call(e,i)&&(t[i]=e[i]);return t})(t,["components"]);return(0,i.kt)("wrapper",(n=d(d({},h),c),a(n,r({components:o,mdxType:"MDXLayout"}))),(0,i.kt)("h3",d({},{id:"blocks"}),"Blocks"),(0,i.kt)("h4",d({},{id:"guideline"}),"guideline"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use blocks (see Guideline 5.6.9) to introduce late initialization\nwhen measured performance indicates.")),(0,i.kt)("h4",d({},{id:"example"}),"example"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-ada"}),"   ...\n   Initial : Matrix;\n\nbegin  -- Find_Solution\n\n   Initialize_Solution_Matrix:\n      for Row in Initial'Range(1) loop\n         for Col in Initial'Range(2) loop\n            Initial (Row, Col) := Get_Value (Row, Col);\n         end loop;\n      end loop Initialize_Solution_Matrix;\n\n   Converge_To_The_Solution:\n      declare\n\n         Solution       : Matrix           := Identity;\n         Min_Iterations : constant Natural := ...;\n\n      begin  -- Converge_To_The_Solution\n         for Iterations in 1 .. Min_Iterations loop\n            Converge (Solution, Initial);\n         end loop;\n\n      end Converge_To_The_Solution;\n\n   ...\nend Find_Solution;\n")),(0,i.kt)("h4",d({},{id:"rationale"}),"rationale"),(0,i.kt)("p",null,"Late initialization allows a compiler more choices in register usage\noptimization. Depending on the circumstance, this may introduce a\nsignificant performance improvement."),(0,i.kt)("p",null,"Some compilers incur a performance penalty when declarative blocks are\nintroduced. Careful analysis and timing tests by the programmer may\nidentify those declarative blocks that should be removed."),(0,i.kt)("h4",d({},{id:"notes"}),"notes"),(0,i.kt)("p",null,"It is difficult to accurately predict through code inspections which\ndeclarative blocks improve performance and which degrade performance.\nHowever, with these general guidelines and a familiarity with the\nparticular implementation, performance can be improved."))}k.isMDXComponent=!0}}]);