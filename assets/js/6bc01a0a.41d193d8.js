"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[8192],{37158:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>A,default:()=>T,frontMatter:()=>k,metadata:()=>h,toc:()=>b});var a=t(91716),r=t(21256),i=t(24895),o=t(28090),l=t(48424),s=Object.defineProperty,c=Object.defineProperties,d=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,g=(e,n,t)=>n in e?s(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,f=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&g(e,t,n[t]);if(m)for(var t of m(n))u.call(n,t)&&g(e,t,n[t]);return e};const k={sidebar_position:97},A="12.2 Generic Bodies",h={unversionedId:"arm/AA-12/AA-12.2",id:"arm/AA-12/AA-12.2",title:"12.2 Generic Bodies",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-12/AA-12.2.mdx",sourceDirName:"arm/AA-12",slug:"/arm/AA-12/AA-12.2",permalink:"/docs/arm/AA-12/AA-12.2",draft:!1,tags:[],version:"current",sidebarPosition:97,frontMatter:{sidebar_position:97},sidebar:"referenceManualSidebar",previous:{title:"12.1 Generic Declarations",permalink:"/docs/arm/AA-12/AA-12.1"},next:{title:"12.3 Generic Instantiation",permalink:"/docs/arm/AA-12/AA-12.3"}},y={},b=[{value:"Dynamic Semantics",id:"dynamic-semantics",level:4},{value:"Examples",id:"examples",level:4}],x={toc:b};function T(e){var n,t=e,{components:s}=t,g=((e,n)=>{var t={};for(var a in e)p.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&m)for(var a of m(e))n.indexOf(a)<0&&u.call(e,a)&&(t[a]=e[a]);return t})(t,["components"]);return(0,a.kt)("wrapper",(n=f(f({},x),g),c(n,d({components:s,mdxType:"MDXLayout"}))),(0,a.kt)("h1",f({},{id:"122-generic-bodies"}),"12.2 Generic Bodies"),(0,a.kt)("admonition",f({},{type:"warning"}),(0,a.kt)("p",{parentName:"admonition"},"This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,a.kt)("a",f({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,a.kt)(l.Z,{mdxType:"MarginText"},"1"),(0,a.kt)("p",null,"The body of a generic unit (a ",(0,a.kt)("em",null,"generic body"),") [is a template for the instance bodies. The syntax of a generic body is identical to that of a nongeneric body]. ",(0,a.kt)("br",null)),(0,a.kt)(i.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"1.a"),(0,a.kt)(r.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"We also use terms like \u201cgeneric function body\u201d and \u201cnongeneric package body\u201d. ",(0,a.kt)("br",null))),(0,a.kt)("h4",f({},{id:"dynamic-semantics"}),"Dynamic Semantics"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"2"),(0,a.kt)("p",null,"The elaboration of a generic body has no other effect than to establish that the generic unit can from then on be instantiated without failing the Elaboration_Check. If the generic body is a child of a generic package, then its elaboration establishes that each corresponding declaration nested in an instance of the parent (see ",(0,a.kt)("a",{href:"../AA-10/AA-10.1#Subclause_10.1.1"},"10.1.1"),") can from then on be instantiated without failing the Elaboration_Check. ",(0,a.kt)("br",null)),(0,a.kt)(i.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"3"),(0,a.kt)(r.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE 1   The syntax of generic subprograms implies that a generic subprogram body is always the completion of a declaration. ",(0,a.kt)("br",null))),(0,a.kt)("h4",f({},{id:"examples"}),"Examples"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"4"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Example of a generic procedure body:")," ",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"5"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"procedure Exchange(U, V : in out Elem) is  -- see ",(0,a.kt)("a",{href:"../AA-12/AA-12.1"},"12.1"),"\n","   T : Elem;  --  the generic formal type","\n","begin","\n","   T := U;","\n","   U := V;","\n","   V := T;","\n","end Exchange;","\n"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"6"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Example of a generic function body:")," ",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"7"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"function Squaring(X : Item) return Item is  --  see ",(0,a.kt)("a",{href:"../AA-12/AA-12.1"},"12.1"),"\n","begin","\n",'   return X*X;  --  the formal operator "*"',"\n","end Squaring;","\n"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"8"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Example of a generic package body:")," ",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"9"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"package body On_Vectors is  --  see ",(0,a.kt)("a",{href:"../AA-12/AA-12.1"},"12.1"),"\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"10"),"function Sum(A, B : Vector) return Vector is","\n","      Result : Vector(A'Range); --  the formal type Vector","\n","      Bias   : constant Integer := B'First - A'First;","\n","   begin","\n","      if A'Length /= B'Length then","\n","         raise Length_Error;","\n","      end if;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"11"),"for N in A'Range loop","\n","         Result(N) := Sum(A(N), B(N + Bias)); -- the formal function Sum","\n","      end loop;","\n","      return Result;","\n","   end Sum;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"12"),"function Sigma(A : Vector) return Item is","\n","      Total : Item := A(A'First); --  the formal type Item","\n","   begin","\n","      for N in A'First + 1 .. A'Last loop","\n","         Total := Sum(Total, A(N)); --  the formal function Sum","\n","      end loop;","\n","      return Total;","\n","   end Sigma;","\n","end On_Vectors;","\n"))}T.isMDXComponent=!0}}]);