"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[4329],{35356:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>f,contentTitle:()=>p,default:()=>v,frontMatter:()=>g,metadata:()=>m,toc:()=>y});var r=n(91716),i=Object.defineProperty,t=Object.defineProperties,l=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,u=(e,a,n)=>a in e?i(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,c=(e,a)=>{for(var n in a||(a={}))o.call(a,n)&&u(e,n,a[n]);if(s)for(var n of s(a))d.call(a,n)&&u(e,n,a[n]);return e};const g={title:"10.4 Data Structures"},p=void 0,m={unversionedId:"style-guide/s10/04",id:"style-guide/s10/04",title:"10.4 Data Structures",description:"Dynamic Arrays",source:"@site/docs/style-guide/s10/04.mdx",sourceDirName:"style-guide/s10",slug:"/style-guide/s10/04",permalink:"/docs/style-guide/s10/04",draft:!1,tags:[],version:"current",frontMatter:{title:"10.4 Data Structures"},sidebar:"styleGuideSidebar",previous:{title:"10.3 Program Structure",permalink:"/docs/style-guide/s10/03"},next:{title:"10.5 Algorithms",permalink:"/docs/style-guide/s10/05"}},f={},y=[{value:"Dynamic Arrays",id:"dynamic-arrays",level:3},{value:"guideline",id:"guideline",level:4},{value:"rationale",id:"rationale",level:4},{value:"Zero-Based Arrays",id:"zero-based-arrays",level:3},{value:"guideline",id:"guideline-1",level:4},{value:"rationale",id:"rationale-1",level:4},{value:"Unconstrained Records",id:"unconstrained-records",level:3},{value:"guideline",id:"guideline-2",level:4},{value:"example",id:"example",level:4},{value:"rationale",id:"rationale-2",level:4},{value:"Records and Arrays",id:"records-and-arrays",level:3},{value:"guideline",id:"guideline-3",level:4},{value:"example",id:"example-1",level:4},{value:"rationale",id:"rationale-3",level:4},{value:"Record and Array Aggregates",id:"record-and-array-aggregates",level:3},{value:"guideline",id:"guideline-4",level:4},{value:"rationale",id:"rationale-4",level:4}],h={toc:y};function v(e){var a,n=e,{components:i}=n,u=((e,a)=>{var n={};for(var r in e)o.call(e,r)&&a.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&s)for(var r of s(e))a.indexOf(r)<0&&d.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(a=c(c({},h),u),t(a,l({components:i,mdxType:"MDXLayout"}))),(0,r.kt)("h3",c({},{id:"dynamic-arrays"}),"Dynamic Arrays"),(0,r.kt)("h4",c({},{id:"guideline"}),"guideline"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use constrained arrays when measured performance indicates.")),(0,r.kt)("h4",c({},{id:"rationale"}),"rationale"),(0,r.kt)("p",null,"If array bounds are not known until run-time, then calculations of these\nbounds may affect run-time performance. Using named constants or static\nexpressions as array bounds may provide better performance than using\nvariables or nonstatic expressions. Thus, if the values of Lower and\nUpper are not determined until run-time, then:"),(0,r.kt)("p",null,"... is array (Lower .. Upper) of ..."),(0,r.kt)("p",null,"may cause address and offset calculations to be delayed until run-time,\nintroducing a performance penalty. See NASA (1992) for a detailed\ndiscussion of the tradeoffs and alternatives."),(0,r.kt)("h3",c({},{id:"zero-based-arrays"}),"Zero-Based Arrays"),(0,r.kt)("h4",c({},{id:"guideline-1"}),"guideline"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use zero-based indexing for arrays when measured performance\nindicates.")),(0,r.kt)("h4",c({},{id:"rationale-1"}),"rationale"),(0,r.kt)("p",null,"For some compilers, offset calculations for an array whose lower bound\nis 0 (either the integer zero or the first value of an enumeration type)\nare simplified. For other compilers, optimization is more likely if the\nlower bound is 1."),(0,r.kt)("h3",c({},{id:"unconstrained-records"}),"Unconstrained Records"),(0,r.kt)("h4",c({},{id:"guideline-2"}),"guideline"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use fixed-size components for records when measured performance\nindicates.")),(0,r.kt)("h4",c({},{id:"example"}),"example"),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-ada"}),"subtype Line_Range   is Integer range 0 .. Max_Lines;\nsubtype Length_Range is Integer range 0 .. Max_Length;\n\n-- Note that Max_Lines and Max_Length need to be static\ntype Paragraph_Body is array (Line_Range range <>, Length_Range range <>) of Character;\n\ntype Paragraph (Lines : Line_Range := 0; Line_Length : Length_Range := 0) is\n   record\n      Text : Paragraph_Body (1 .. Lines, 1 .. Line_Length);\n   end record;\n")),(0,r.kt)("h4",c({},{id:"rationale-2"}),"rationale"),(0,r.kt)("p",null,"Determine the size and speed impact of unconstrained records having\ncomponents depending on discriminants. Some compilers will allocate the\nmaximum possible size to each object of the type; others will use\npointers to the dependent components, incurring a possible heap\nperformance penalty. Consider the possibility of using fixed-size\ncomponents."),(0,r.kt)("h3",c({},{id:"records-and-arrays"}),"Records and Arrays"),(0,r.kt)("h4",c({},{id:"guideline-3"}),"guideline"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define arrays of records as parallel arrays when measured\nperformance indicates.")),(0,r.kt)("h4",c({},{id:"example-1"}),"example"),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-ada"}),"    -- Array of records\n    Process (Student (Index).Name, Student (Index).Grade);\n    -- Record of arrays\n    Process (Student.Name (Index), Student.Grade (Index));\n    -- Parallel arrays\n    Process (Name (Index), Grade (Index));\n")),(0,r.kt)("h4",c({},{id:"rationale-3"}),"rationale"),(0,r.kt)("p",null,"Determine the impact of structuring data as arrays of records, records\ncontaining arrays, or parallel arrays. Some implementations of Ada will\nshow significant performance differences among these examples."),(0,r.kt)("h3",c({},{id:"record-and-array-aggregates"}),"Record and Array Aggregates"),(0,r.kt)("h4",c({},{id:"guideline-4"}),"guideline"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use a sequence of assignments for an aggregation when measured\nperformance indicates.")),(0,r.kt)("h4",c({},{id:"rationale-4"}),"rationale"),(0,r.kt)("p",null,'Determine the impact of using an aggregate versus a sequence of\nassignments. Using an aggregate generally requires the use of a\ntemporary variable. If the aggregate is "static" (i.e., its size and\ncomponents are known at compile- or link-time, allowing link-time\nallocation and initialization), then it will generally be more efficient\nthan a sequence of assignments. If the aggregate is "dynamic," then a\nseries of assignments may be more efficient because no temporary\nvariable is needed.'),(0,r.kt)("p",null,"See Guideline 5.6.10 for a discussion of aggregates from the point of\nview of readability and maintainability."),(0,r.kt)("p",null,"See Guideline 10.6.1 for a discussion of extension aggregates."))}v.isMDXComponent=!0}}]);