"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6551],{76512:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=r(58168),t=(r(96540),r(15680));const i={title:"10.8 Summary"},s=void 0,o={unversionedId:"style-guide/s10/08",id:"style-guide/s10/08",title:"10.8 Summary",description:"- Use the guidelines in this chapter with care; they may be hazardous",source:"@site/docs/style-guide/s10/08.mdx",sourceDirName:"style-guide/s10",slug:"/style-guide/s10/08",permalink:"/docs/style-guide/s10/08",draft:!1,tags:[],version:"current",frontMatter:{title:"10.8 Summary"},sidebar:"styleGuideSidebar",previous:{title:"10.7 Pragmas",permalink:"/docs/style-guide/s10/07"},next:{title:"11. Complete Example",permalink:"/docs/style-guide/Portable_Dining_Philosophers_Example"}},l={},d=[{value:"program structure",id:"program-structure",level:4},{value:"data structures",id:"data-structures",level:3},{value:"algorithms",id:"algorithms",level:3},{value:"types",id:"types",level:3},{value:"pragmas",id:"pragmas",level:3}],m={toc:d},u="wrapper";function p(e){let{components:a,...r}=e;return(0,t.yg)(u,(0,n.A)({},m,r,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Use the guidelines in this chapter with care; they may be hazardous\nto your software.")),(0,t.yg)("h4",{id:"program-structure"},"program structure"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Use blocks to introduce late initialization when measured\nperformance indicates .")),(0,t.yg)("h3",{id:"data-structures"},"data structures"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Use constrained arrays when measured performance indicates."),(0,t.yg)("li",{parentName:"ul"},"Use zero-based indexing for arrays when measured performance\nindicates."),(0,t.yg)("li",{parentName:"ul"},"Use fixed-size components for records when measured performance\nindicates."),(0,t.yg)("li",{parentName:"ul"},"Define arrays of records as parallel arrays when measured\nperformance indicates."),(0,t.yg)("li",{parentName:"ul"},"Use a sequence of assignments for an aggregation when measured\nperformance indicates.")),(0,t.yg)("h3",{id:"algorithms"},"algorithms"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Use incremental schemes instead of mod and rem when measured\nperformance indicates."),(0,t.yg)("li",{parentName:"ul"},"Use the short-circuit control form when measured performance\nindicates."),(0,t.yg)("li",{parentName:"ul"},"Use the case statement when measured performance indicates."),(0,t.yg)("li",{parentName:"ul"},"Use hard-coded constraint checking when measured performance\nindicates."),(0,t.yg)("li",{parentName:"ul"},"Use column-first processing of two-dimensional arrays when measured\nperformance indicates."),(0,t.yg)("li",{parentName:"ul"},"Use overwriting for conditional assignment when measured performance\nindicates."),(0,t.yg)("li",{parentName:"ul"},"When measured performance indicates, perform packed Boolean array\nshift operations by using slice assignments rather than repeated\nbit-wise assignment."),(0,t.yg)("li",{parentName:"ul"},"Use static subprogram dispatching when measured performance\nindicates.\\<")),(0,t.yg)("h3",{id:"types"},"types"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Use only simple aggregates when measured performance indicates."),(0,t.yg)("li",{parentName:"ul"},"For mutual exclusion, when measured performance indicates, use\nprotected types as an alternative to tasking rendezvous."),(0,t.yg)("li",{parentName:"ul"},"To implement an interrupt handler, when measured performance\nindicates, use a protected procedure."),(0,t.yg)("li",{parentName:"ul"},"Use modular types rather than packed Boolean arrays when measured\nperformance indicates."),(0,t.yg)("li",{parentName:"ul"},"Use the predefined bounded strings when predictable performance is\nan issue and measured performance indicates."),(0,t.yg)("li",{parentName:"ul"},"Use the procedural form of the string handling subprograms when\nmeasured performance indicates."),(0,t.yg)("li",{parentName:"ul"},"Use strong typing with carefully selected constraints to reduce\nrun-time constraint checking when measured performance indicates."),(0,t.yg)("li",{parentName:"ul"},"For cases where both rendezvous and protected types are inefficient,\nconsider the use of the Real-Time Systems Annex (Ada Reference\nManual 1995, Annex D).")),(0,t.yg)("h3",{id:"pragmas"},"pragmas"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"When measured performance indicates, use pragma Inline when calling\noverhead is a significant portion of the routine's execution time."),(0,t.yg)("li",{parentName:"ul"},"Use pragma Restrictions to express the user's intent to abide by\ncertain restrictions."),(0,t.yg)("li",{parentName:"ul"},"Use pragma Preelaborate where allowed."),(0,t.yg)("li",{parentName:"ul"},"Use pragma Pure where allowed."),(0,t.yg)("li",{parentName:"ul"},"Use pragma Discard_Names when the names are not needed by the\napplication and data space is at a premium."),(0,t.yg)("li",{parentName:"ul"},"Use pragma Suppress where necessary to achieve performance\nrequirements."),(0,t.yg)("li",{parentName:"ul"},"Use pragma Reviewable to aid in the analysis of the generated code.")),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},'This page of the "Ada Quality and Style Guide" has been adapted from the\noriginal work at ',(0,t.yg)("a",{parentName:"p",href:"https://en.wikibooks.org/wiki/Ada_Style_Guide"},"https://en.wikibooks.org/wiki/Ada_Style_Guide"),", which is\nlicensed under the\n",(0,t.yg)("a",{parentName:"p",href:"https://creativecommons.org/licenses/by-sa/3.0/"},"Creative Commons Attribution-ShareAlike License"),";\nadditional terms may apply. Page not endorsed by Wikibooks or the Ada\nStyle Guide Wikibook authors. This page is licensed under the same license\nas the original work.")))}p.isMDXComponent=!0}}]);