"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[9505],{43071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>x,contentTitle:()=>f,default:()=>Z,frontMatter:()=>y,metadata:()=>g,toc:()=>T});var a=n(91716),i=n(21256),r=n(24895),o=n(28090),l=n(48424),d=n(82262),s=Object.defineProperty,c=Object.defineProperties,m=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,h=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,k=(e,t,n)=>t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,A=(e,t)=>{for(var n in t||(t={}))h.call(t,n)&&k(e,n,t[n]);if(p)for(var n of p(t))u.call(t,n)&&k(e,n,t[n]);return e};const y={sidebar_position:98},f="12.3 Generic Instantiation",g={unversionedId:"arm/AA-12/AA-12.3",id:"arm/AA-12/AA-12.3",title:"12.3 Generic Instantiation",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-12/AA-12.3.mdx",sourceDirName:"arm/AA-12",slug:"/arm/AA-12/AA-12.3",permalink:"/docs/arm/AA-12/AA-12.3",draft:!1,tags:[],version:"current",sidebarPosition:98,frontMatter:{sidebar_position:98},sidebar:"referenceManualSidebar",previous:{title:"12.2 Generic Bodies",permalink:"/docs/arm/AA-12/AA-12.2"},next:{title:"12.4 Formal Objects",permalink:"/docs/arm/AA-12/AA-12.4"}},x={},T=[{value:"Language Design Principles",id:"language-design-principles",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Legality Rules",id:"legality-rules",level:4},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Post-Compilation Rules",id:"post-compilation-rules",level:4},{value:"Dynamic Semantics",id:"dynamic-semantics",level:4},{value:"Examples",id:"examples",level:4},{value:"Inconsistencies With Ada 83",id:"inconsistencies-with-ada-83",level:4},{value:"Incompatibilities With Ada 83",id:"incompatibilities-with-ada-83",level:4},{value:"Extensions to Ada 83",id:"extensions-to-ada-83",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005",level:4},{value:"Wording Changes from Ada 2005",id:"wording-changes-from-ada-2005",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012",level:4}],b={toc:T};function Z(e){var t,n=e,{components:s}=n,k=((e,t)=>{var n={};for(var a in e)h.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&u.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=A(A({},b),k),c(t,m({components:s,mdxType:"MDXLayout"}))),(0,a.kt)("h1",A({},{id:"123-generic-instantiation"}),"12.3 Generic Instantiation"),(0,a.kt)("admonition",A({},{type:"warning"}),(0,a.kt)("p",{parentName:"admonition"},"This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,a.kt)("a",A({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,a.kt)(l.Z,{mdxType:"MarginText"},"1"),(0,a.kt)("p",null,"[ An instance of a generic unit is declared by a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation")),".] ",(0,a.kt)("br",null)),(0,a.kt)("h4",A({},{id:"language-design-principles"}),"Language Design Principles"),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"1.a/5"),(0,a.kt)(d.Z,{items:["AI12-0300-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The legality of an instance should be determinable without looking at the generic body. Likewise, the legality of a generic body should be determinable without looking at any instances. Thus, the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0310"},"generic_declaration"))," forms a contract between the body and the instances; if each obeys the rules with respect to the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0310"},"generic_declaration")),", then no legality problems will arise. This is really a special case of the \u201clegality determinable via semantic dependences\u201d Language Design Principle (see Clause ",(0,a.kt)("a",{href:"../AA-10/"},"10"),"), given that a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation"))," does not depend semantically upon the generic body, nor vice versa.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"1.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Run-time issues are another story. For example, whether parameter passing is by copy or by reference is determined in part by the properties of the generic actuals, and thus cannot be determined at compile time of the generic body. Similarly, the contract model does not apply to Post-Compilation Rules. ",(0,a.kt)("br",null))),(0,a.kt)("h4",A({},{id:"syntax"}),"Syntax"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"2/3"),(0,a.kt)(d.Z,{items:["AI95-00218-03","AI05-0183-1"],mdxType:"MarginInfo"}),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},(0,a.kt)("code",null,"generic_instantiation"),(0,a.kt)("a",{id:"S0315"}),(0,a.kt)("code",null," ::= "),(0,a.kt)("br",null),"     ",(0,a.kt)("strong",null,"package")," ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.1#S0201"},"defining_program_unit_name"))," ",(0,a.kt)("strong",null,"is"),(0,a.kt)("br",null),"         ",(0,a.kt)("strong",null,"new")," ",(0,a.kt)("em",null,"generic_package_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," [",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0316"},"generic_actual_part")),"]",(0,a.kt)("br",null),"            [",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0346"},"aspect_specification")),"];",(0,a.kt)("br",null),"   | [",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-8/AA-8.3#S0234"},"overriding_indicator")),"]",(0,a.kt)("br",null),"     ",(0,a.kt)("strong",null,"procedure")," ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.1#S0201"},"defining_program_unit_name"))," ",(0,a.kt)("strong",null,"is"),(0,a.kt)("br",null),"         ",(0,a.kt)("strong",null,"new")," ",(0,a.kt)("em",null,"generic_procedure_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," [",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0316"},"generic_actual_part")),"]",(0,a.kt)("br",null),"            [",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0346"},"aspect_specification")),"];",(0,a.kt)("br",null),"   | [",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-8/AA-8.3#S0234"},"overriding_indicator")),"]",(0,a.kt)("br",null),"     ",(0,a.kt)("strong",null,"function")," ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.1#S0200"},"defining_designator"))," ",(0,a.kt)("strong",null,"is"),(0,a.kt)("br",null),"         ",(0,a.kt)("strong",null,"new")," ",(0,a.kt)("em",null,"generic_function_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," [",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0316"},"generic_actual_part")),"]",(0,a.kt)("br",null),"            [",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0346"},"aspect_specification")),"];",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"3"),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},(0,a.kt)("code",null,"generic_actual_part"),(0,a.kt)("a",{id:"S0316"}),(0,a.kt)("code",null," ::= "),(0,a.kt)("br",null),"   (",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," ","{",", ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association")),"}",")",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"4"),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},(0,a.kt)("code",null,"generic_association"),(0,a.kt)("a",{id:"S0317"}),(0,a.kt)("code",null," ::= "),(0,a.kt)("br",null),"   [",(0,a.kt)("em",null,"generic_formal_parameter_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0099"},"selector_name"))," =",">","] ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0318"},"explicit_generic_actual_parameter")),(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"5"),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},(0,a.kt)("code",null,"explicit_generic_actual_parameter"),(0,a.kt)("a",{id:"S0318"}),(0,a.kt)("code",null," ::= "),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0132"},"expression"))," | ",(0,a.kt)("em",null,"variable_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name")),(0,a.kt)("br",null),"   | ",(0,a.kt)("em",null,"subprogram_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," | ",(0,a.kt)("em",null,"entry_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," | ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.2#S0028"},"subtype_mark")),(0,a.kt)("br",null),"   | ",(0,a.kt)("em",null,"package_instance_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name")),(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"6"),(0,a.kt)("p",{class:"Indented2"},"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," is ",(0,a.kt)("em",null,"named")," or ",(0,a.kt)("em",null,"positional")," according to whether or not the ",(0,a.kt)("em",null,"generic_formal_parameter_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0099"},"selector_name"))," is specified. Any positional associations shall precede any named associations. ",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"7/5"),(0,a.kt)(d.Z,{items:["AI05-0004-1","AI12-0205-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The ",(0,a.kt)("em",null,"generic actual parameter")," is either the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0318"},"explicit_generic_actual_parameter"))," given in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," for each formal, or the corresponding ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.7#S0063"},"default_expression")),", ",(0,a.kt)("em",null,"default_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.2#S0028"},"subtype_mark")),", or ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.6#S0339"},"default_name"))," if no ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," is given for the formal. When the meaning is clear from context, the term \u201cgeneric actual\u201d, or simply \u201cactual\u201d, is used as a synonym for \u201cgeneric actual parameter\u201d and also for the view denoted by one, or the value of one.",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"7.a/5"),(0,a.kt)(d.Z,{items:["AI12-0205-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"Any matching or other Legality Rules that apply to a generic actual are applied to any ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.7#S0063"},"default_expression")),", ",(0,a.kt)("em",null,"default_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.2#S0028"},"subtype_mark")),", or ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.6#S0339"},"default_name"))," that are used as an actual. ",(0,a.kt)("br",null))),(0,a.kt)("h4",A({},{id:"legality-rules"}),"Legality Rules"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"8"),(0,a.kt)("p",null,"In a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation"))," for a particular kind of program unit [(package, procedure, or function)], the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," shall denote a generic unit of the corresponding kind [(generic package, generic procedure, or generic function, respectively)].",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"9/3"),(0,a.kt)(d.Z,{items:["AI05-0118-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The ",(0,a.kt)("em",null,"generic_formal_parameter_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0099"},"selector_name"))," of a named ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," shall denote a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0314"},"generic_formal_parameter_declaration"))," of the generic unit being instantiated. If two or more formal subprograms have the same defining name, then named associations are not allowed for the corresponding actuals.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"9.1/3"),(0,a.kt)(d.Z,{items:["AI05-0118-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0314"},"generic_formal_parameter_declaration"))," for a positional ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," is the parameter with the corresponding position in the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0313"},"generic_formal_part"))," of the generic unit being instantiated.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"10/5"),(0,a.kt)(d.Z,{items:["AI12-0205-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation"))," shall contain at most one ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," for each formal. Each formal without an association shall have a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.7#S0063"},"default_expression")),", ",(0,a.kt)("em",null,"default_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.2#S0028"},"subtype_mark")),", or ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.6#S0338"},"subprogram_default")),".",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11/5"),(0,a.kt)(d.Z,{items:["AI12-0418-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"In a generic unit, Legality Rules are enforced at compile time of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0310"},"generic_declaration"))," and generic body, given the properties of the formals. In the visible part and formal part of an instance, Legality Rules are enforced at compile time of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation")),", given the properties of the actuals. In other parts of an instance, Legality Rules are not enforced; this rule does not apply when a given rule explicitly specifies otherwise. ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.a/2"),(0,a.kt)(d.Z,{items:["AI95-00114-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"Since rules are checked using the properties of the formals, and since these properties do not always carry over to the actuals, we need to check the rules again in the visible part of the instance. For example, only if a tagged type is limited may an extension of it have limited components in the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.9#S0075"},"record_extension_part")),". A formal tagged limited type is limited, but the actual might be nonlimited. Hence any rule that requires a tagged type to be limited runs into this problem. Such rules are rare; in most cases, the rules for matching of formals and actuals guarantee that if the rule is obeyed in the generic unit, then it has to be obeyed in the instance.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.a.1/3"),(0,a.kt)(d.Z,{items:["AI05-0005-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Ada 2012 addendum: Such Legality Rules are not as rare as the authors of Ada 95 hoped; there are more than 30 of them known at this point. They are indexed under \u201cgeneric contract issue\u201d and are associated with the boilerplate \u201cIn addition to the places where Legality Rules normally apply...\u201d. Indeed, there is only one known rule where rechecking in the specification is needed and where rechecking in the private part is ",(0,a.kt)("em",null,"not")," wanted (it is in ",(0,a.kt)("a",{href:"../AA-3/AA-3.4"},"3.4"),", but even it needs rechecking when tagged types are involved). ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The \u201cproperties\u201d of the formals are determined without knowing anything about the actuals: ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.c/1"),(0,a.kt)(d.Z,{items:["AI95-00034-01"],mdxType:"MarginInfo"}),(0,a.kt)("ul",null,(0,a.kt)("li",null,"{",(0,a.kt)("em",null,"8652/0095"),"}"," A formal derived subtype is constrained if and only if the ancestor subtype is constrained. A formal array type is constrained if and only if the declarations say so. A formal private type is constrained if it does not have a discriminant part. Other formal subtypes are unconstrained, even though they might be constrained in an instance.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.d"),(0,a.kt)("li",null,"A formal subtype can be indefinite, even though the copy might be definite in an instance.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.e"),(0,a.kt)("li",null,"A formal object of mode ",(0,a.kt)("strong",null,"in")," is not a static constant; in an instance, the copy is static if the actual is.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.f"),(0,a.kt)("li",null,"A formal subtype is not static, even though the actual might be.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.g"),(0,a.kt)("li",null,"Formal types are specific, even though the actual can be class-wide.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.h"),(0,a.kt)("li",null,"The subtype of a formal object of mode ",(0,a.kt)("strong",null,"in out")," is not static. (This covers the case of AI83-00878.)",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.i"),(0,a.kt)("li",null,"The subtype of a formal parameter of a formal subprogram does not provide an applicable index constraint.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.j/3"),(0,a.kt)(d.Z,{items:["AI05-0239-1"],mdxType:"MarginInfo"}),(0,a.kt)("li",null,"The profile of a formal subprogram is not subtype conformant with any other profile. ",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.k"),(0,a.kt)("li",null,"A generic formal function is not static. ",(0,a.kt)("br",null)))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.l"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The exceptions to the above rule about when legality rules are enforced fall into these categories: ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.m"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Some rules are checked in the generic declaration, and then again in both the visible and private parts of the instance: ",(0,a.kt)("br",null)))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.n"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"The parent type of a record extension has to be specific (see ",(0,a.kt)("a",{href:"../AA-3/AA-3.9#Subclause_3.9.1"},"3.9.1"),"). This rule is not checked in the instance body.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.o"),(0,a.kt)("li",null,"The parent type of a private extension has to be specific (see ",(0,a.kt)("a",{href:"../AA-7/AA-7.3"},"7.3"),"). This rule is not checked in the instance body.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.p/3"),(0,a.kt)(d.Z,{items:["AI95-00402-01","AI05-0093-1"],mdxType:"MarginInfo"}),(0,a.kt)("li",null,"A type with an access discriminant with a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.7#S0063"},"default_expression"))," has to be immutably limited. In the generic body, the definition of immutably limited is adjusted in an assume-the-worst manner (thus the rule is checked that way).",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.q"),(0,a.kt)("li",null,"In the declaration of a record extension, if the parent type is nonlimited, then each of the components of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.9#S0075"},"record_extension_part"))," have to be nonlimited (see ",(0,a.kt)("a",{href:"../AA-3/AA-3.9#Subclause_3.9.1"},"3.9.1"),"). In the generic body, this rule is checked in an assume-the-worst manner.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.r"),(0,a.kt)("li",null,"A preelaborated library unit has to be preelaborable (see ",(0,a.kt)("a",{href:"../AA-10/AA-10.2#Subclause_10.2.1"},"10.2.1"),"). In the generic body, this rule is checked in an assume-the-worst manner. ",(0,a.kt)("br",null)))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.r.1/2"),(0,a.kt)(d.Z,{items:["AI95-00402-01"],mdxType:"MarginInfo"}),(0,a.kt)("ul",null,(0,a.kt)("li",null,"The corrections made by the Corrigendum added a number of such rules, and the Amendment added many more. There doesn't seem to be much value in repeating all of these rules here (as of this writing, there are roughly 33 such rules). As noted below, all such rules are indexed in the AARM.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.s"),(0,a.kt)("li",null,"For the accessibility rules, the formals have nothing to say about the property in question. Like the above rules, these rules are checked in the generic declaration, and then again in both the visible and private parts of the instance. In the generic body, we have explicit rules that essentially assume the worst (in the cases of type extensions and access-to-subprogram types), and we have runtime checks (in the case of access-to-object types). See ",(0,a.kt)("a",{href:"../AA-3/AA-3.9#Subclause_3.9.1"},"3.9.1"),", ",(0,a.kt)("a",{href:"../AA-3/AA-3.10#Subclause_3.10.2"},"3.10.2"),", and ",(0,a.kt)("a",{href:"../AA-4/AA-4.6"},"4.6"),".",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.t"),(0,a.kt)("li",null,"We considered runtime checks for access-to-subprogram types as well. However, this would present difficulties for implementations that share generic bodies.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.u"),(0,a.kt)("li",null,"The rules requiring \u201creasonable\u201d values for static expressions are ignored when the expected type for the expression is a descendant of a generic formal type other than a generic formal derived type, and do not apply in an instance.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.v"),(0,a.kt)("li",null,"The rule forbidding two explicit homographs in the same declarative region does not apply in an instance of a generic unit, except that it ",(0,a.kt)("em",null,"does")," apply in the declaration of a record extension that appears in the visible part of an instance.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.w"),(0,a.kt)("li",null,"Some rules do not apply at all in an instance, not even in the visible part: ",(0,a.kt)("br",null)))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.x"),(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-10/AA-10.1#S0297"},"Body_stub")),"s are not normally allowed to be multiply nested, but they can be in instances. ",(0,a.kt)("br",null)))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.y"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Each rule that is an exception is marked with \u201cgeneric contract issue;\u201d look that up in the index to find them all. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.z"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The Legality Rules are the ones labeled Legality Rules. We are talking about all Legality Rules in the entire language here. Note that, with some exceptions, the legality of a generic unit is checked even if there are no instantiations of the generic unit. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.aa/5"),(0,a.kt)(d.Z,{items:["AI05-0299-1","AI12-0005-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The Legality Rules are described here, and the overloading rules were described earlier in this subclause. Presumably, every Static Semantic Item is included indirectly by one of those. Thus, we have covered all the compile-time rules of the language. There is no need to say anything special about the Post-Compilation Rules or the Dynamic Semantic Items. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.bb"),(0,a.kt)(i.Z,{type:"aarm",aarm:"discussion",mdxType:"Admonition"},(0,a.kt)("strong",null),"Here is an example illustrating how this rule is checked: \u201cIn the declaration of a record extension, if the parent type is nonlimited, then each of the components of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.9#S0075"},"record_extension_part"))," shall be nonlimited.\u201d ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.cc"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"generic","\n","    type Parent is tagged private;","\n","    type Comp is limited private;","\n","package G1 is","\n","    type Extension is new Parent with","\n","        record","\n","            C : Comp; -- Illegal!","\n","        end record;","\n","end G1;","\n")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.dd/1"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The parent type is nonlimited, and the component type is limited, which is illegal. It doesn't matter that one could imagine writing an instantiation with the actual for Comp being nonlimited \u2014 we never get to the instance, because the generic itself is illegal.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.ee"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"On the other hand: ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.ff"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"generic","\n","    type Parent is tagged limited private; -- Parent is limited.","\n","    type Comp is limited private;","\n","package G2 is","\n","    type Extension is new Parent with","\n","        record","\n","            C : Comp; -- OK.","\n","        end record;","\n","end G2;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.gg"),"type Limited_Tagged is tagged limited null record;","\n","type Non_Limited_Tagged is tagged null record;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.hh"),"type Limited_Untagged is limited null record;","\n","type Non_Limited_Untagged is null record;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.ii"),"package Good_1 is new G2(Parent =",">"," Limited_Tagged,","\n","                         Comp =",">"," Limited_Untagged);","\n","package Good_2 is new G2(Parent =",">"," Non_Limited_Tagged,","\n","                         Comp =",">"," Non_Limited_Untagged);","\n","package Bad  is new G2(Parent =",">"," Non_Limited_Tagged,","\n","                         Comp =",">"," Limited_Untagged); -- Illegal!","\n")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"11.jj"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The first instantiation is legal, because in the instance the parent is limited, so the rule is not violated. Likewise, in the second instantiation, the rule is not violated in the instance. However, in the Bad instance, the parent type is nonlimited, and the component type is limited, so this instantiation is illegal. ",(0,a.kt)("br",null))),(0,a.kt)("h4",A({},{id:"static-semantics"}),"Static Semantics"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"12"),(0,a.kt)("p",null,"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation"))," declares an instance; it is equivalent to the instance declaration (a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-7/AA-7.1#S0229"},"package_declaration"))," or ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.1#S0195"},"subprogram_declaration")),") immediately followed by the instance body, both at the place of the instantiation. ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"12.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The declaration and the body of the instance are not \u201cimplicit\u201d in the technical sense, even though you can't see them in the program text. Nor are declarations within an instance \u201cimplicit\u201d (unless they are implicit by other rules). This is necessary because implicit declarations have special semantics that should not be attached to instances. For a generic subprogram, the profile of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation"))," is that of the instance declaration, by the stated equivalence. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"12.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The visible and private parts of a package instance are defined in ",(0,a.kt)("a",{href:"../AA-7/AA-7.1"},"7.1"),", \u201c",(0,a.kt)("a",{href:"../AA-7/AA-7.1"},"Package Specifications and Declarations"),"\u201d and ",(0,a.kt)("a",{href:"../AA-12/AA-12.7"},"12.7"),", \u201c",(0,a.kt)("a",{href:"../AA-12/AA-12.7"},"Formal Packages"),"\u201d. The visible and private parts of a subprogram instance are defined in ",(0,a.kt)("a",{href:"../AA-8/AA-8.2"},"8.2"),", \u201c",(0,a.kt)("a",{href:"../AA-8/AA-8.2"},"Scope of Declarations"),"\u201d. ",(0,a.kt)("br",null))),(0,a.kt)(l.Z,{mdxType:"MarginText"},"13"),(0,a.kt)("p",null,"The instance is a copy of the text of the template. [Each use of a formal parameter becomes (in the copy) a use of the actual, as explained below.] An instance of a generic package is a package, that of a generic procedure is a procedure, and that of a generic function is a function. ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"13.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"An instance is a package or subprogram (because we say so), even though it contains a copy of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0313"},"generic_formal_part")),", and therefore doesn't look like one. This is strange, but it's OK, since the syntax rules are overloading rules, and therefore do not apply in an instance. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"13.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"discussion",mdxType:"Admonition"},(0,a.kt)("strong",null),"We use a macro-expansion model, with some explicitly-stated exceptions (see below). The main exception is that the interpretation of each construct in a generic unit (especially including the denotation of each name) is determined when the declaration and body of the generic unit (as opposed to the instance) are compiled, and in each instance this interpretation is (a copy of) the template interpretation. In other words, if a construct is interpreted as a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," denoting a declaration D, then in an instance, the copy of the construct will still be a name, and will still denote D (or a copy of D). From an implementation point of view, overload resolution is performed on the template, and not on each copy.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"13.c"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"We describe the substitution of generic actual parameters by saying (in most cases) that the copy of each generic formal parameter declares a view of the actual. Suppose a name in a generic unit denotes a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0314"},"generic_formal_parameter_declaration")),". The copy of that name in an instance will denote the copy of that ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0314"},"generic_formal_parameter_declaration"))," in the instance. Since the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0314"},"generic_formal_parameter_declaration"))," in the instance declares a view of the actual, the name will denote a view of the actual.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"13.d/2"),(0,a.kt)(d.Z,{items:["AI95-00442-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Other properties of the copy (for example, staticness, categories to which types belong) are recalculated for each instance; this is implied by the fact that it's a copy.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"13.e/2"),(0,a.kt)(d.Z,{items:["AI95-00317-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Although the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0313"},"generic_formal_part"))," is included in an instance, the declarations in the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0313"},"generic_formal_part"))," are only visible outside the instance in the case of a generic formal package whose ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.7#S0341"},"formal_package_actual_part"))," includes one or more ","<",">"," indicators \u2014 see ",(0,a.kt)("a",{href:"../AA-12/AA-12.7"},"12.7"),". ",(0,a.kt)("br",null))),(0,a.kt)(l.Z,{mdxType:"MarginText"},"14"),(0,a.kt)("p",null,"The interpretation of each construct within a generic declaration or body is determined using the overloading rules when that generic declaration or body is compiled. In an instance, the interpretation of each (copied) construct is the same, except in the case of a name that denotes the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0310"},"generic_declaration"))," or some declaration within the generic unit; the corresponding name in the instance then denotes the corresponding copy of the denoted declaration. The overloading rules do not apply in the instance. ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"14.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"See ",(0,a.kt)("a",{href:"../AA-8/AA-8.6"},"8.6"),", \u201c",(0,a.kt)("a",{href:"../AA-8/AA-8.6"},"The Context of Overload Resolution"),"\u201d for definitions of \u201cinterpretation\u201d and \u201coverloading rule\u201d.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"14.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Even the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0314"},"generic_formal_parameter_declaration")),"s have corresponding declarations in the instance, which declare views of the actuals.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"14.c"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Although the declarations in the instance are copies of those in the generic unit, they often have quite different properties, as explained below. For example a constant declaration in the generic unit might declare a nonstatic constant, whereas the copy of that declaration might declare a static constant. This can happen when the staticness depends on some generic formal.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"14.d"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"This rule is partly a ramification of the \u201ccurrent instance\u201d rule in ",(0,a.kt)("a",{href:"../AA-8/AA-8.6"},"8.6"),", \u201c",(0,a.kt)("a",{href:"../AA-8/AA-8.6"},"The Context of Overload Resolution"),"\u201d. Note that that rule doesn't cover the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0313"},"generic_formal_part")),".",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"14.e/5"),(0,a.kt)(d.Z,{items:["AI12-0347-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Although the overloading rules are not observed in the instance, they are, of course, observed in the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation"))," in order to determine the interpretation of the constituents of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation")),".",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"14.f"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Since children are considered to occur within their parent's declarative region, the above rule applies to a name that denotes a child of a generic unit, or a declaration inside such a child.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"14.g"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Since the Syntax Rules are overloading rules, it is possible (legal) to violate them in an instance. For example, it is possible for an instance body to occur in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-7/AA-7.1#S0230"},"package_specification")),", even though the Syntax Rules forbid bodies in ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-7/AA-7.1#S0230"},"package_specification")),"s. ",(0,a.kt)("br",null))),(0,a.kt)(l.Z,{mdxType:"MarginText"},"15/5"),(0,a.kt)(d.Z,{items:["AI12-0407-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"In an instance, a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0314"},"generic_formal_parameter_declaration"))," declares a view whose properties are identical to those of the actual, except when specified otherwise (in particular, see ",(0,a.kt)("a",{href:"../AA-6/AA-6.1#Subclause_6.1.1"},"6.1.1"),", \u201c",(0,a.kt)("a",{href:"../AA-6/AA-6.1#Subclause_6.1.1"},"Preconditions and Postconditions"),"\u201d, ",(0,a.kt)("a",{href:"../AA-12/AA-12.4"},"12.4"),", \u201c",(0,a.kt)("a",{href:"../AA-12/AA-12.4"},"Formal Objects"),"\u201d, and ",(0,a.kt)("a",{href:"../AA-12/AA-12.6"},"12.6"),", \u201c",(0,a.kt)("a",{href:"../AA-12/AA-12.6"},"Formal Subprograms"),"\u201d). Similarly, for a declaration within a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.1#S0314"},"generic_formal_parameter_declaration")),", the corresponding declaration in an instance declares a view whose properties are identical to the corresponding declaration within the declaration of the actual. ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"In an instance, there are no \u201cproperties\u201d of types and subtypes that come from the formal. The primitive operations of the type come from the formal, but these are declarations in their own right, and are therefore handled separately.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Note that certain properties that come from the actuals are irrelevant in the instance. For example, if an actual type is of a class deeper in the derived-type hierarchy than the formal, it is impossible to call the additional operations of the deeper class in the instance, because any such call would have to be a copy of some corresponding call in the generic unit, which would have been illegal. However, it is sometimes possible to reach into the specification of the instance from outside, and notice such properties. For example, one could pass an object declared in the instance specification to one of the additional operations of the deeper type.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.c/2"),(0,a.kt)(d.Z,{items:["AI95-00114-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.5#S0320"},"formal_type_declaration"))," can contain ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.7#S0062"},"discriminant_specification")),"s, a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.6#S0335"},"formal_subprogram_declaration"))," can contain ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.1#S0207"},"parameter_specification")),"s, and a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.7#S0340"},"formal_package_declaration"))," can contain many kinds of declarations. These are all inside the generic unit, and have corresponding declarations in the instance.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.d"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"This rule implies, for example, that if a subtype in a generic unit is a subtype of a generic formal subtype, then the corresponding subtype in the instance is a subtype of the corresponding actual subtype.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.e"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"For a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation")),", if a generic actual is a static [(scalar or string)] subtype, then each use of the corresponding formal parameter within the specification of the instance is considered to be static. (See AI83-00409.)",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.f"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Similarly, if a generic actual is a static expression and the corresponding formal parameter has a static [(scalar or string)] subtype, then each use of the formal parameter in the specification of the instance is considered to be static. (See AI83-00505.)",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.g"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"If a primitive subprogram of a type derived from a generic formal derived tagged type is not overriding (that is, it is a new subprogram), it is possible for the copy of that subprogram in an instance to override a subprogram inherited from the actual. For example: ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.h"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"type T1 is tagged record ... end record;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.i/5"),(0,a.kt)(d.Z,{items:["AI12-0005-1"],mdxType:"MarginInfo"}),"generic","\n","    type Formal is new T1 with private;","\n","package G is","\n","    type Derived_From_Formal is new Formal with record ... end record;","\n","    procedure Foo(X : in Derived_From_Formal); -- Does not override anything.","\n","end G;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.j"),"type T2 is new T1 with record ... end record;","\n","procedure Foo(X : in T2);","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.k"),"package Inst is new G(Formal =",">"," T2);","\n")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.l"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"In the instance Inst, the declaration of Foo for Derived_From_Formal overrides the Foo inherited from T2. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.m/1"),(0,a.kt)(d.Z,{items:["AI95-00137-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-note",mdxType:"Admonition"},(0,a.kt)("strong",null),"{",(0,a.kt)("em",null,"8652/0009"),"}"," For formal types, an implementation that shares the code among multiple instances of the same generic unit needs to beware that things like parameter passing mechanisms (by-copy vs. by-reference) and ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0343"},"aspect_clause")),"s are determined by the actual. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"15.n/5"),(0,a.kt)(d.Z,{items:["AI12-0407-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"In particular, we allow differences for aspects that can be specified on generic formal parameters. For instance, Pre (see ",(0,a.kt)("a",{href:"../AA-6/AA-6.1#Subclause_6.1.1"},"6.1.1"),") can be specified on generic formal subprograms to be added to the Pre of the actual. ",(0,a.kt)("br",null))),(0,a.kt)(l.Z,{mdxType:"MarginText"},"16"),(0,a.kt)("p",null,"[Implicit declarations are also copied, and a name that denotes an implicit declaration in the generic denotes the corresponding copy in the instance. However, for a type declared within the visible part of the generic, a whole new set of primitive subprograms is implicitly declared for use outside the instance, and may differ from the copied set if the properties of the type in some way depend on the properties of some actual type specified in the instantiation. For example, if the type in the generic is derived from a formal private type, then in the instance the type will inherit subprograms from the corresponding actual type.",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"17"),(0,a.kt)("p",null,"These new implicit declarations occur immediately after the type declaration in the instance, and override the copied ones. The copied ones can be called only from within the instance; the new ones can be called only from outside the instance, although for tagged types, the body of a new one can be executed by a call to an old one.] ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"17.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"proof",mdxType:"Admonition"},(0,a.kt)("strong",null),"This rule is stated officially in ",(0,a.kt)("a",{href:"../AA-8/AA-8.3"},"8.3"),", \u201c",(0,a.kt)("a",{href:"../AA-8/AA-8.3"},"Visibility"),"\u201d. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"17.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),'The new ones follow from the class(es) of the formal types. For example, for a type T derived from a generic formal private type, if the actual is Integer, then the copy of T in the instance has a "+" primitive operator, which can be called from outside the instance (assuming T is declared in the visible part of the instance).',(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"17.c"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"AI83-00398.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"17.d/2"),(0,a.kt)(d.Z,{items:["AI95-00442-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},'Since an actual type is always in the category determined for the formal, the new subprograms hide all of the copied ones, except for a declaration of "/=" that corresponds to an explicit declaration of "=". Such "/=" operators are special, because unlike other implicit declarations of primitive subprograms, they do not appear by virtue of the class, but because of an explicit declaration of "=". If the declaration of "=" is implicit (and therefore overridden in the instance), then a corresponding implicitly declared "/=" is also overridden. But if the declaration of "=" is explicit (and therefore not overridden in the instance), then a corresponding implicitly declared "/=" is not overridden either, even though it\'s implicit.',(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"17.e"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Note that the copied ones can be called from inside the instance, even though they are hidden from all visibility, because the names are resolved in the generic unit \u2014 visibility is irrelevant for calls in the instance. ",(0,a.kt)("br",null))),(0,a.kt)(l.Z,{mdxType:"MarginText"},"18"),(0,a.kt)("p",null,"[In the visible part of an instance, an explicit declaration overrides an implicit declaration if they are homographs, as described in ",(0,a.kt)("a",{href:"../AA-8/AA-8.3"},"8.3"),".] On the other hand, an explicit declaration in the private part of an instance overrides an implicit declaration in the instance, only if the corresponding explicit declaration in the generic overrides a corresponding implicit declaration in the generic. Corresponding rules apply to the other kinds of overriding described in ",(0,a.kt)("a",{href:"../AA-8/AA-8.3"},"8.3"),". ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"18.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"For example: ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"18.b"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"type Ancestor is tagged null record;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"18.c"),"generic","\n","    type Formal is new Ancestor with private;","\n","package G is","\n","    type T is new Formal with null record;","\n","    procedure P(X : in T); -- (1)","\n","private","\n","    procedure Q(X : in T); -- (2)","\n","end G;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"18.d"),"type Actual is new Ancestor with null record;","\n","procedure P(X : in Actual);","\n","procedure Q(X : in Actual);","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"18.e"),"package Instance is new G(Formal =",">"," Actual);","\n")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"18.f"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"In the instance, the copy of P at (1) overrides Actual's P, whereas the copy of Q at (2) does not override anything; in implementation terms, it occupies a separate slot in the type descriptor. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"18.g/5"),(0,a.kt)(d.Z,{items:["AI12-0347-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"The reason for this rule is so a programmer writing a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation"))," need not look at the private part of the generic in order to determine which subprograms will be overridden. ",(0,a.kt)("br",null))),(0,a.kt)("h4",A({},{id:"post-compilation-rules"}),"Post-Compilation Rules"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"19"),(0,a.kt)("p",null,"Recursive generic instantiation is not allowed in the following sense: if a given generic unit includes an instantiation of a second generic unit, then the instance generated by this instantiation shall not include an instance of the first generic unit [(whether this instance is generated directly, or indirectly by intermediate instantiations)]. ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"19.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"discussion",mdxType:"Admonition"},(0,a.kt)("strong",null),"Note that this rule is not a violation of the generic contract model, because it is not a Legality Rule. Some implementations may be able to check this rule at compile time, but that requires access to all the bodies, so we allow implementations to check the rule at link time. ",(0,a.kt)("br",null))),(0,a.kt)("h4",A({},{id:"dynamic-semantics"}),"Dynamic Semantics"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"20"),(0,a.kt)("p",null,"For the elaboration of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation")),", each ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," is first evaluated. If a default is used, an implicit ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," is assumed for this rule. These evaluations are done in an arbitrary order, except that the evaluation for a default actual takes place after the evaluation for another actual if the default includes a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," that denotes the other one. Finally, the instance declaration and body are elaborated. ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"20.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"Note that if the evaluation of a default depends on some side effect of some other evaluation, the order is still arbitrary. ",(0,a.kt)("br",null))),(0,a.kt)(l.Z,{mdxType:"MarginText"},"21"),(0,a.kt)("p",null,"For the evaluation of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0317"},"generic_association"))," the generic actual parameter is evaluated. Additional actions are performed in the case of a formal object of mode ",(0,a.kt)("strong",null,"in")," (see ",(0,a.kt)("a",{href:"../AA-12/AA-12.4"},"12.4"),"). ",(0,a.kt)("br",null)),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"21.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"To be honest: "),"Actually, the actual is evaluated only if evaluation is defined for that kind of construct \u2014 we don't actually \u201cevaluate\u201d ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.2#S0028"},"subtype_mark")),"s. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE   If a formal type is not tagged, then the type is treated as an untagged type within the generic body. Deriving from such a type in a generic body is permitted; the new type does not get a new tag value, even if the actual is tagged. Overriding operations for such a derived type cannot be dispatched to from outside the instance. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"If two overloaded subprograms declared in a generic package specification differ only by the (formal) type of their parameters and results, then there exist legal instantiations for which all calls of these subprograms from outside the instance are ambiguous. For example: ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.b"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"generic","\n","   type A is (","<",">",");","\n","   type B is private;","\n","package G is","\n","   function Next(X : A) return A;","\n","   function Next(X : B) return B;","\n","end G;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.c"),"package P is new G(A =",">"," Boolean, B =",">"," Boolean);","\n","-- All calls of P.Next are ambiguous.","\n")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.d"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The following example illustrates some of the subtleties of the substitution of formals and actuals: ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.e/5"),(0,a.kt)(d.Z,{items:["AI12-0005-1"],mdxType:"MarginInfo"}),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"generic","\n","    type T1 is private;","\n",'    -- A predefined "=" operator is implicitly declared here:',"\n",'    -- function "="(Left, Right : T1) return Boolean;',"\n",'    -- Call this "="1.',"\n","    ...","\n","package G is","\n","    subtype S1 is T1; -- So we can get our hands on the type from","\n","                      -- outside an instance.","\n","    type T2 is new T1;","\n",'    -- An inherited "=" operator is implicitly declared here:',"\n",'    -- function "="(Left, Right : T2) return Boolean;',"\n",'    -- Call this "="2.',"\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.f"),"T1_Obj : T1 := ...;","\n","    Bool_1 : Boolean := T1_Obj = T1_Obj;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.g"),"T2_Obj : T2 := ...;","\n","    Bool_2 : Boolean := T2_Obj = T2_Obj;","\n","end G;","\n","...","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.h/5"),(0,a.kt)(d.Z,{items:["AI12-0005-1"],mdxType:"MarginInfo"}),"package P is","\n","    type My_Int is new Integer;","\n",'    -- A predefined "=" operator is implicitly declared here:',"\n",'    -- function "="(Left, Right : My_Int) return Boolean;',"\n",'    -- Call this "="3.',"\n",'    function "="(X, Y : My_Int) return Boolean;',"\n",'    -- Call this "="4.',"\n",'    -- "="3 is hidden from all visibility by "="4.',"\n",'    -- Nonetheless, "="3 can \u201creemerge\u201d in certain circumstances.',"\n","end P;","\n","use P;","\n","...","\n","package I is new G(T1 =",">",' My_Int, ...); -- "="5 is declared in I (see below).',"\n","use I;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.i"),"Another_T1_Obj : S1 := 13; -- Can't denote T1, but S1 will do.","\n","Bool_3 : Boolean := Another_T1_Obj = Another_T1_Obj;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.j"),"Another_T2_Obj : T2 := 45;","\n","Bool_4 : Boolean := Another_T2_Obj = Another_T2_Obj;","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.k"),"Double : T2 := T2_Obj + Another_T2_Obj;","\n")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.l"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},'In the instance I, there is a copy of "="1 (call it "="1i) and "="2 (call it "="2i). The "="1i and "="2i declare views of the predefined "=" of My_Int (that is, "="3). In the initialization of Bool_1 and Bool_2 in the generic unit G, the names "=" denote "="1 and "="2, respectively. Therefore, the copies of these names in the instances denote "="1i and "="2i, respectively. Thus, the initialization of I.Bool_1 and I.Bool_2 call the predefined equality operator of My_Int; they will not call "="4.',(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.m"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},'The declarations "="1i and "="2i are hidden from all visibility. This prevents them from being called from outside the instance.',(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.n"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},'The declaration of Bool_3 calls "="4.',(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"22.o"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},'The instance I also contains implicit declarations of the primitive operators of T2, such as "=" (call it "="5) and "+". These operations cannot be called from within the instance, but the declaration of Bool_4 calls "="5. ',(0,a.kt)("br",null))),(0,a.kt)("h4",A({},{id:"examples"}),"Examples"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"23"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Examples of generic instantiations (see ",(0,a.kt)("a",{href:"../AA-12/AA-12.1"},"12.1"),"):")," ",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"24/5"),(0,a.kt)(d.Z,{items:["AI12-0178-1"],mdxType:"MarginInfo"}),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"procedure Swap is new Exchange(Elem =",">"," Integer);","\n","procedure Swap is new Exchange(Character);  \t--  Swap is overloaded ","\n",'function Square is new Squaring(Integer); \t--  "*" of Integer used by default',"\n","function Square1 is new Squaring(Item =",">",' Matrix, "*" =',">"," Matrix_Product);","\n","function Square2 is new Squaring(Matrix, Matrix_Product); -- same as previous","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"25"),'package Int_Vectors is new On_Vectors(Integer, Table, "+");',"\n"),(0,a.kt)(l.Z,{mdxType:"MarginText"},"26"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Examples of uses of instantiated units:")," ",(0,a.kt)("br",null)),(0,a.kt)(l.Z,{mdxType:"MarginText"},"27"),(0,a.kt)(o.Z,{language:"ada",mdxType:"CodeBlock"},"Swap(A, B);","\n","A := Square(A);","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"28"),"T : Table(1 .. 5) := (10, 20, 30, 40, 50);","\n","N : Integer := Int_Vectors.Sigma(T);  --  150","\n","                                      -- (see ",(0,a.kt)("a",{href:"../AA-12/AA-12.2"},"12.2")," for the body of Sigma)","\n",(0,a.kt)(l.Z,{mdxType:"MarginText"},"29"),"use Int_Vectors;","\n","M : Integer := Sigma(T);  --  150","\n"),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)("h4",A({},{id:"inconsistencies-with-ada-83"}),"Inconsistencies With Ada 83")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"In Ada 83, all explicit actuals are evaluated before all defaults, and the defaults are evaluated in the order of the formal declarations. This ordering requirement is relaxed in Ada 95. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)("h4",A({},{id:"incompatibilities-with-ada-83"}),"Incompatibilities With Ada 83")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"We have attempted to remove every violation of the contract model. Any remaining contract model violations should be considered bugs in the RM95. The unfortunate property of reverting to the predefined operators of the actual types is retained for upward compatibility. (Note that fixing this would require subtype conformance rules.) However, tagged types do not revert in this sense. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)("h4",A({},{id:"extensions-to-ada-83"}),"Extensions to Ada 83")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.c"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The syntax rule for ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0318"},"explicit_generic_actual_parameter"))," is modified to allow a ",(0,a.kt)("em",null,"package_instance_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name")),". ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)("h4",A({},{id:"wording-changes-from-ada-83"}),"Wording Changes from Ada 83")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.d"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The fact that named associations cannot be used for two formal subprograms with the same defining name is moved to AARM-only material, because it is a ramification of other rules, and because it is not of interest to the average user.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.e/2"),(0,a.kt)(d.Z,{items:["AI95-00114-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The rule that \u201cAn explicit ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0318"},"explicit_generic_actual_parameter"))," shall not be supplied more than once for a given generic formal parameter\u201d seems to be missing from RM83, although it was clearly the intent.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.f"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"In the explanation that the instance is a copy of the template, we have left out RM83-12.3(5)'s \u201capart from the generic formal part\u201d, because it seems that things in the formal part still need to exist in instances. This is particularly true for generic formal packages, where you're sometimes allowed to reach in and denote the formals of the formal package from outside it. This simplifies the explanation of what each name in an instance denotes: there are just two cases: the declaration can be inside or outside (where inside needs to include the generic unit itself). Note that the RM83 approach of listing many cases (see RM83-12.5(5-14)) would have become even more unwieldy with the addition of generic formal packages, and the declarations that occur therein.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.g"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"We have corrected the definition of the elaboration of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation"))," (RM83-12.3(17)); we don't elaborate entities, and the instance is not \u201cimplicit\u201d.",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.h"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"In RM83, there is a rule saying the formal and actual shall match, and then there is much text defining what it means to match. Here, we simply state all the latter text as rules. For example, \u201cA formal foo is matched by an actual greenish bar\u201d becomes \u201cFor a formal foo, the actual shall be a greenish bar\u201d. This is necessary to split the Name Resolution Rules from the Legality Rules. Besides, there's really no need to define the concept of matching for generic parameters. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)("h4",A({},{id:"extensions-to-ada-95"}),"Extensions to Ada 95")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.i/2"),(0,a.kt)(d.Z,{items:["AI95-00218-03"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"An ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-8/AA-8.3#S0234"},"overriding_indicator"))," (see ",(0,a.kt)("a",{href:"../AA-8/AA-8.3#Subclause_8.3.1"},"8.3.1"),") is allowed on a subprogram instantiation. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)("h4",A({},{id:"extensions-to-ada-2005"}),"Extensions to Ada 2005")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.j/3"),(0,a.kt)(d.Z,{items:["AI05-0183-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"An optional ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0346"},"aspect_specification"))," can be used in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation")),". This is described in ",(0,a.kt)("a",{href:"../AA-13/AA-13.1#Subclause_13.1.1"},"13.1.1"),". ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)("h4",A({},{id:"wording-changes-from-ada-2005"}),"Wording Changes from Ada 2005")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.k/3"),(0,a.kt)(d.Z,{items:["AI05-0118-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"correction",mdxType:"Admonition"},(0,a.kt)("strong",null)," Added a definition for positional parameters, as this is missing from Ada 95 and Ada 2005. ",(0,a.kt)("br",null))),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)("h4",A({},{id:"wording-changes-from-ada-2012"}),"Wording Changes from Ada 2012")),(0,a.kt)(r.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(l.Z,{mdxType:"MarginText"},"29.l/5"),(0,a.kt)(d.Z,{items:["AI12-0205-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Added uses of ",(0,a.kt)("em",null,"default_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.2#S0028"},"subtype_mark")),"s so formal types can have defaults (see ",(0,a.kt)("a",{href:"../AA-12/AA-12.5"},"12.5"),"). ",(0,a.kt)("br",null))))}Z.isMDXComponent=!0}}]);