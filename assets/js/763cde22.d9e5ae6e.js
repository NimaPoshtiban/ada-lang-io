"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[1399],{2265:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(9440),r=(t(6687),t(1716));t(2526);const i={sidebar_position:93},o="12 Generic Units",s={unversionedId:"arm/AA-12",id:"arm/AA-12",title:"12 Generic Units",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-12.mdx",sourceDirName:"arm",slug:"/arm/AA-12",permalink:"/docs/arm/AA-12",draft:!1,tags:[],version:"current",sidebarPosition:93,frontMatter:{sidebar_position:93},sidebar:"tutorialSidebar",previous:{title:"11.6  Exceptions and Optimization",permalink:"/docs/arm/AA-11.6"},next:{title:"12.1  Generic Declarations",permalink:"/docs/arm/AA-12.1"}},c={},l=[],p={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"12-generic-units"},"12 Generic Units"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"},"tracking issue"))),(0,r.kt)("p",null,"A ",(0,r.kt)("em",null,"generic unit")," is a program unit that is either a generic subprogram or a generic package. A generic unit is a ",(0,r.kt)("em",null,"template"),"[, which can be parameterized, and from which corresponding (nongeneric) subprograms or packages can be obtained]. The resulting program units are said to be ",(0,r.kt)("em",null,"instances")," of the original generic unit. "),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Glossary entry: "),"A generic unit is a template for a (nongeneric) program unit; the template can be parameterized by objects, types, subprograms, and packages. An instance of a generic unit is created by a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"./AA-12.3#S0315"},"generic_instantiation")),". The rules of the language are enforced when a generic unit is compiled, using a generic contract model; additional checks are performed upon instantiation to verify the contract is met. That is, the declaration of a generic unit represents a contract between the body of the generic and instances of the generic. Generic units can be used to perform the role that macros sometimes play in other languages."),(0,r.kt)("p",null,"Version=[5],Kind=(AddedNormal),Group=[C],Term=[generic unit], Def=[a template for a (nongeneric) program unit], Note1=[The template can be parameterized by objects, types, subprograms, and packages.], Note2=[Generic units can be used to perform the role that macros sometimes play in other languages.] Version=[5],Kind=(AddedNormal),Group=[C],Term=[generic instance], Def=[a nongeneric unit created by the instantiation of a generic unit]"),(0,r.kt)("p",null,"[A generic unit is declared by a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"./AA-12.1#S0310"},"generic_declaration")),". This form of declaration has a ",(0,r.kt)("code",null,"[generic_formal_part](./AA-12.1#S0313)")," declaring any generic formal parameters. An instance of a generic unit is obtained as the result of a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"./AA-12.3#S0315"},"generic_instantiation"))," with appropriate generic actual parameters for the generic formal parameters. An instance of a generic subprogram is a subprogram. An instance of a generic package is a package."),(0,r.kt)("p",null,"Generic units are templates. As templates they do not have the properties that are specific to their nongeneric counterparts. For example, a generic subprogram can be instantiated but it cannot be called. In contrast, an instance of a generic subprogram is a (nongeneric) subprogram; hence, this instance can be called but it cannot be used to produce further instances.] "))}u.isMDXComponent=!0}}]);