"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[9020],{1716:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(6687);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(9440),i=(n(6687),n(1716));const r={sidebar_position:176},l="F.2  The Package Decimal",o={unversionedId:"arm/AA-F.2",id:"arm/AA-F.2",title:"F.2  The Package Decimal",description:"Static Semantics",source:"@site/docs/arm/AA-F.2.md",sourceDirName:"arm",slug:"/arm/AA-F.2",permalink:"/docs/arm/AA-F.2",draft:!1,tags:[],version:"current",sidebarPosition:176,frontMatter:{sidebar_position:176},sidebar:"tutorialSidebar",previous:{title:"F.1  Machine_Radix Attribute Definition Clause",permalink:"/docs/arm/AA-F.1"},next:{title:"F.3  Edited Output for Decimal Types",permalink:"/docs/arm/AA-F.3"}},s={},c=[{value:"Static Semantics",id:"static-semantics",level:4},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"Implementation Requirements",id:"implementation-requirements",level:4}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"f2--the-package-decimal"},"F.2  The Package Decimal"),(0,i.kt)("h4",{id:"static-semantics"},"Static Semantics"),(0,i.kt)("p",null,"The library package Decimal has the following declaration: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI12-0414-1} package Ada.Decimal\n   with Pure is\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Max_Scale : constant := implementation-defined;\n   Min_Scale : constant := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Min_Delta : constant := 10.0**(-Max_Scale);\n   Max_Delta : constant := 10.0**(-Min_Scale);\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Max_Decimal_Digits : constant := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI05-0229-1}    generic\n      type Dividend_Type  is delta &lt&gt digits &lt&gt;\n      type Divisor_Type   is delta &lt&gt digits &lt&gt;\n      type Quotient_Type  is delta &lt&gt digits &lt&gt;\n      type Remainder_Type is delta &lt&gt digits &lt&gt;\n   procedure Divide (Dividend  : in Dividend_Type;\n                     Divisor   : in Divisor_Type;\n                     Quotient  : out Quotient_Type;\n                     Remainder : out Remainder_Type)\n      with Convention =&gt Intrinsic;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"end Ada.Decimal;\n\n")),(0,i.kt)("p",null,"Implementation defined: The values of named numbers in the package Decimal."),(0,i.kt)("p",null,"Max_Scale is the largest N such that 10.0**(N) is allowed as a decimal type's delta. Its type is universal_integer."),(0,i.kt)("p",null,"Min_Scale is the smallest N such that 10.0**(N) is allowed as a decimal type's delta. Its type is universal_integer."),(0,i.kt)("p",null,"Min_Delta is the smallest value allowed for delta in a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0049"},"decimal_fixed_point_definition"),". Its type is universal_real."),(0,i.kt)("p",null,"Max_Delta is the largest value allowed for delta in a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0049"},"decimal_fixed_point_definition"),". Its type is universal_real."),(0,i.kt)("p",null,"Max_Decimal_Digits is the largest value allowed for digits in a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0049"},"decimal_fixed_point_definition"),". Its type is universal_integer. "),(0,i.kt)("p",null,"Reason: The name is Max_Decimal_Digits versus Max_Digits, in order to avoid confusion with the named number System.Max_Digits relevant to floating point. "),(0,i.kt)("h4",{id:"static-semantics-1"},"Static Semantics"),(0,i.kt)("p",null,"The effect of Divide is as follows. The value of Quotient is Quotient_Type(Dividend/Divisor). The value of Remainder is Remainder_Type(Intermediate), where Intermediate is the difference between Dividend and the product of Divisor and Quotient; this result is computed exactly. "),(0,i.kt)("h4",{id:"implementation-requirements"},"Implementation Requirements"),(0,i.kt)("p",null,"Decimal.Max_Decimal_Digits shall be at least 18."),(0,i.kt)("p",null,"Decimal.Max_Scale shall be at least 18."),(0,i.kt)("p",null,"Decimal.Min_Scale shall be at most 0. "),(0,i.kt)("p",null,"NOTE 1   The effect of division yielding a quotient with control over rounding versus truncation is obtained by applying either the function attribute Quotient_Type'Round or the conversion Quotient_Type to the expression Dividend/Divisor."))}d.isMDXComponent=!0}}]);