"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[672],{1716:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var r=a(6687);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),o=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=o(a),h=n,c=u["".concat(p,".").concat(h)]||u[h]||d[h]||i;return a?r.createElement(c,l(l({ref:t},m),{},{components:a})):r.createElement(c,l({ref:t},m))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6194:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var r=a(9440),n=(a(6687),a(1716));const i={sidebar_position:10},l="2.4  Numeric Literals",s={unversionedId:"arm/AA-2.4",id:"arm/AA-2.4",title:"2.4  Numeric Literals",description:"There are two kinds of numericliterals, real literals and integer literals. A real literal is a numericliteral that includes a point; an integer literal is a numeric_literal without a point.",source:"@site/docs/arm/AA-2.4.md",sourceDirName:"arm",slug:"/arm/AA-2.4",permalink:"/docs/arm/AA-2.4",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"2.3  Identifiers",permalink:"/docs/arm/AA-2.3"},next:{title:"2.5  Character Literals",permalink:"/docs/arm/AA-2.5"}},p={},o=[{value:"Syntax",id:"syntax",level:4},{value:"2.4.1  Decimal Literals",id:"241--decimal-literals",level:2},{value:"Syntax",id:"syntax-1",level:4},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Examples",id:"examples",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4},{value:"2.4.2  Based Literals",id:"242--based-literals",level:2},{value:"Syntax",id:"syntax-2",level:4},{value:"Legality Rules",id:"legality-rules",level:4},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83-1",level:4}],m={toc:o};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"24--numeric-literals"},"2.4  Numeric Literals"),(0,n.kt)("p",null,"There are two kinds of ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal"),"s, real literals and integer literals. A real literal is a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal")," that includes a point; an integer literal is a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal")," without a point. "),(0,n.kt)("h4",{id:"syntax"},"Syntax"),(0,n.kt)("p",null,"numeric_literal",(0,n.kt)("a",{id:"S0006"})," ::= ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0007"},"decimal_literal")," | ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0011"},"based_literal")),(0,n.kt)("p",null,"NOTE 1   The type of an integer literal is universal_integer. The type of a real literal is universal_real. "),(0,n.kt)("h2",{id:"241--decimal-literals"},"2.4.1  Decimal Literals"),(0,n.kt)("p",null,"A ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0007"},"decimal_literal")," is a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal")," in the conventional decimal notation (that is, the base is ten). "),(0,n.kt)("h4",{id:"syntax-1"},"Syntax"),(0,n.kt)("p",null,"decimal_literal",(0,n.kt)("a",{id:"S0007"})," ::= ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0008"},"numeral")," [.",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0008"},"numeral"),"] [",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent"),"]"),(0,n.kt)("p",null,"numeral",(0,n.kt)("a",{id:"S0008"})," ::= ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0010"},"digit")," {","[underline][digit]","(./AA-2.4#S0010)}"),(0,n.kt)("p",null,"exponent",(0,n.kt)("a",{id:"S0009"})," ::= E ","[+][numeral]","(./AA-2.4#S0008) | E  ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0008"},"numeral")),(0,n.kt)("p",null,"{AI95-00285-01} digit",(0,n.kt)("a",{id:"S0010"})," ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9"),(0,n.kt)("p",null,"An ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent")," for an integer literal shall not have a minus sign. "),(0,n.kt)("p",null,"Ramification: Although this rule is in this subclause, it applies also to the next subclause. "),(0,n.kt)("h4",{id:"static-semantics"},"Static Semantics"),(0,n.kt)("p",null,"An underline character in a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal")," does not affect its meaning. The letter E of an ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent")," can be written either in lower case or in upper case, with the same meaning. "),(0,n.kt)("p",null,"Ramification: Although these rules are in this subclause, they apply also to the next subclause. "),(0,n.kt)("p",null,"An ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent")," indicates the power of ten by which the value of the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0007"},"decimal_literal")," without the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent")," is to be multiplied to obtain the value of the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0007"},"decimal_literal")," with the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent"),". "),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("p",null,"Examples of decimal literals: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ada"},"12        0      1E6    123_456    --  integer literals\n\n12.0      0.0    0.456  3.14159_26 --  real literals\n\n")),(0,n.kt)("h4",{id:"wording-changes-from-ada-83"},"Wording Changes from Ada 83"),(0,n.kt)("p",null,"We have changed the syntactic category name integer to be ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0008"},"numeral"),". We got this idea from ACID. It avoids the confusion between this and integers. (Other places don't offer similar confusions. For example, a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.6#S0016"},"string_literal")," is different from a string.) "),(0,n.kt)("h2",{id:"242--based-literals"},"2.4.2  Based Literals"),(0,n.kt)("p",null,"[ A ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0011"},"based_literal")," is a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal")," expressed in a form that specifies the base explicitly.] "),(0,n.kt)("h4",{id:"syntax-2"},"Syntax"),(0,n.kt)("p",null,"based_literal",(0,n.kt)("a",{id:"S0011"})," ::=\n",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0012"},"base")," # ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0013"},"based_numeral")," [.",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0013"},"based_numeral"),"] # [",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent"),"]"),(0,n.kt)("p",null,"base",(0,n.kt)("a",{id:"S0012"})," ::= ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0008"},"numeral")),(0,n.kt)("p",null,"based_numeral",(0,n.kt)("a",{id:"S0013"})," ::=\n",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0014"},"extended_digit")," {","[underline][extended_digit]","(./AA-2.4#S0014)}"),(0,n.kt)("p",null,"extended_digit",(0,n.kt)("a",{id:"S0014"})," ::= ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0010"},"digit")," | A | B | C | D | E | F"),(0,n.kt)("h4",{id:"legality-rules"},"Legality Rules"),(0,n.kt)("p",null,"The base (the numeric value of the decimal ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0008"},"numeral")," preceding the first #) shall be at least two and at most sixteen. The ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0014"},"extended_digit"),"s A through F represent the digits ten through fifteen, respectively. The value of each ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0014"},"extended_digit")," of a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0011"},"based_literal")," shall be less than the base. "),(0,n.kt)("h4",{id:"static-semantics-1"},"Static Semantics"),(0,n.kt)("p",null,"The conventional meaning of based notation is assumed. An ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent")," indicates the power of the base by which the value of the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0011"},"based_literal")," without the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent")," is to be multiplied to obtain the value of the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0011"},"based_literal")," with the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent"),". The ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0012"},"base")," and the ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0009"},"exponent"),", if any, are in decimal notation."),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0014"},"extended_digit"),"s A through F can be written either in lower case or in upper case, with the same meaning. "),(0,n.kt)("h4",{id:"examples-1"},"Examples"),(0,n.kt)("p",null,"Examples of based literals: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ada"},"2#1111_1111#  16#FF#       016#0ff#   --  integer literals of value 255\n16#E#E1       2#1110_0000#            --  integer literals of value 224\n16#F.FF#E+2   2#1.1111_1111_1110#E11  --  real literals of value 4095.0\n\n")),(0,n.kt)("h4",{id:"wording-changes-from-ada-83-1"},"Wording Changes from Ada 83"),(0,n.kt)("p",null,"The rule about which letters are allowed is now encoded in BNF, as suggested by Mike Woodger. This is clearly more readable."))}d.isMDXComponent=!0}}]);