"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[4902],{6852:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>m,default:()=>S,frontMatter:()=>u,metadata:()=>f,toc:()=>b});var t=a(1716),r=a(7556),o=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,n,a)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,k=(e,n)=>{for(var a in n||(n={}))c.call(n,a)&&d(e,a,n[a]);if(s)for(var a of s(n))p.call(n,a)&&d(e,a,n[a]);return e};const u={sidebar_position:101},m="12.8 Example of a Generic Package",f={unversionedId:"arm/AA-12/AA-12.8",id:"arm/AA-12/AA-12.8",title:"12.8 Example of a Generic Package",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-12/AA-12.8.mdx",sourceDirName:"arm/AA-12",slug:"/arm/AA-12/AA-12.8",permalink:"/docs/arm/AA-12/AA-12.8",draft:!1,tags:[],version:"current",sidebarPosition:101,frontMatter:{sidebar_position:101},sidebar:"referenceManualSidebar",previous:{title:"12.7 Formal Packages",permalink:"/docs/arm/AA-12/AA-12.7"},next:{title:"13 Representation Issues",permalink:"/docs/arm/AA-13/"}},g={},b=[{value:"Examples",id:"examples",level:4}],h={toc:b};function S(e){var n,a=e,{components:o}=a,d=((e,n)=>{var a={};for(var t in e)c.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&s)for(var t of s(e))n.indexOf(t)<0&&p.call(e,t)&&(a[t]=e[t]);return a})(a,["components"]);return(0,t.kt)("wrapper",(n=k(k({},h),d),i(n,l({components:o,mdxType:"MDXLayout"}))),(0,t.kt)("h1",k({},{id:"128-example-of-a-generic-package"}),"12.8 Example of a Generic Package"),(0,t.kt)("admonition",k({},{type:"warning"}),(0,t.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,t.kt)("a",k({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,t.kt)("p",null,"The following example provides a possible formulation of stacks by means of a generic package. The size of each stack and the type of the stack elements are provided as generic formal parameters. ",(0,t.kt)("br",null)),(0,t.kt)("h4",k({},{id:"examples"}),"Examples"),(0,t.kt)("p",null,(0,t.kt)("em",null,"This paragraph was deleted."),(0,t.kt)("br",null)),(0,t.kt)(r.Z,{mdxType:"CodeBlock"},"generic","\n","   Size : Positive;","\n","   type Item is private;","\n","package Stack is","\n","   procedure Push(E : in  Item);","\n","   procedure Pop (E : out Item);","\n","   Overflow, Underflow : exception;","\n","end Stack;","\n","package body Stack is","\n","type Table is array (Positive range ","<",">",") of Item;","\n","   Space : Table(1 .. Size);","\n","   Index : Natural := 0;","\n","procedure Push(E : in Item) is","\n","   begin","\n","      if Index ",">","= Size then","\n","         raise Overflow;","\n","      end if;","\n","      Index := Index + 1;","\n","      Space(Index) := E;","\n","   end Push;","\n","procedure Pop(E : out Item) is","\n","   begin","\n","      if Index = 0 then","\n","         raise Underflow;","\n","      end if;","\n","      E := Space(Index);","\n","      Index := Index - 1;","\n","   end Pop;","\n","end Stack;","\n"),(0,t.kt)("p",null,"Instances of this generic package can be obtained as follows: ",(0,t.kt)("br",null)),(0,t.kt)(r.Z,{mdxType:"CodeBlock"},"package Stack_Int  is new Stack(Size =",">"," 200, Item =",">"," Integer);","\n","package Stack_Bool is new Stack(100, Boolean);","\n"),(0,t.kt)("p",null,"Thereafter, the procedures of the instantiated packages can be called as follows: ",(0,t.kt)("br",null)),(0,t.kt)(r.Z,{mdxType:"CodeBlock"},"Stack_Int.Push(N);","\n","Stack_Bool.Push(True);","\n"),(0,t.kt)("p",null,"Alternatively, a generic formulation of the type Stack can be given as follows (package body omitted): ",(0,t.kt)("br",null)),(0,t.kt)(r.Z,{mdxType:"CodeBlock"},"generic","\n","   type Item is private;","\n","package On_Stacks is","\n","   type Stack(Size : Positive) is limited private;","\n","   procedure Push(S : in out Stack; E : in  Item);","\n","   procedure Pop (S : in out Stack; E : out Item);","\n","   Overflow, Underflow : exception;","\n","private","\n","   type Table is array (Positive range ","<",">",") of Item;","\n","   type Stack(Size : Positive) is","\n","      record","\n","         Space : Table(1 .. Size);","\n","         Index : Natural := 0;","\n","      end record;","\n","end On_Stacks;","\n"),(0,t.kt)("p",null,"In order to use such a package, an instance has to be created and thereafter stacks of the corresponding type can be declared: ",(0,t.kt)("br",null)),(0,t.kt)(r.Z,{mdxType:"CodeBlock"},"declare","\n","   package Stack_Real is new On_Stacks(Real); use Stack_Real;","\n","   S : Stack(100);","\n","begin","\n","   ...","\n","   Push(S, 2.54);","\n","   ...","\n","end;","\n"))}S.isMDXComponent=!0}}]);