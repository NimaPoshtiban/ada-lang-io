"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6430],{64516:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=n(58168),a=(n(96540),n(15680));const s={title:"9. Object-Oriented Features",sidebar_position:9},o=void 0,r={unversionedId:"style-guide/s9/s9",id:"style-guide/s9/s9",title:"9. Object-Oriented Features",description:"This chapter recommends ways of using Ada's object-oriented features.",source:"@site/docs/style-guide/s9/s9.mdx",sourceDirName:"style-guide/s9",slug:"/style-guide/s9/",permalink:"/docs/style-guide/s9/",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"9. Object-Oriented Features",sidebar_position:9},sidebar:"styleGuideSidebar",previous:{title:"8.5 Summary",permalink:"/docs/style-guide/s8/05"},next:{title:"9.1 Object-Oriented Design",permalink:"/docs/style-guide/s9/01"}},l={},c=[],d={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,i.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This chapter recommends ways of using Ada's object-oriented features.\nAda supports inheritance and polymorphism, providing the programmer some\neffective techniques and building blocks. Disciplined use of these\nfeatures will promote programs that are easier to read and modify. These\nfeatures also give the programmer flexibility in building reusable\ncomponents."),(0,a.yg)("p",null,"The following definitions are provided in order to make this chapter\nmore understandable. The essential characteristics of object-oriented\nprogramming are encapsulation, inheritance, and polymorphism. These are\ndefined as follows in the Rationale (1995, \xa7\xa74.1 and III.1.2):"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Inheritance",(0,a.yg)("br",{parentName:"li"}),'A means for incrementally building new abstractions from an existing\none by "inheriting" their properties without disturbing the\nimplementation of the original abstraction or the existing clients.'),(0,a.yg)("li",{parentName:"ul"},"Multiple Inheritance",(0,a.yg)("br",{parentName:"li"}),"The means of inheriting components and operations from two or more\nparent abstractions."),(0,a.yg)("li",{parentName:"ul"},"Mixin Inheritance",(0,a.yg)("br",{parentName:"li"}),"Multiple inheritance in which one or more of the parent abstractions\ncannot have instances of their own and exist only to provide a set\nof properties for abstractions inheriting from them."),(0,a.yg)("li",{parentName:"ul"},"Polymorphism",(0,a.yg)("br",{parentName:"li"}),"A means of factoring out the differences among a collection of\nabstractions, such that programs may be written in terms of the\ncommon properties.")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Static polymorphism is provided through the generic parameter\nmechanism whereby a generic unit may be instantiated at compile time\nwith any type from a class of types."),(0,a.yg)("li",{parentName:"ul"},'Dynamic polymorphism is provided through the use of so-called\nclass-wide types and the distinction is then made at runtime on the\nbasis of the value of the tag ("effectively a hidden discriminant\nidentifying the type" ',"[","Rationale 1995, \xa7II.1","]",").")),(0,a.yg)("p",null,"As stated in the Ada Reference Manual (1995, Annex N):"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"A type has an associated set of values and a set of primitive\noperations that implement the fundamental aspects of its semantics.")),(0,a.yg)("p",null,"A class is a set of types that is closed under derivation, which means\nthat if a given type is in the class, then all types derived from that\ntype are also in the class. The set of types of a class share common\nproperties, such as their primitive operations. The semantics of a class\ninclude expected behavior and exceptions."),(0,a.yg)("p",null,"An object is either a constant or variable defined from a type (class).\nAn object contains a value. A subcomponent of an object is itself an\nobject."),(0,a.yg)("p",null,'Guidelines in this chapter are frequently worded "consider ..." because\nhard and fast rules cannot apply in all situations. The specific choice\nyou make in a given situation involves design tradeoffs. The rationale\nfor these guidelines is intended to give you insight into some of these\ntradeoffs.'))}m.isMDXComponent=!0}}]);