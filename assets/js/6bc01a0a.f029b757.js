"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[8192],{3784:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>g,default:()=>A,frontMatter:()=>f,metadata:()=>h,toc:()=>b});var a=t(1716),o=t(7556),i=t(7353),r=Object.defineProperty,l=Object.defineProperties,s=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,p=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,u=(e,n)=>{for(var t in n||(n={}))d.call(n,t)&&p(e,t,n[t]);if(c)for(var t of c(n))m.call(n,t)&&p(e,t,n[t]);return e};const f={sidebar_position:95},g="12.2 Generic Bodies",h={unversionedId:"arm/AA-12/AA-12.2",id:"arm/AA-12/AA-12.2",title:"12.2 Generic Bodies",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-12/AA-12.2.mdx",sourceDirName:"arm/AA-12",slug:"/arm/AA-12/AA-12.2",permalink:"/docs/arm/AA-12/AA-12.2",draft:!1,tags:[],version:"current",sidebarPosition:95,frontMatter:{sidebar_position:95},sidebar:"referenceManualSidebar",previous:{title:"12.1 Generic Declarations",permalink:"/docs/arm/AA-12/AA-12.1"},next:{title:"12.3 Generic Instantiation",permalink:"/docs/arm/AA-12/AA-12.3"}},k={},b=[{value:"Dynamic Semantics",id:"dynamic-semantics",level:4},{value:"Examples",id:"examples",level:4}],y={toc:b};function A(e){var n,t=e,{components:r}=t,p=((e,n)=>{var t={};for(var a in e)d.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&c)for(var a of c(e))n.indexOf(a)<0&&m.call(e,a)&&(t[a]=e[a]);return t})(t,["components"]);return(0,a.kt)("wrapper",(n=u(u({},y),p),l(n,s({components:r,mdxType:"MDXLayout"}))),(0,a.kt)("h1",u({},{id:"122-generic-bodies"}),"12.2 Generic Bodies"),(0,a.kt)("admonition",u({},{type:"warning"}),(0,a.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,a.kt)("a",u({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,a.kt)("p",null,"The body of a generic unit (a ",(0,a.kt)("em",null,"generic body"),") [is a template for the instance bodies. The syntax of a generic body is identical to that of a nongeneric body]. "),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Ramification: "),'We also use terms like "generic function body" and "nongeneric package body". ')),(0,a.kt)("h4",u({},{id:"dynamic-semantics"}),"Dynamic Semantics"),(0,a.kt)("p",null,"The elaboration of a generic body has no other effect than to establish that the generic unit can from then on be instantiated without failing the Elaboration_Check. If the generic body is a child of a generic package, then its elaboration establishes that each corresponding declaration nested in an instance of the parent (see 10.1.1) can from then on be instantiated without failing the Elaboration_Check. "),(0,a.kt)(i.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"NOTE 1   The syntax of generic subprograms implies that a generic subprogram body is always the completion of a declaration. ")),(0,a.kt)("h4",u({},{id:"examples"}),"Examples"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Example of a generic procedure body:")," "),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},"procedure Exchange(U, V : in out Elem) is  -- see 12.1","\n","   T : Elem;  --  the generic formal type","\n","begin","\n","   T := U;","\n","   U := V;","\n","   V := T;","\n","end Exchange;","\n"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Example of a generic function body:")," "),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},"function Squaring(X : Item) return Item is  --  see 12.1","\n","begin","\n",'   return X*X;  --  the formal operator "*"',"\n","end Squaring;","\n"),(0,a.kt)("p",null,(0,a.kt)("em",null,"Example of a generic package body:")," "),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},"package body On_Vectors is  --  see 12.1","\n"),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},"function Sum(A, B : Vector) return Vector is","\n","      Result : Vector(A'Range); --  the formal type Vector","\n","      Bias   : constant Integer := B'First - A'First;","\n","   begin","\n","      if A'Length /= B'Length then","\n","         raise Length_Error;","\n","      end if;","\n"),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},"for N in A'Range loop","\n","         Result(N) := Sum(A(N), B(N + Bias)); -- the formal function Sum","\n","      end loop;","\n","      return Result;","\n","   end Sum;","\n"),(0,a.kt)(o.Z,{mdxType:"CodeBlock"},"function Sigma(A : Vector) return Item is","\n","      Total : Item := A(A'First); --  the formal type Item","\n","   begin","\n","      for N in A'First + 1 .. A'Last loop","\n","         Total := Sum(Total, A(N)); --  the formal function Sum","\n","      end loop;","\n","      return Total;","\n","   end Sigma;","\n","end On_Vectors;","\n"))}A.isMDXComponent=!0}}]);