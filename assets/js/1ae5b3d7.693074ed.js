"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6890],{1716:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(6687);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(t),m=a,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(f,s(s({ref:n},p),{},{components:t})):r.createElement(f,s({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=c;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=t(9440),a=(t(6687),t(1716));const o={sidebar_position:82},s="9.11  Example of Tasking and Synchronization",i={unversionedId:"arm/AA-9.11",id:"arm/AA-9.11",title:"9.11  Example of Tasking and Synchronization",description:"Examples",source:"@site/docs/arm/AA-9.11.md",sourceDirName:"arm",slug:"/arm/AA-9.11",permalink:"/docs/arm/AA-9.11",draft:!1,tags:[],version:"current",sidebarPosition:82,frontMatter:{sidebar_position:82},sidebar:"tutorialSidebar",previous:{title:"9.10  Shared Variables",permalink:"/docs/arm/AA-9.10"},next:{title:"10 Program Structure and Compilation Issues",permalink:"/docs/arm/AA-10"}},u={},l=[{value:"Examples",id:"examples",level:4}],p={toc:l};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"911--example-of-tasking-and-synchronization"},"9.11  Example of Tasking and Synchronization"),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"{AI12-0440-1} The following example defines a buffer protected object to smooth variations between the speed of output of a producing task and the speed of input of some consuming task. For instance, the producing task can have the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"task Producer;\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00433-01} task body Producer is\n   Person : Person_Name; -- see 3.10.1\nbegin\n   loop\n      ... --  simulate arrival of the next customer\n      Buffer.Append_Wait(Person);\n      exit when Person = null;\n   end loop;\nend Producer;\n\n")),(0,a.kt)("p",null,"{AI12-0440-1} and the consuming task can have the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"task Consumer;\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00433-01} task body Consumer is\n   Person : Person_Name;\nbegin\n   loop\n      Buffer.Remove_First_Wait(Person);\n      exit when Person = null;\n      ... --  simulate serving a customer\n   end loop;\nend Consumer;\n\n")),(0,a.kt)("p",null,"{AI95-00433-01} The buffer object contains an internal array of person names managed in a round-robin fashion. The array has two indices, an In_Index denoting the index for the next input person name and an Out_Index denoting the index for the next output person name."),(0,a.kt)("p",null,"{AI95-00433-01} The Buffer is defined as an extension of the Synchronized_Queue interface (see 3.9.4), and as such promises to implement the abstraction defined by that interface. By doing so, the Buffer can be passed to the Transfer class-wide operation defined for objects of a type covered by Queue'Class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI12-0178-1} type Person_Name_Array is array (Positive range &lt&gt)\n   of Person_Name;  -- see 3.10.1\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00433-01} protected Buffer is new Synchronized_Queue with  -- see 3.9.4\n   entry Append_Wait(Person : in Person_Name);\n   entry Remove_First_Wait(Person : out Person_Name);\n   function Cur_Count return Natural;\n   function Max_Count return Natural;\n   procedure Append(Person : in Person_Name);\n   procedure Remove_First(Person : out Person_Name);\nprivate\n   Pool      : Person_Name_Array(1 .. 100);\n   Count     : Natural := 0;\n   In_Index, Out_Index : Positive := 1;\nend Buffer;\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00433-01} protected body Buffer is\n   entry Append_Wait(Person : in Person_Name)\n      when Count &lt Pool'Length is\n   begin\n      Append(Person);\n   end Append_Wait;\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00433-01}    procedure Append(Person : in Person_Name) is\n   begin\n      if Count = Pool'Length then\n         raise Queue_Error with \"Buffer Full\";  -- see 11.3\n      end if;\n      Pool(In_Index) := Person;\n      In_Index       := (In_Index mod Pool'Length) + 1;\n      Count          := Count + 1;\n   end Append;\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00433-01}    entry Remove_First_Wait(Person : out Person_Name)\n      when Count &gt 0 is\n   begin\n      Remove_First(Person);\n   end Remove_First_Wait;\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},'{AI95-00433-01}    procedure Remove_First(Person : out Person_Name) is\n   begin\n      if Count = 0 then\n         raise Queue_Error with "Buffer Empty"; -- see 11.3\n      end if;\n      Person    := Pool(Out_Index);\n      Out_Index := (Out_Index mod Pool\'Length) + 1;\n      Count     := Count - 1;\n   end Remove_First;\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00433-01}    function Cur_Count return Natural is\n   begin\n       return Buffer.Count;\n   end Cur_Count;\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00433-01}    function Max_Count return Natural is\n   begin\n       return Pool'Length;\n   end Max_Count;\nend Buffer;\n\n")))}d.isMDXComponent=!0}}]);