"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[9840],{1716:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(6687);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(a),f=r,h=d["".concat(s,".").concat(f)]||d[f]||m[f]||o;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3222:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(9440),r=(a(6687),a(1716));const o={sidebar_position:45},l="5.6  Block Statements",i={unversionedId:"arm/AA-5.6",id:"arm/AA-5.6",title:"5.6  Block Statements",description:"A [blockstatement encloses a handledsequenceofstatements optionally preceded by a declarative_part.]",source:"@site/docs/arm/AA-5.6.md",sourceDirName:"arm",slug:"/arm/AA-5.6",permalink:"/docs/arm/AA-5.6",draft:!1,tags:[],version:"current",sidebarPosition:45,frontMatter:{sidebar_position:45},sidebar:"tutorialSidebar",previous:{title:"5.5  Loop Statements",permalink:"/docs/arm/AA-5.5"},next:{title:"5.7  Exit Statements",permalink:"/docs/arm/AA-5.7"}},s={},p=[{value:"Syntax",id:"syntax",level:4},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Dynamic Semantics",id:"dynamic-semantics",level:4},{value:"Examples",id:"examples",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4},{value:"5.6.1  Parallel Block Statements",id:"561--parallel-block-statements",level:2},{value:"Syntax",id:"syntax-1",level:4},{value:"Dynamic Semantics",id:"dynamic-semantics-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Extensions to Ada 2012",id:"extensions-to-ada-2012",level:4}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"56--block-statements"},"5.6  Block Statements"),(0,r.kt)("p",null,"[A ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement")," encloses a ",(0,r.kt)("a",{parentName:"p",href:"./AA-11.2#S0304"},"handled_sequence_of_statements")," optionally preceded by a ",(0,r.kt)("a",{parentName:"p",href:"./AA-3.11#S0086"},"declarative_part"),".] "),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"block",(0,r.kt)("em",{parentName:"p"},"statement",(0,r.kt)("a",{id:"S0191"})," ::=\n[block"),(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0172"},"statement_identifier"),":]\n[declare\n",(0,r.kt)("a",{parentName:"p",href:"./AA-3.11#S0086"},"declarative_part"),"]\nbegin\n",(0,r.kt)("a",{parentName:"p",href:"./AA-11.2#S0304"},"handled_sequence_of_statements"),"\nend [block_",(0,r.kt)("a",{parentName:"p",href:"./AA-2.3#S0002"},"identifier"),"];"),(0,r.kt)("p",null,"If a ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement")," has a block_",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0172"},"statement_identifier"),", then the ",(0,r.kt)("a",{parentName:"p",href:"./AA-2.3#S0002"},"identifier")," shall be repeated after the end; otherwise, there shall not be an ",(0,r.kt)("a",{parentName:"p",href:"./AA-2.3#S0002"},"identifier")," after the end. "),(0,r.kt)("h4",{id:"static-semantics"},"Static Semantics"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement")," that has no explicit ",(0,r.kt)("a",{parentName:"p",href:"./AA-3.11#S0086"},"declarative_part")," has an implicit empty ",(0,r.kt)("a",{parentName:"p",href:"./AA-3.11#S0086"},"declarative_part"),". "),(0,r.kt)("p",null,"Ramification: Thus, other rules can always refer to the ",(0,r.kt)("a",{parentName:"p",href:"./AA-3.11#S0086"},"declarative_part")," of a ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement"),". "),(0,r.kt)("h4",{id:"dynamic-semantics"},"Dynamic Semantics"),(0,r.kt)("p",null,"The execution of a ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement")," consists of the elaboration of its ",(0,r.kt)("a",{parentName:"p",href:"./AA-3.11#S0086"},"declarative_part")," followed by the execution of its ",(0,r.kt)("a",{parentName:"p",href:"./AA-11.2#S0304"},"handled_sequence_of_statements"),". "),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Example of a block statement with a local variable: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ada"},"Swap:\n   declare\n      Temp : Integer;\n   begin\n      Temp := V; V := U; U := Temp;\n   end Swap;\n\n")),(0,r.kt)("p",null,"Ramification: If task objects are declared within a ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement")," whose execution is completed, the ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement")," is not left until all its dependent tasks are terminated (see 7.6). This rule applies to completion caused by a transfer of control."),(0,r.kt)("p",null,"Within a ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement"),", the block name can be used in expanded names denoting local entities such as Swap.Temp in the above example (see 4.1.3). "),(0,r.kt)("h4",{id:"wording-changes-from-ada-83"},"Wording Changes from Ada 83"),(0,r.kt)("p",null,"The syntax rule for ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0191"},"block_statement")," now uses the syntactic category ",(0,r.kt)("a",{parentName:"p",href:"./AA-11.2#S0304"},"handled_sequence_of_statements"),". "),(0,r.kt)("h2",{id:"561--parallel-block-statements"},"5.6.1  Parallel Block Statements"),(0,r.kt)("p",null,"{AI12-0119-1} {AI12-0436-1} [A ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0192"},"parallel_block_statement")," comprises two or more ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements")," separated by and where each represents an independent activity that is intended to proceed concurrently with the others.]"),(0,r.kt)("h4",{id:"syntax-1"},"Syntax"),(0,r.kt)("p",null,"{AI12-0119-1} {AI12-0427-1} {AI12-0436-1} parallel_block_statement",(0,r.kt)("a",{id:"S0192"})," ::=\nparallel [(",(0,r.kt)("a",{parentName:"p",href:"./AA-5.5#S0180"},"chunk_specification"),")] [",(0,r.kt)("a",{parentName:"p",href:"./AA-13.1#S0346"},"aspect_specification"),"] do\n",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements"),"\nand\n",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements"),"\n{and\n",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements"),"}\nend do;"),(0,r.kt)("p",null,"{AI12-0427-1} The ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.5#S0180"},"chunk_specification"),", if any, of a ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0192"},"parallel_block_statement")," shall be an integer_",(0,r.kt)("a",{parentName:"p",href:"./AA-4.4#S0138"},"simple_expression"),". "),(0,r.kt)("h4",{id:"dynamic-semantics-1"},"Dynamic Semantics"),(0,r.kt)("p",null,"{AI12-0119-1} {AI12-0427-1} For the execution of a ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0192"},"parallel_block_statement"),", the ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.5#S0180"},"chunk_specification")," and the ",(0,r.kt)("a",{parentName:"p",href:"./AA-13.1#S0346"},"aspect_specification"),", if any, are elaborated in an arbitrary order. After elaborating the ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.5#S0180"},"chunk_specification"),", if any, a check is made that the determined maximum number of chunks is greater than zero. If this check fails, Program_Error is raised. "),(0,r.kt)("p",null,"{AI12-0119-1} {AI12-0427-1} {AI12-0436-1} Then, the various ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements")," are grouped into one or more chunks, each with its own logical thread of control (see clause 9), up to the maximum number of chunks specified by the ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.5#S0180"},"chunk_specification"),", if any. Within each chunk every ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements")," of the chunk is executed in turn, in an arbitrary order. The ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0192"},"parallel_block_statement")," is complete once every one of the ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements")," has completed, either by reaching the end of its execution, or due to a transfer of control out of the construct by one of the ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements")," (see 5.1)."),(0,r.kt)("p",null,"Implementation Note: {AI12-0119-1} {AI12-0436-1} Although each ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.1#S0166"},"sequence_of_statements")," of a parallel block represents a separate logical thread of control, the implementation may choose to combine two or more such logical threads of control into a single physical thread of control to reduce the cost of creating numerous physical threads of control. "),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("p",null,"{AI12-0429-1} Example of a parallel block used to walk a binary tree in parallel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ada"},"{AI12-0119-1} {AI12-0404-1} procedure Traverse (T : Expr_Ptr) is -- see 3.9.1\nbegin\n   if T /= null and then\n      T.all in Binary_Operation'Class -- see 3.9.1\n   then -- recurse down the binary tree\n      parallel do\n         Traverse (T.Left);\n      and\n         Traverse (T.Right);\n      and\n         Ada.Text_IO.Put_Line\n            (\"Processing \" & Ada.Tags.Expanded_Name (T'Tag));\n      end do;\n   end if;\nend Traverse;\n\n")),(0,r.kt)("p",null,"{AI12-0429-1} Example of a parallel block used to search two halves of a string in parallel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ada"},"{AI12-0119-1} function Search (S : String; Char : Character) return Boolean is\nbegin\n   if S'Length &lt= 1000 then\n       -- Sequential scan\n       return (for some C of S =&gt C = Char);\n   else\n       -- Parallel divide and conquer\n       declare\n          Mid : constant Positive := S'First + S'Length/2 - 1;\n       begin\n          parallel do\n             for C of S(S'First .. Mid) loop\n                if C = Char then\n                   return True;  -- Terminates enclosing do\n                end if;\n             end loop;\n          and\n             for C of S(Mid + 1 .. S'Last) loop\n                if C = Char then\n                   return True;  -- Terminates enclosing do\n                end if;\n             end loop;\n          end do;\n          -- Not found\n          return False;\n       end;\n   end if;\nend Search;\n\n")),(0,r.kt)("h4",{id:"extensions-to-ada-2012"},"Extensions to Ada 2012"),(0,r.kt)("p",null,"{AI12-0119-1} {AI12-0427-1} {AI12-0436-1} The ",(0,r.kt)("a",{parentName:"p",href:"./AA-5.6#S0192"},"parallel_block_statement")," is new."))}m.isMDXComponent=!0}}]);