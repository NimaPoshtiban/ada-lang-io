"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[1598],{1716:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var r=a(6687);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),f=n,h=d["".concat(s,".").concat(f)]||d[f]||m[f]||o;return a?r.createElement(h,i(i({ref:t},p),{},{components:a})):r.createElement(h,i({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},859:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=a(9440),n=(a(6687),a(1716));const o={sidebar_position:8},i="2.2  Lexical Elements, Separators, and Delimiters",l={unversionedId:"arm/AA-2.2",id:"arm/AA-2.2",title:"2.2  Lexical Elements, Separators, and Delimiters",description:"Static Semantics",source:"@site/docs/arm/AA-2.2.md",sourceDirName:"arm",slug:"/arm/AA-2.2",permalink:"/docs/arm/AA-2.2",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"2.1  Character Set",permalink:"/docs/arm/AA-2.1"},next:{title:"2.3  Identifiers",permalink:"/docs/arm/AA-2.3"}},s={},c=[{value:"Static Semantics",id:"static-semantics",level:4},{value:"Implementation Requirements",id:"implementation-requirements",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012",level:4}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"22--lexical-elements-separators-and-delimiters"},"2.2  Lexical Elements, Separators, and Delimiters"),(0,n.kt)("h4",{id:"static-semantics"},"Static Semantics"),(0,n.kt)("p",null,"The text of a program consists of the texts of one or more ",(0,n.kt)("a",{parentName:"p",href:"./AA-10.1#S0285"},"compilation"),"s. The text of each ",(0,n.kt)("a",{parentName:"p",href:"./AA-10.1#S0285"},"compilation")," is a sequence of separate lexical elements. Each lexical element is formed from a sequence of characters, and is either a delimiter, an ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.3#S0002"},"identifier"),", a reserved word, a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal"),", a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.5#S0015"},"character_literal"),", a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.6#S0016"},"string_literal"),", or a comment. The meaning of a program depends only on the particular sequences of lexical elements that form its ",(0,n.kt)("a",{parentName:"p",href:"./AA-10.1#S0285"},"compilation"),"s, excluding ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.7#S0018"},"comment"),"s."),(0,n.kt)("p",null,"{AI95-00285-01} {AI05-0262-1} The text of a ",(0,n.kt)("a",{parentName:"p",href:"./AA-10.1#S0285"},"compilation")," is divided into lines. In general, the representation for an end of line is implementation defined. However, a sequence of one or more format_effectors other than the character whose code point is 16#09# (CHARACTER TABULATION) signifies at least one end of line. "),(0,n.kt)("p",null,"Implementation defined: The representation for an end of line."),(0,n.kt)("p",null,"{AI95-00285-01} ","[In some cases an explicit separator is required to separate adjacent lexical elements.]"," A separator is any of a separator_space, a format_effector, or the end of a line, as follows: "),(0,n.kt)("p",null,"{AI95-00285-01} A separator_space is a separator except within a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.7#S0018"},"comment"),", a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.6#S0016"},"string_literal"),", or a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.5#S0015"},"character_literal"),"."),(0,n.kt)("p",null,"{AI95-00285-01} {AI05-0262-1} The character whose code point is 16#09# (CHARACTER TABULATION) is a separator except within a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.7#S0018"},"comment"),"."),(0,n.kt)("p",null,"The end of a line is always a separator. "),(0,n.kt)("p",null,"One or more separators are allowed between any two adjacent lexical elements, before the first of each ",(0,n.kt)("a",{parentName:"p",href:"./AA-10.1#S0285"},"compilation"),", or after the last. At least one separator is required between an ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.3#S0002"},"identifier"),", a reserved word, or a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal")," and an adjacent ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.3#S0002"},"identifier"),", reserved word, or ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal"),"."),(0,n.kt)("p",null,"{AI05-0079-1} One or more other_format characters are allowed anywhere that a separator is","[; any such characters have no effect on the meaning of an Ada program]","."),(0,n.kt)("p",null,"{AI95-00285-01} A delimiter is either one of the following characters: "),(0,n.kt)("p",null,"{AI12-0125-3} {AI12-0212-1} &    '    (    )    *    +    ,        .    /    :    ;    ","<","    =    ",">","    @    ","[    ]","    |"),(0,n.kt)("p",null,"or one of the following compound delimiters each composed of two adjacent special characters "),(0,n.kt)("p",null,"=",">","    ..    **    :=    /=    ",">","=    ","<","=    ","<","<","    ",">",">","    ","<",">"),(0,n.kt)("p",null,"Each of the special characters listed for single character delimiters is a single delimiter except if this character is used as a character of a compound delimiter, or as a character of a ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.7#S0018"},"comment"),", ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.6#S0016"},"string_literal"),", ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.5#S0015"},"character_literal"),", or ",(0,n.kt)("a",{parentName:"p",href:"./AA-2.4#S0006"},"numeric_literal"),"."),(0,n.kt)("p",null,"The following names are used when referring to compound delimiters:"),(0,n.kt)("h4",{id:"implementation-requirements"},"Implementation Requirements"),(0,n.kt)("p",null,"delimiter name=",">",'arrow..double dot**double star, exponentiate:=assignment (pronounced: "becomes")/=inequality (pronounced: "not equal")',">","=greater than or equal","<","=less than or equal","<","<","left label bracket",">",">","right label bracket","<",">","boxAn implementation shall support lines of at least 200 characters in length, not counting any characters used to signify the end of a line. An implementation shall support lexical elements of at least 200 characters in length. The maximum supported line length and lexical element length are implementation defined. "),(0,n.kt)("p",null,"Implementation defined: Maximum supported line length and lexical element length."),(0,n.kt)("p",null,"Discussion: From URG recommendation. "),(0,n.kt)("h4",{id:"wording-changes-from-ada-95"},"Wording Changes from Ada 95"),(0,n.kt)("p",null,"{AI95-00285-01} {AI05-0299-1} The wording was updated to use the new character categories defined in the preceding subclause. "),(0,n.kt)("h4",{id:"extensions-to-ada-2005"},"Extensions to Ada 2005"),(0,n.kt)("p",null,"{AI05-0079-1} Correction: Clarified that other_format characters are allowed anywhere that separators are allowed. This was intended in Ada 2005, but didn't actually make it into the wording. "),(0,n.kt)("h4",{id:"wording-changes-from-ada-2012"},"Wording Changes from Ada 2012"),(0,n.kt)("p",null,"{AI12-0125-3} {AI12-0212-1} Added square brackets and the ",(0,n.kt)("a",{parentName:"p",href:"./AA-5.2#S0174"},"target_name")," symbol (see 5.2.1) to the list of delimiters."))}m.isMDXComponent=!0}}]);