"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[4975],{1716:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(6687);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=d(n),u=i,h=c["".concat(l,".").concat(u)]||c[u]||p[u]||s;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var d=2;d<s;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6518:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=n(9440),i=(n(6687),n(1716));const s={sidebar_position:109},r="13.7  The Package System",o={unversionedId:"arm/AA-13.7",id:"arm/AA-13.7",title:"13.7  The Package System",description:"[For each implementation there is a library package called System which includes the definitions of certain configuration-dependent characteristics.]",source:"@site/docs/arm/AA-13.7.md",sourceDirName:"arm",slug:"/arm/AA-13.7",permalink:"/docs/arm/AA-13.7",draft:!1,tags:[],version:"current",sidebarPosition:109,frontMatter:{sidebar_position:109},sidebar:"tutorialSidebar",previous:{title:"13.6  Change of Representation",permalink:"/docs/arm/AA-13.6"},next:{title:"13.8  Machine Code Insertions",permalink:"/docs/arm/AA-13.8"}},l={},d=[{value:"Static Semantics",id:"static-semantics",level:4},{value:"Implementation Permissions",id:"implementation-permissions",level:4},{value:"Implementation Advice",id:"implementation-advice",level:4},{value:"Extensions to Ada 83",id:"extensions-to-ada-83",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95",level:4},{value:"13.7.1  The Package System.Storage_Elements",id:"1371--the-package-systemstorage_elements",level:2},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"Implementation Requirements",id:"implementation-requirements",level:4},{value:"Implementation Advice",id:"implementation-advice-1",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95-1",level:4},{value:"13.7.2  The Package System.Address_To_Access_Conversions",id:"1372--the-package-systemaddress_to_access_conversions",level:2},{value:"Static Semantics",id:"static-semantics-2",level:4},{value:"Implementation Permissions",id:"implementation-permissions-1",level:4}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"137--the-package-system"},"13.7  The Package System"),(0,i.kt)("p",null,"[For each implementation there is a library package called System which includes the definitions of certain configuration-dependent characteristics.]"," "),(0,i.kt)("h4",{id:"static-semantics"},"Static Semantics"),(0,i.kt)("p",null,"The following language-defined library package exists: "),(0,i.kt)("p",null,"Implementation defined: The contents of the visible part of package System."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00362-01} {AI12-0414-1} package System\n   with Pure is\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   type Name is implementation-defined-enumeration-type;\n   System_Name : constant Name := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   -- System-Dependent Named Numbers:\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Min_Int               : constant := root_integer'First;\n   Max_Int               : constant := root_integer'Last;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Max_Binary_Modulus    : constant := implementation-defined;\n   Max_Nonbinary_Modulus : constant := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Max_Base_Digits       : constant := root_real'Digits;\n   Max_Digits            : constant := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Max_Mantissa          : constant := implementation-defined;\n   Fine_Delta            : constant := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Tick                  : constant := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   -- Storage-related Declarations:\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   type Address is implementation-defined;\n   Null_Address : constant Address;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Storage_Unit : constant := implementation-defined;\n   Word_Size    : constant := implementation-defined * Storage_Unit;\n   Memory_Size  : constant := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},'{AI05-0229-1}    -- Address Comparison:\n   function "&lt" (Left, Right : Address) return Boolean\n      with Convention =&gt Intrinsic;\n   function "&lt="(Left, Right : Address) return Boolean\n      with Convention =&gt Intrinsic;\n   function "&gt" (Left, Right : Address) return Boolean\n      with Convention =&gt Intrinsic;\n   function "&gt="(Left, Right : Address) return Boolean\n      with Convention =&gt Intrinsic;\n   function "=" (Left, Right : Address) return Boolean\n      with Convention =&gt Intrinsic;\n-- function "/=" (Left, Right : Address) return Boolean;\n   -- "/=" is implicitly defined\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00221-01}    -- Other System-Dependent Declarations:\n   type Bit_Order is (High_Order_First, Low_Order_First);\n   Default_Bit_Order : constant Bit_Order := implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   -- Priority-related declarations (see D.1):\n   subtype Any_Priority is Integer range implementation-defined;\n   subtype Priority is Any_Priority range Any_Priority'First ..\n             implementation-defined;\n   subtype Interrupt_Priority is Any_Priority range Priority'Last+1 ..\n             Any_Priority'Last;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   Default_Priority : constant Priority :=\n             (Priority'First + Priority'Last)/2;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"private\n   ... -- not specified by the language\nend System;\n\n")),(0,i.kt)("p",null,"Name is an enumeration subtype. Values of type Name are the names of alternative machine configurations handled by the implementation. System_Name represents the current machine configuration."),(0,i.kt)("p",null,"The named numbers Fine_Delta and Tick are of the type universal_real; the others are of the type universal_integer."),(0,i.kt)("p",null,"The meanings of the named numbers are: "),(0,i.kt)("p",null,"[ Min_Int The smallest (most negative) value allowed for the expressions of a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0042"},"signed_integer_type_definition"),"."),(0,i.kt)("p",null,"Max_Int The largest (most positive) value allowed for the expressions of a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0042"},"signed_integer_type_definition"),"."),(0,i.kt)("p",null,"Max_Binary_Modulus A power of two such that it, and all lesser positive powers of two, are allowed as the modulus of a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0043"},"modular_type_definition"),"."),(0,i.kt)("p",null,"Max_Nonbinary_Modulus A value such that it, and all lesser positive integers, are allowed as the modulus of a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0043"},"modular_type_definition"),". "),(0,i.kt)("p",null,"Ramification: There is no requirement that Max_Nonbinary_Modulus be less than or equal to Max_Binary_Modulus, although that's what makes most sense. On a typical 32-bit machine, for example, Max_Binary_Modulus will be 2",(0,i.kt)("strong",{parentName:"p"},"32 and Max_Nonbinary_Modulus will be 2"),"31, because supporting nonbinary moduli in above 2**31 causes implementation difficulties. "),(0,i.kt)("p",null,"Max_Base_Digits The largest value allowed for the requested decimal precision in a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0045"},"floating_point_definition"),"."),(0,i.kt)("p",null,"Max_Digits The largest value allowed for the requested decimal precision in a ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0045"},"floating_point_definition")," that has no ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0046"},"real_range_specification"),". Max_Digits is less than or equal to Max_Base_Digits."),(0,i.kt)("p",null,"Max_Mantissa The largest possible number of binary digits in the mantissa of machine numbers of a user-defined ordinary fixed point type. (The mantissa is defined in Annex G.)"),(0,i.kt)("p",null,"Fine_Delta The smallest delta allowed in an ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0048"},"ordinary_fixed_point_definition")," that has the ",(0,i.kt)("a",{parentName:"p",href:"./AA-3.5#S0046"},"real_range_specification")," range 1.0 .. 1.0. ]"),(0,i.kt)("p",null,"Tick A period in seconds approximating the real time interval during which the value of Calendar.Clock remains constant. "),(0,i.kt)("p",null,"Ramification: There is no required relationship between System.Tick and Duration'Small, other than the one described here."),(0,i.kt)("p",null,"The inaccuracy of the ",(0,i.kt)("a",{parentName:"p",href:"./AA-9.6#S0266"},"delay_statement")," has no relation to Tick. In particular, it is possible that the clock used for the ",(0,i.kt)("a",{parentName:"p",href:"./AA-9.6#S0266"},"delay_statement")," is less accurate than Calendar.Clock."),(0,i.kt)("p",null,'We considered making Tick a run-time-determined quantity, to allow for easier configurability. However, this would not be upward compatible, and the desired configurability can be achieved using functionality defined in Annex D, "Real-Time Systems". '),(0,i.kt)("p",null,"Storage_Unit The number of bits per storage element."),(0,i.kt)("p",null,"Word_Size The number of bits per word."),(0,i.kt)("p",null,"Memory_Size An implementation-defined value ","[that is intended to reflect the memory size of the configuration in storage elements.]"," "),(0,i.kt)("p",null,'Discussion: It is unspecified whether this refers to the size of the address space, the amount of physical memory on the machine, or perhaps some other interpretation of "memory size". In any case, the value has to be given by a static expression, even though the amount of memory on many modern machines is a dynamic quantity in several ways. Thus, Memory_Size is not very useful. '),(0,i.kt)("p",null,"{AI95-00161-01} Address is a definite, nonlimited type with preelaborable initialization (see 10.2.1). Address represents machine addresses capable of addressing individual storage elements. Null_Address is an address that is distinct from the address of any object or program unit. "),(0,i.kt)("p",null,"Ramification: The implementation has to ensure that there is at least one address that nothing will be allocated to; Null_Address will be one such address. "),(0,i.kt)("p",null,"Ramification: Address is the type of the result of the attribute Address. "),(0,i.kt)("p",null,"Reason: Address is required to be nonlimited and definite because it is important to be able to assign addresses, and to declare uninitialized address variables. "),(0,i.kt)("p",null,"Ramification: {AI95-00161-01} {AI12-0417-1} If System.Address is defined as a private type (as suggested below), it might be necessary to add the Preelaborable_Initialization aspect to the declaration of Address in order that it have preelaborable initialization as required. "),(0,i.kt)("p",null,"{AI95-00221-01} Default_Bit_Order shall be a static constant. See 13.5.3 for an explanation of Bit_Order and Default_Bit_Order. "),(0,i.kt)("h4",{id:"implementation-permissions"},"Implementation Permissions"),(0,i.kt)("p",null,"{AI95-00362-01} An implementation may add additional implementation-defined declarations to package System and its children. ","[However, it is usually better for the implementation to provide additional functionality via implementation-defined children of System.]"," "),(0,i.kt)("p",null,'Ramification: The declarations in package System and its children can be implicit. For example, since Address is not limited, the predefined "=" and "/=" operations are probably sufficient. However, the implementation is not required to use the predefined "=". '),(0,i.kt)("h4",{id:"implementation-advice"},"Implementation Advice"),(0,i.kt)("p",null,"Address should be a private type. "),(0,i.kt)("p",null,"Reason: This promotes uniformity by avoiding having implementation-defined predefined operations for the type. We don't require it, because implementations may want to stick with what they have. "),(0,i.kt)("p",null,"Implementation Advice: Type System.Address should be a private type."),(0,i.kt)("p",null,"Implementation Note: It is not necessary for Address to be able to point at individual bits within a storage element. Nor is it necessary for it to be able to point at machine registers. It is intended as a memory address that matches the hardware's notion of an address."),(0,i.kt)("p",null,"The representation of the null value of a general access type should be the same as that of Null_Address; instantiations of Unchecked_Conversion should work accordingly. If the implementation supports interfaces to other languages, the representation of the null value of a general access type should be the same as in those other languages, if appropriate."),(0,i.kt)("p",null,"Note that the children of the Interfaces package will generally provide foreign-language-specific null values where appropriate. See UI-0065 regarding Null_Address. "),(0,i.kt)("p",null,"NOTE 1   There are also some language-defined child packages of System defined elsewhere. "),(0,i.kt)("h4",{id:"extensions-to-ada-83"},"Extensions to Ada 83"),(0,i.kt)("p",null,"The declarations Max_Binary_Modulus, Max_Nonbinary_Modulus, Max_Base_Digits, Null_Address, Word_Size, Bit_Order, Default_Bit_Order, Any_Priority, Interrupt_Priority, and Default_Priority are added to System in Ada 95. The presence of ordering operators for type Address is also guaranteed (the existence of these depends on the definition of Address in an Ada 83 implementation). We do not list these as incompatibilities, as the contents of System can vary between implementations anyway; thus a program that depends on the contents of System (by using use System; for example) is already at risk of being incompatible when moved between Ada implementations. "),(0,i.kt)("h4",{id:"wording-changes-from-ada-83"},"Wording Changes from Ada 83"),(0,i.kt)("p",null,"Much of the content of System is standardized, to provide more uniformity across implementations. Implementations can still add their own declarations to System, but are encouraged to do so via children of System."),(0,i.kt)("p",null,"Some of the named numbers are defined more explicitly in terms of the standard numeric types."),(0,i.kt)("p",null,"The pragmas System_Name, Storage_Unit, and Memory_Size are no longer defined by the language. However, the corresponding declarations in package System still exist. Existing implementations may continue to support the three pragmas as implementation-defined pragmas, if they so desire."),(0,i.kt)("p",null,"Priority semantics, including subtype Priority, have been moved to the Real Time Annex. "),(0,i.kt)("h4",{id:"extensions-to-ada-95"},"Extensions to Ada 95"),(0,i.kt)("p",null,"{AI95-00161-01} Amendment Correction: Type Address is defined to have preelaborable initialization, so that it can be used without restriction in preelaborated units. (If Address is defined to be a private type, as suggested by the Implementation Advice, in Ada 95 it cannot be used in some contexts in a preelaborated units. This is an unnecessary portability issue.)"),(0,i.kt)("p",null,"{AI95-00221-01} Amendment Correction: Default_Bit_Order is now a static constant."),(0,i.kt)("p",null,"{AI95-00362-01} Package System is now Pure, so it can be portably used in more places. (Ada 95 allowed it to be Pure, but did not require that.) "),(0,i.kt)("h2",{id:"1371--the-package-systemstorage_elements"},"13.7.1  The Package System.Storage_Elements"),(0,i.kt)("h4",{id:"static-semantics-1"},"Static Semantics"),(0,i.kt)("p",null,"The following language-defined library package exists: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI95-00362-01} {AI12-0399-1} package System.Storage_Elements\n   with Pure is\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   type Storage_Offset is range implementation-defined;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   subtype Storage_Count is Storage_Offset range 0..Storage_Offset'Last;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   type Storage_Element is mod implementation-defined;\n   for Storage_Element'Size use Storage_Unit;\n   type Storage_Array is array\n     (Storage_Offset range &lt&gt) of aliased Storage_Element;\n   for Storage_Array'Component_Size use Storage_Unit;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   -- Address Arithmetic:\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},'{AI05-0229-1}    function "+"(Left : Address; Right : Storage_Offset) return Address\n      with Convention =&gt Intrinsic;\n   function "+"(Left : Storage_Offset; Right : Address) return Address\n      with Convention =&gt Intrinsic;\n   function "-"(Left : Address; Right : Storage_Offset) return Address\n      with Convention =&gt Intrinsic;\n   function "-"(Left, Right : Address) return Storage_Offset\n      with Convention =&gt Intrinsic;\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},'{AI05-0229-1}    function "mod"(Left : Address; Right : Storage_Offset)\n      return Storage_Offset\n         with Convention =&gt Intrinsic;\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"   -- Conversion to/from integers:\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI05-0229-1}    type Integer_Address is implementation-defined;\n   function To_Address(Value : Integer_Address) return Address\n      with Convention =&gt Intrinsic;\n   function To_Integer(Value : Address) return Integer_Address\n      with Convention =&gt Intrinsic;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI05-0229-1} end System.Storage_Elements;\n\n")),(0,i.kt)("p",null,"Reason: {AI05-0229-1} The Convention aspects imply that the attribute Access is not allowed for those operations."),(0,i.kt)("p",null,"The mod function is needed so that the definition of Alignment makes sense. "),(0,i.kt)("p",null,"Implementation defined: The range of Storage_Elements.Storage_Offset, the modulus of Storage_Elements.Storage_Element, and the declaration of Storage_Elements.Integer_Address."),(0,i.kt)("p",null,"Storage_Element represents a storage element. Storage_Offset represents an offset in storage elements. Storage_Count represents a number of storage elements. Storage_Array represents a contiguous sequence of storage elements. "),(0,i.kt)("p",null,"Reason: The index subtype of Storage_Array is Storage_Offset because we wish to allow maximum flexibility. Most Storage_Arrays will probably have a lower bound of 0 or 1, but other lower bounds, including negative ones, make sense in some situations."),(0,i.kt)("p",null,"This paragraph was deleted.{AI95-00114-01} "),(0,i.kt)("p",null,"Integer_Address is a ","[(signed or modular)]"," integer subtype. To_Address and To_Integer convert back and forth between this type and Address. "),(0,i.kt)("h4",{id:"implementation-requirements"},"Implementation Requirements"),(0,i.kt)("p",null,"Storage_Offset'Last shall be greater than or equal to Integer'Last or the largest possible storage offset, whichever is smaller. Storage_Offset'First shall be ","<","= (Storage_Offset'Last). "),(0,i.kt)("p",null,"Paragraph 15 was deleted. "),(0,i.kt)("h4",{id:"implementation-advice-1"},"Implementation Advice"),(0,i.kt)("p",null,'Operations in System and its children should reflect the target environment semantics as closely as is reasonable. For example, on most machines, it makes sense for address arithmetic to "wrap around". Operations that do not make sense should raise Program_Error. '),(0,i.kt)("p",null,"Implementation Advice: Operations in System and its children should reflect the target environment; operations that do not make sense should raise Program_Error."),(0,i.kt)("p",null,"Discussion: For example, on a segmented architecture, X ","<"," Y might raise Program_Error if X and Y do not point at the same segment (assuming segments are unordered). Similarly, on a segmented architecture, the conversions between Integer_Address and Address might not make sense for some values, and so might raise Program_Error. "),(0,i.kt)("p",null,"Reason: We considered making Storage_Element a private type. However, it is better to declare it as a modular type in the visible part, since code that uses it is already low level, and might as well have access to the underlying representation. We also considered allowing Storage_Element to be any integer type, signed integer or modular, but it is better to have uniformity across implementations in this regard, and viewing storage elements as unsigned seemed to make the most sense. "),(0,i.kt)("p",null,"Implementation Note: To_Address is intended for use in Address clauses. Implementations should overload To_Address if appropriate. For example, on a segmented architecture, it might make sense to have a record type representing a segment/offset pair, and have a To_Address conversion that converts from that record type to type Address. "),(0,i.kt)("h4",{id:"extensions-to-ada-95-1"},"Extensions to Ada 95"),(0,i.kt)("p",null,"{AI95-00362-01} Package System.Storage_Elements is now Pure, so it can be portably used in more places. (Ada 95 allowed it to be Pure, but did not require that.) "),(0,i.kt)("h2",{id:"1372--the-package-systemaddress_to_access_conversions"},"13.7.2  The Package System.Address_To_Access_Conversions"),(0,i.kt)("h4",{id:"static-semantics-2"},"Static Semantics"),(0,i.kt)("p",null,"The following language-defined generic library package exists: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI12-0241-1} {AI12-0302-1} generic\n   type Object(&lt&gt) is limited private;\npackage System.Address_To_Access_Conversions \n   with Preelaborate, Nonblocking, Global =&gt in out synchronized is\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI05-0229-1}    type Object_Pointer is access all Object;\n   function To_Pointer(Value : Address) return Object_Pointer\n      with Convention =&gt Intrinsic;\n   function To_Address(Value : Object_Pointer) return Address\n      with Convention =&gt Intrinsic;\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ada"},"{AI05-0229-1} end System.Address_To_Access_Conversions;\n\n")),(0,i.kt)("p",null,"{AI95-00230-01} The To_Pointer and To_Address subprograms convert back and forth between values of types Object_Pointer and Address. To_Pointer(X'Address) is equal to X'Unchecked_Access for any X that allows Unchecked_Access. To_Pointer(Null_Address) returns null. For other addresses, the behavior is unspecified. To_Address(null) returns Null_Address. To_Address(Y), where Y /= null, returns Y.all'Address. "),(0,i.kt)("p",null,"Discussion: {AI95-00114-01} {AI05-0005-1} The programmer should ensure that the address passed to To_Pointer is either Null_Address, or the address of an object of type Object. (If Object is not a by-reference type, the object ought to be aliased; recall that the Address attribute is not required to provide a useful result for other objects.) Otherwise, the behavior of the program is unspecified; it might raise an exception or crash, for example. "),(0,i.kt)("p",null,"Reason: Unspecified is almost the same thing as erroneous; they both allow arbitrarily bad behavior. We don't say erroneous here, because the implementation might allow the address passed to To_Pointer to point at some memory that just happens to \"look like\" an object of type Object. That's not necessarily an error; it's just not portable. However, if the actual type passed to Object is (for example) an array type, the programmer would need to be aware of any dope that the implementation expects to exist, when passing an address that did not come from the Address attribute of an object of type Object."),(0,i.kt)("p",null,"One might wonder why To_Pointer and To_Address are any better than unchecked conversions. The answer is that Address does not necessarily have the same representation as an access type. For example, an access value might point at the bounds of an array when an address would point at the first element. Or an access value might be an offset in words from someplace, whereas an address might be an offset in bytes from the beginning of memory. "),(0,i.kt)("h4",{id:"implementation-permissions-1"},"Implementation Permissions"),(0,i.kt)("p",null,"An implementation may place restrictions on instantiations of Address_To_Access_Conversions. "),(0,i.kt)("p",null,"Ramification: For example, if the hardware requires aligned loads and stores, then dereferencing an access value that is not properly aligned might raise an exception."),(0,i.kt)("p",null,'For another example, if the implementation has chosen to use negative component offsets (from an access value), it might not be possible to preserve the semantics, since negative offsets from the Address are not allowed. (The Address attribute always points at "the first of the storage elements...".) Note that while the implementation knows how to convert an access value into an address, it might not be able to do the reverse. To avoid generic contract model violations, the restriction might have to be detected at run time in some cases.'))}p.isMDXComponent=!0}}]);