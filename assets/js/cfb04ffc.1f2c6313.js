"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[3526],{52641:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>g,default:()=>f,frontMatter:()=>p,metadata:()=>y,toc:()=>m});var s=r(91716),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&d(e,r,t[r]);if(n)for(var r of n(t))u.call(t,r)&&d(e,r,t[r]);return e};const p={title:"4. Program Structure",sidebar_position:4},g=void 0,y={unversionedId:"style-guide/s4/s4",id:"style-guide/s4/s4",title:"4. Program Structure",description:"Proper structure improves program clarity. This is analogous to",source:"@site/docs/style-guide/s4/s4.mdx",sourceDirName:"style-guide/s4",slug:"/style-guide/s4/",permalink:"/docs/style-guide/s4/",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"4. Program Structure",sidebar_position:4},sidebar:"styleGuideSidebar",previous:{title:"3.5 Summary",permalink:"/docs/style-guide/s3/05"},next:{title:"4.1 High-Level Structure",permalink:"/docs/style-guide/s4/01"}},b={},m=[],h={toc:m};function f(e){var t,r=e,{components:a}=r,d=((e,t)=>{var r={};for(var s in e)l.call(e,s)&&t.indexOf(s)<0&&(r[s]=e[s]);if(null!=e&&n)for(var s of n(e))t.indexOf(s)<0&&u.call(e,s)&&(r[s]=e[s]);return r})(r,["components"]);return(0,s.kt)("wrapper",(t=c(c({},h),d),i(t,o({components:a,mdxType:"MDXLayout"}))),(0,s.kt)("p",null,"Proper structure improves program clarity. This is analogous to\nreadability on lower levels and facilitates the use of the readability\nguidelines (Chapter 3). The various program structuring facilities\nprovided by Ada were designed to enhance overall clarity of design.\nThese guidelines show how to use these facilities for their intended\npurposes."),(0,s.kt)("p",null,"The concept of child packages supports the concept of subsystem, where a\nsubsystem is represented in Ada as a hierarchy of library units. In\ngeneral, a large system should be structured as a series of subsystems.\nSubsystems should be used to represent logically related library units,\nwhich together implement a single, high-level abstraction or framework."),(0,s.kt)("p",null,"Abstraction and encapsulation are supported by the package concept and\nby private types. Related data and subprograms can be grouped together\nand seen by a higher level as a single entity. Information hiding is\nenforced via strong typing and by the separation of package and\nsubprogram specifications from their bodies. Exceptions and tasks are\nadditional Ada language elements that impact program structure."))}f.isMDXComponent=!0}}]);