"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[5133],{3262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>A,default:()=>Z,frontMatter:()=>y,metadata:()=>g,toc:()=>T});var a=n(1716),i=n(3050),o=n(3989),r=n(8604),s=n(7318),l=n(4768),d=Object.defineProperty,c=Object.defineProperties,p=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable,h=(e,t,n)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,x=(e,t)=>{for(var n in t||(t={}))u.call(t,n)&&h(e,n,t[n]);if(m)for(var n of m(t))k.call(t,n)&&h(e,n,t[n]);return e};const y={sidebar_position:92},A="11.4 Exception Handling",g={unversionedId:"arm/AA-11/AA-11.4",id:"arm/AA-11/AA-11.4",title:"11.4 Exception Handling",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-11/AA-11.4.mdx",sourceDirName:"arm/AA-11",slug:"/arm/AA-11/AA-11.4",permalink:"/docs/arm/AA-11/AA-11.4",draft:!1,tags:[],version:"current",sidebarPosition:92,frontMatter:{sidebar_position:92},sidebar:"referenceManualSidebar",previous:{title:"11.3 Raise Statements and Raise Expressions",permalink:"/docs/arm/AA-11/AA-11.3"},next:{title:"11.5 Suppressing Checks",permalink:"/docs/arm/AA-11/AA-11.5"}},f={},T=[{value:"Dynamic Semantics",id:"dynamic-semantics",level:4},{value:"11.4.1  The Package Exceptions",id:"1141--the-package-exceptions",level:2},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Implementation Permissions",id:"implementation-permissions",level:4},{value:"Implementation Advice",id:"implementation-advice",level:4},{value:"Extensions to Ada 83",id:"extensions-to-ada-83",level:4},{value:"Inconsistencies With Ada 95",id:"inconsistencies-with-ada-95",level:4},{value:"Incompatibilities With Ada 95",id:"incompatibilities-with-ada-95",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4},{value:"Wording Changes from Ada 2005",id:"wording-changes-from-ada-2005",level:4},{value:"11.4.2  Pragmas Assert and Assertion_Policy",id:"1142--pragmas-assert-and-assertion_policy",level:2},{value:"Syntax",id:"syntax",level:4},{value:"Name Resolution Rules",id:"name-resolution-rules",level:4},{value:"Legality Rules",id:"legality-rules",level:4},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"Dynamic Semantics",id:"dynamic-semantics-1",level:4},{value:"Bounded (Run-Time) Errors",id:"bounded-run-time-errors",level:4},{value:"Implementation Requirements",id:"implementation-requirements",level:4},{value:"Implementation Permissions",id:"implementation-permissions-1",level:4},{value:"Language Design Principles",id:"language-design-principles",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95-1",level:4},{value:"Incompatibilities With Ada 2005",id:"incompatibilities-with-ada-2005",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012",level:4},{value:"11.4.3  Example of Exception Handling",id:"1143--example-of-exception-handling",level:2},{value:"Examples",id:"examples",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4}],b={toc:T};function Z(e){var t,n=e,{components:d}=n,h=((e,t)=>{var n={};for(var a in e)u.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&m)for(var a of m(e))t.indexOf(a)<0&&k.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=x(x({},b),h),c(t,p({components:d,mdxType:"MDXLayout"}))),(0,a.kt)("h1",x({},{id:"114-exception-handling"}),"11.4 Exception Handling"),(0,a.kt)("admonition",x({},{type:"warning"}),(0,a.kt)("p",{parentName:"admonition"},"This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,a.kt)("a",x({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"1"),(0,a.kt)("p",null,"[When an exception occurrence is raised, normal program execution is abandoned and control is transferred to an applicable ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.2#S0305"},"exception_handler")),", if any. To ",(0,a.kt)("em",null,"handle")," an exception occurrence is to respond to the exceptional event. To ",(0,a.kt)("em",null,"propagate")," an exception occurrence is to raise it again in another context; that is, to fail to respond to the exceptional event in the present context.] ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"In other words, if the execution of a given construct raises an exception, but does not handle it, the exception is propagated to an enclosing execution (except in the case of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-9/AA-9.1#S0248"},"task_body")),").",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.b/1"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Propagation involves re-raising the same exception occurrence. For example, calling an entry of an uncallable task raises Tasking_Error; this is not propagation. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"dynamic-semantics"}),"Dynamic Semantics"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"2"),(0,a.kt)("p",null,"Within a given task, if the execution of construct ",(0,a.kt)("em",null,"a")," is defined by this document to consist (in part) of the execution of construct ",(0,a.kt)("em",null,"b"),", then while ",(0,a.kt)("em",null,"b")," is executing, the execution of ",(0,a.kt)("em",null,"a")," is said to ",(0,a.kt)("em",null,"dynamically enclose")," the execution of ",(0,a.kt)("em",null,"b"),". The ",(0,a.kt)("em",null,"innermost dynamically enclosing")," execution of a given execution is the dynamically enclosing execution that started most recently. ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"2.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"To be honest: "),"If the execution of ",(0,a.kt)("em",null,"a")," dynamically encloses that of ",(0,a.kt)("em",null,"b"),", then we also say that the execution of ",(0,a.kt)("em",null,"b")," is ",(0,a.kt)("em",null,"included in")," the execution of ",(0,a.kt)("em",null,"a"),". ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"2.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"Examples: The execution of an ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.3#S0175"},"if_statement"))," dynamically encloses the evaluation of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.5#S0150"},"condition"))," after the ",(0,a.kt)("strong",null,"if")," (during that evaluation). (Recall that \u201cexecution\u201d includes both \u201celaboration\u201d and \u201cevaluation\u201d, as well as other executions.) The evaluation of a function call dynamically encloses the execution of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," of the function ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.11#S0089"},"body"))," (during that execution). Note that, due to recursion, several simultaneous executions of the same construct can be occurring at once during the execution of a particular task.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"2.c"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Dynamically enclosing is not defined across task boundaries; a task's execution does not include the execution of any other tasks.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"2.d"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Dynamically enclosing is only defined for executions that are occurring at a given moment in time; if an ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.3#S0175"},"if_statement"))," is currently executing the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," after ",(0,a.kt)("strong",null,"then"),", then the evaluation of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.5#S0150"},"condition"))," is no longer dynamically enclosed by the execution of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.3#S0175"},"if_statement"))," (or anything else). ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"3"),(0,a.kt)("p",null,"When an exception occurrence is raised by the execution of a given construct, the rest of the execution of that construct is ",(0,a.kt)("em",null,"abandoned"),"; that is, any portions of the execution that have not yet taken place are not performed. The construct is first completed, and then left, as explained in ",(0,a.kt)("a",{href:"../AA-7/AA-7.6#Subclause_7.6.1"},"7.6.1"),". Then: ",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"4"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"If the construct is a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-9/AA-9.1#S0248"},"task_body")),", the exception does not propagate further; ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"4.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"When an exception is raised by the execution of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-9/AA-9.1#S0248"},"task_body")),", there is no dynamically enclosing execution, so the exception does not propagate any further. If the exception occurred during the activation of the task, then the activator raises Tasking_Error, as explained in ",(0,a.kt)("a",{href:"../AA-9/AA-9.2"},"9.2"),", \u201c",(0,a.kt)("a",{href:"../AA-9/AA-9.2"},"Task Execution - Task Activation"),"\u201d, but we don't define that as propagation; it's a special rule. Otherwise (the exception occurred during the execution of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.2#S0304"},"handled_sequence_of_statements"))," of the task), the task silently disappears. Thus, abnormal termination of tasks is not always considered to be an error. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"5"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"If the construct is the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.2#S0304"},"handled_sequence_of_statements"))," that has a handler with a choice covering the exception, the occurrence is handled by that handler;",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"6"),(0,a.kt)("li",null,"Otherwise, the occurrence is ",(0,a.kt)("em",null,"propagated")," to the innermost dynamically enclosing execution, which means that the occurrence is raised again in that context. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"6.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"To be honest: "),"As shorthands, we refer to the ",(0,a.kt)("em",null,"propagation of an exception"),", and the ",(0,a.kt)("em",null,"propagation by a construct"),", if the execution of the construct propagates an exception occurrence. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"7"),(0,a.kt)("p",null,"When an occurrence is ",(0,a.kt)("em",null,"handled")," by a given handler, the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.2#S0306"},"choice_parameter_specification")),", if any, is first elaborated, which creates the choice parameter and initializes it to the occurrence. Then, the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements"))," of the handler is executed; this execution replaces the abandoned portion of the execution of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0166"},"sequence_of_statements")),". ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"7.a/2"),(0,a.kt)(l.Z,{items:["AI95-00318-02"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"This \u201creplacement\u201d semantics implies that the handler can do pretty much anything the abandoned sequence could do; for example, in a function, the handler can execute a return statement that applies to the function. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"7.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The rules for exceptions raised in library units, main subprograms and partitions follow from the normal rules, plus the semantics of the environment task described in Clause ",(0,a.kt)("a",{href:"../AA-10/"},"10")," (for example, the environment task of a partition elaborates library units and calls the main subprogram). If an exception is propagated by the main subprogram, it is propagated to the environment task, which then terminates abnormally, causing the partition to terminate abnormally. Although abnormal termination of tasks is not necessarily an error, abnormal termination of a partition due to an exception ",(0,a.kt)("em",null,"is")," an error. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"8"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"9"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE 1   Note that exceptions raised in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part"))," of a body are not handled by the handlers of the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.2#S0304"},"handled_sequence_of_statements"))," of that body. ",(0,a.kt)("br",null))),(0,a.kt)("a",{id:"Subclause_11.4.1"}),(0,a.kt)("h2",x({},{id:"1141--the-package-exceptions"}),"11.4.1  The Package Exceptions"),(0,a.kt)("h4",x({},{id:"static-semantics"}),"Static Semantics"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"1"),(0,a.kt)("p",null,"The following language-defined library package exists: ",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"2/5"),(0,a.kt)(l.Z,{items:["AI95-00362-01","AI95-00400-01","AI95-00438-01","AI12-0241-1","AI12-0302-1","AI12-0399-1"],mdxType:"MarginInfo"}),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"with Ada.Streams;","\n","package Ada.Exceptions  ","\n","    with  Preelaborate, Nonblocking, Global =",">"," in out synchronized is ","\n","    type Exception_Id is private ","\n","        with  Preelaborable_Initialization ;","\n","    Null_Id : constant Exception_Id;","\n","    function Exception_Name(Id : Exception_Id) return String;","\n","    function Wide_Exception_Name(Id : Exception_Id) return Wide_String;","\n","    function Wide_Wide_Exception_Name(Id : Exception_Id)","\n","        return Wide_Wide_String;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"3/5"),(0,a.kt)(l.Z,{items:["AI95-00362-01","AI12-0399-1"],mdxType:"MarginInfo"}),"type Exception_Occurrence is limited private ","\n","        with  Preelaborable_Initialization ;","\n","    type Exception_Occurrence_Access is access all Exception_Occurrence;","\n","    Null_Occurrence : constant Exception_Occurrence;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"4/3"),(0,a.kt)(l.Z,{items:["AI95-00329-01","AI05-0229-1"],mdxType:"MarginInfo"}),"procedure Raise_Exception(E : in Exception_Id;","\n",'                              Message : in String := "")',"\n","        with No_Return;","\n","    function Exception_Message(X : Exception_Occurrence) return String;","\n","    procedure Reraise_Occurrence(X : in Exception_Occurrence);","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"5/2"),(0,a.kt)(l.Z,{items:["AI95-00400-01"],mdxType:"MarginInfo"}),"function Exception_Identity(X : Exception_Occurrence)","\n","                                return Exception_Id;","\n","    function Exception_Name(X : Exception_Occurrence) return String;","\n","        -- Same as Exception_Name(Exception_Identity(X)).","\n","    function Wide_Exception_Name(X : Exception_Occurrence)","\n","        return Wide_String;","\n","        -- Same as Wide_Exception_Name(Exception_Identity(X)).","\n","    function Wide_Wide_Exception_Name(X : Exception_Occurrence)","\n","        return Wide_Wide_String;","\n","        -- Same as Wide_Wide_Exception_Name(Exception_Identity(X)).","\n","    function Exception_Information(X : Exception_Occurrence) return String;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"6/2"),(0,a.kt)(l.Z,{items:["AI95-00438-01"],mdxType:"MarginInfo"}),"procedure Save_Occurrence(Target : out Exception_Occurrence;","\n","                              Source : in Exception_Occurrence);","\n","    function Save_Occurrence(Source : Exception_Occurrence)","\n","                             return Exception_Occurrence_Access;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"6.1/2"),(0,a.kt)(l.Z,{items:["AI95-00438-01"],mdxType:"MarginInfo"}),"procedure Read_Exception_Occurrence","\n","       (Stream : not null access Ada.Streams.Root_Stream_Type'Class;","\n","        Item   : out Exception_Occurrence);","\n","    procedure Write_Exception_Occurrence","\n","       (Stream : not null access Ada.Streams.Root_Stream_Type'Class;","\n","        Item   : in Exception_Occurrence);","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"6.2/2"),(0,a.kt)(l.Z,{items:["AI95-00438-01"],mdxType:"MarginInfo"}),"for Exception_Occurrence'Read use Read_Exception_Occurrence;","\n","    for Exception_Occurrence'Write use Write_Exception_Occurrence;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"6.3/2"),(0,a.kt)(l.Z,{items:["AI95-00438-01"],mdxType:"MarginInfo"}),"private","\n","   ... -- not specified by the language","\n","end Ada.Exceptions;","\n"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"7"),(0,a.kt)("p",null,"Each distinct exception is represented by a distinct value of type Exception_Id. Null_Id does not represent any exception, and is the default initial value of type Exception_Id. Each occurrence of an exception is represented by a value of type Exception_Occurrence. Null_Occurrence does not represent any exception occurrence, and is the default initial value of type Exception_Occurrence.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"8/1"),(0,a.kt)("p",null,"For a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0093"},"prefix"))," E that denotes an exception, the following attribute is defined: ",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"9"),(0,a.kt)("dt",null,(0,a.kt)("br",null),"E'Identity"),(0,a.kt)("dl",null,(0,a.kt)("dd",null,"E'Identity returns the unique identity of the exception. The type of this attribute is Exception_Id. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"9.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"In a distributed program, the identity is unique across an entire program, not just across a single partition. Exception propagation works properly across RPC's. An exception can be propagated from one partition to another, and then back to the first, where its identity is known. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"10/2"),(0,a.kt)(l.Z,{items:["AI95-00361-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Raise_Exception raises a new occurrence of the identified exception.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.1/4"),(0,a.kt)(l.Z,{items:["AI95-00361-01","AI95-00378-01","AI05-0043-1","AI05-0248-1","AI12-0022-1","AI12-0152-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Exception_Message returns the message associated with the given Exception_Occurrence. For an occurrence raised by a call to Raise_Exception, the message is the Message parameter passed to Raise_Exception. For the occurrence raised by a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0308"},"raise_statement"))," or ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0309"},"raise_expression"))," with an ",(0,a.kt)("em",null,"exception_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," and a ",(0,a.kt)("em",null,"string_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0132"},"expression"))," or ",(0,a.kt)("em",null,"string_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0138"},"simple_expression")),", the message is the ",(0,a.kt)("em",null,"string_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0132"},"expression"))," or ",(0,a.kt)("em",null,"string_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0138"},"simple_expression")),". For the occurrence raised by a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0308"},"raise_statement"))," or ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0309"},"raise_expression"))," with an ",(0,a.kt)("em",null,"exception_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name"))," but without a ",(0,a.kt)("em",null,"string_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0132"},"expression"))," or ",(0,a.kt)("em",null,"string_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0138"},"simple_expression")),", the message is a string giving implementation-defined information about the exception occurrence. For an occurrence originally raised in some other manner (including by the failure of a language-defined check), the message is an unspecified string. In all cases, Exception_Message returns a string with lower bound 1. ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-defined",mdxType:"Admonition"},(0,a.kt)("strong",null),"The information returned by Exception_Message.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.a.1/3"),(0,a.kt)(l.Z,{items:["AI05-0043-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",mdxType:"Admonition"},(0,a.kt)("strong",null),"There is  about the contents of this string for language-defined checks. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"Given an exception E, the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0308"},"raise_statement")),": ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.c"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"raise E;","\n")),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.d"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"is equivalent to this call to Raise_Exception: ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.e"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"Raise_Exception(E'Identity, Message =",">"," implementation-defined-string);","\n")),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.e.1/2"),(0,a.kt)(l.Z,{items:["AI95-00361-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Similarly, the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0308"},"raise_statement")),": ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.e.2/2"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},'raise E with "some information";',"\n")),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.e.3/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"is equivalent to this call to Raise_Exception: ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.e.4/2"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"Raise_Exception(E'Identity, Message =",">",' "some information");',"\n")),(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.2/2"),(0,a.kt)(l.Z,{items:["AI95-00361-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Reraise_Occurrence reraises the specified exception occurrence.",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.f"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The following handler: ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.g"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"when others =",">","\n","    Cleanup;","\n","    raise;","\n")),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.h"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"is equivalent to this one: ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.i"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"when X : others =",">","\n","    Cleanup;","\n","    Reraise_Occurrence(X);","\n")),(0,a.kt)(s.Z,{mdxType:"MarginText"},"11"),(0,a.kt)("p",null,"Exception_Identity returns the identity of the exception of the occurrence.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"12/2"),(0,a.kt)(l.Z,{items:["AI95-00400-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The Wide_Wide_Exception_Name functions return the full expanded name of the exception, in upper case, starting with a root library unit. For an exception declared immediately within package Standard, the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.1#S0022"},"defining_identifier"))," is returned. The result is implementation defined if the exception is declared within an unnamed ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement")),". ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"12.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"See the Implementation Permission below. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"12.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"To be honest: "),"This name, as well as each ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0093"},"prefix"))," of it, does not denote a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-8/AA-8.5#S0238"},"renaming_declaration")),". ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"12.c/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-defined",mdxType:"Admonition"},(0,a.kt)("strong",null),"The result of Exceptions.Wide_Wide_Exception_Name for exceptions declared within an unnamed ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.6#S0191"},"block_statement")),".",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"12.d"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"Note that we're talking about the name of the exception, not the name of the occurrence. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"12.1/2"),(0,a.kt)(l.Z,{items:["AI95-00400-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The Exception_Name functions (respectively, Wide_Exception_Name) return the same sequence of graphic characters as that defined for Wide_Wide_Exception_Name, if all the graphic characters are defined in Character (respectively, Wide_Character); otherwise, the sequence of characters is implementation defined, but no shorter than that returned by Wide_Wide_Exception_Name for the same value of the argument. ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"12.e/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-defined",mdxType:"Admonition"},(0,a.kt)("strong",null),"The sequence of characters of the value returned by Exceptions.Exception_Name (respectively, Exceptions.Wide_Exception_Name) when some of the graphic characters of Exceptions.Wide_Wide_Exception_Name are not defined in Character (respectively, Wide_Character).",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"12.2/2"),(0,a.kt)(l.Z,{items:["AI95-00378-01","AI95-00417-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The string returned by the Exception_Name, Wide_Exception_Name, and Wide_Wide_Exception_Name functions has lower bound 1.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"13/2"),(0,a.kt)(l.Z,{items:["AI95-00378-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Exception_Information returns implementation-defined information about the exception occurrence. The returned string has lower bound 1. ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"13.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-defined",mdxType:"Admonition"},(0,a.kt)("strong",null),"The information returned by Exception_Information.",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"14/2"),(0,a.kt)(l.Z,{items:["AI95-00241-01","AI95-00446-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Reraise_Occurrence has no effect in the case of Null_Occurrence. Raise_Exception and Exception_Name raise Constraint_Error for a Null_Id. Exception_Message, Exception_Name, and Exception_Information raise Constraint_Error for a Null_Occurrence. Exception_Identity applied to Null_Occurrence returns Null_Id.",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"14.a.1/2"),(0,a.kt)(l.Z,{items:["AI95-00241-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"Null_Occurrence can be tested for by comparing Exception_Identity(Occurrence) to Null_Id. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"14.a.2/2"),(0,a.kt)(l.Z,{items:["AI95-00446-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"discussion",mdxType:"Admonition"},(0,a.kt)("strong",null),"Raise_Exception was changed so that it always raises an exception and thus can be a No_Return procedure. A similar change was not made for Reraise_Occurrence, as doing so was determined to be a significant incompatibility. It is not unusual to pass an Exception_Occurrence to other code to delay raising it. If there was no exception, passing Null_Occurrence works fine (nothing is raised). Moreover, as there is no test for Null_Occurrence in Ada 95, this is the only way to write such code without using additional flags. Breaking this sort of code is unacceptable. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"15"),(0,a.kt)("p",null,"The Save_Occurrence procedure copies the Source to the Target. The Save_Occurrence function uses an ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.8#S0164"},"allocator"))," of type Exception_Occurrence_Access to create a new object, copies the Source to this new object, and returns an access value designating this new object; [the result may be deallocated using an instance of Unchecked_Deallocation.] ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"15.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"It's OK to pass Null_Occurrence to the Save_Occurrence subprograms; they don't raise an exception, but simply save the Null_Occurrence. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"15.1/2"),(0,a.kt)(l.Z,{items:["AI95-00438-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Write_Exception_Occurrence writes a representation of an exception occurrence to a stream; Read_Exception_Occurrence reconstructs an exception occurrence from a stream (including one written in a different partition). ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"15.b/5"),(0,a.kt)(l.Z,{items:["AI12-0005-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"These  routines are used to define the stream attributes (see ",(0,a.kt)("a",{href:"../AA-13/AA-13.13#Subclause_13.13.2"},"13.13.2"),") for Exception_Occurrence.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"15.c/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The identity of the exception, as well as the Exception_Name and Exception_Message, have to be preserved across partitions.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"15.d/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The string returned by Exception_Name or Exception_Message on the result of calling the Read attribute on a given stream has to be the same as the value returned by calling the corresponding function on the exception occurrence that was written into the stream with the Write attribute. The string returned by Exception_Information need not be the same, since it is implementation defined anyway. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"15.e/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"This is important for supporting writing exception occurrences to external files for post-mortem analysis, as well as propagating exceptions across remote subprogram calls in a distributed system (see ",(0,a.kt)("a",{href:"../AA-E/AA-E.4"},"E.4"),"). ",(0,a.kt)("br",null))),(0,a.kt)("p",null,(0,a.kt)("em",null,"Paragraph 16 was deleted.")," ",(0,a.kt)("br",null)),(0,a.kt)("h4",x({},{id:"implementation-permissions"}),"Implementation Permissions"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"17"),(0,a.kt)("p",null,"An implementation of Exception_Name in a space-constrained environment may return the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.1#S0022"},"defining_identifier"))," instead of the full expanded name.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"18"),(0,a.kt)("p",null,"The string returned by Exception_Message may be truncated (to no less than 200 characters) by the Save_Occurrence procedure [(not the function)], the Reraise_Occurrence procedure, and the re-raise statement. ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"18.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"The reason for allowing truncation is to ease implementations. The reason for choosing the number 200 is that this is the minimum source line length that implementations have to support, and this feature seems vaguely related since it's usually a \u201cone-liner\u201d. Note that an implementation is allowed to do this truncation even if it supports arbitrarily long lines. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"implementation-advice"}),"Implementation Advice"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"19"),(0,a.kt)("p",null,"Exception_Message (by default) and Exception_Information should produce information useful for debugging. Exception_Message should be short (about one line), whereas Exception_Information can be long. Exception_Message should not include the Exception_Name. Exception_Information should include both the Exception_Name and the Exception_Message.",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.a.1/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",mdxType:"Admonition"},(0,a.kt)("strong",null),"Exception_Information should provide information useful for debugging, and should include the Exception_Name and Exception_Message.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.a.2/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-advice",mdxType:"Admonition"},(0,a.kt)("strong",null),"Exception_Message by default should be short, provide information useful for debugging, and should not include the Exception_Name.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"It may seem strange to define two subprograms whose semantics is implementation defined. The idea is that a program can print out debugging/error-logging information in a portable way. The program is portable in the sense that it will work in any implementation; it might print out different information, but the presumption is that the information printed out is appropriate for debugging/error analysis on that system. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.b"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-note",mdxType:"Admonition"},(0,a.kt)("strong",null),"As an example, Exception_Information might include information identifying the location where the exception occurred, and, for predefined exceptions, the specific kind of language-defined check that failed. There is an implementation trade-off here, between how much information is represented in an Exception_Occurrence, and how much can be passed through a re-raise.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.c"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The string returned should be in a form suitable for printing to an error log file. This means that it might need to contain line-termination control characters with implementation-defined I/O semantics. The string should neither start nor end with a newline.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.d"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"If an implementation chooses to provide additional functionality related to exceptions and their occurrences, it should do so by providing one or more children of Ada.Exceptions.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.e"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Note that exceptions behave as if declared at library level; there is no \u201cnatural scope\u201d for an exception; an exception always exists. Hence, there is no harm in saving an exception occurrence in a data structure, and reraising it later. The reraise has to occur as part of the same program execution, so saving an exception occurrence in a file, reading it back in from a different program execution, and then reraising it is not required to work. This is similar to I/O of access types. Note that it is possible to use RPC to propagate exceptions across partitions.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.f"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Here's one way to implement Exception_Occurrence in the private part of the package. Using this method, an implementation need store only the actual number of characters in exception messages. If the user always uses small messages, then exception occurrences can be small. If the user never uses messages, then exception occurrences can be smaller still: ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.g"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"type Exception_Occurrence(Message_Length : Natural := 200) is","\n","    limited record","\n","        Id : Exception_Id;","\n","        Message : String(1..Message_Length);","\n","    end record;","\n")),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.h"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"At the point where an exception is raised, an Exception_Occurrence can be allocated on the stack with exactly the right amount of space for the message \u2014 none for an empty message. This is just like declaring a constrained object of the type: ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.i"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"Temp : Exception_Occurrence(10); -- for a 10-character message","\n")),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.j"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"After finding the appropriate handler, the stack can be cut back, and the Temp copied to the right place. This is similar to returning an unknown-sized object from a function. It is not necessary to allocate the maximum possible size for every Exception_Occurrence. If, however, the user declares an Exception_Occurrence object, the discriminant will be permanently set to 200. The Save_Occurrence procedure would then truncate the Exception_Message. Thus, nothing is lost until the user tries to save the occurrence. If the user is willing to pay the cost of heap allocation, the Save_Occurrence function can be used instead.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.k"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Note that any arbitrary-sized implementation-defined Exception_Information can be handled in a similar way. For example, if the Exception_Occurrence includes a stack traceback, a discriminant can control the number of stack frames stored. The traceback would be truncated or entirely deleted by the Save_Occurrence procedure \u2014 as the implementation sees fit.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.l"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"If the internal representation involves pointers to data structures that might disappear, it would behoove the implementation to implement it as a controlled type, so that assignment can either copy the data structures or else null out the pointers. Alternatively, if the data structures being pointed at are in a task control block, the implementation could keep a unique sequence number for each task, so it could tell when a task's data structures no longer exist.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.m"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Using the above method, heap space is never allocated unless the user calls the Save_Occurrence function.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.n"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"An alternative implementation would be to store the message strings on the heap when the exception is raised. (It could be the global heap, or it could be a special heap just for this purpose \u2014 it doesn't matter.)  This representation would be used only for choice parameters. For normal user-defined exception occurrences, the Save_Occurrence procedure would copy the message string into the occurrence itself, truncating as necessary. Thus, in this implementation, Exception_Occurrence would be implemented as a variant record: ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.o"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"type Exception_Occurrence_Kind is (Normal, As_Choice_Param);","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.p"),"type Exception_Occurrence(Kind : Exception_Occurrence_Kind := Normal) is","\n","    limited record","\n","        case Kind is","\n","            when Normal =",">","\n","                ... -- space for 200 characters","\n","            when As_Choice_Param =",">","\n","                ... -- pointer to heap string","\n","        end case;","\n","    end record;","\n")),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.q"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Exception_Occurrences created by the run-time system during exception raising would be As_Choice_Param. User-declared ones would be Normal \u2014 the user cannot see the discriminant, and so cannot set it to As_Choice_Param. The strings in the heap would be freed upon completion of the handler.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.r"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"This alternative implementation corresponds to a heap-based implementation of functions returning unknown-sized results.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.s"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"One possible implementation of Reraise_Occurrence is as follows: ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.t"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"procedure Reraise_Occurrence(X : in Exception_Occurrence) is","\n","begin","\n","    Raise_Exception(Identity(X), Exception_Message(X));","\n","end Reraise_Occurrence;","\n")),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.u"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"However, some implementations may wish to retain more information across a re-raise \u2014 a stack traceback, for example. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.v"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"Note that Exception_Occurrence is a definite subtype. Hence, values of type Exception_Occurrence may be written to an error log for later analysis, or may be passed to subprograms for immediate error analysis. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"19.w/2"),(0,a.kt)(l.Z,{items:["AI95-00400-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("em",null,"This paragraph was deleted."),(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20/5"),(0,a.kt)(l.Z,{items:["AI12-0021-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE 1   UTF-8 encoding (see ",(0,a.kt)("a",{href:"../AA-A/AA-A.4#Subclause_A.4.11"},"A.4.11"),") can be used to represent non-ASCII characters in exception messages. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"extensions-to-ada-83"}),"Extensions to Ada 83"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.a"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The Identity attribute of exceptions is new, as is the package Exceptions. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"inconsistencies-with-ada-95"}),"Inconsistencies With Ada 95"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.b/2"),(0,a.kt)(l.Z,{items:["AI95-00241-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"correction",mdxType:"Admonition"},(0,a.kt)("strong",null,"Amendment ")," Exception_Identity of an Exception_Occurrence now is defined to return Null_Id for Null_Occurrence, rather than raising Constraint_Error. This provides a simple way to test for Null_Occurrence. We expect that programs that need Constraint_Error raised will be very rare; they can be easily fixed by explicitly testing for Null_Id or by using Exception_Name instead.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.c/2"),(0,a.kt)(l.Z,{items:["AI95-00378-01","AI95-00417-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"correction",mdxType:"Admonition"},(0,a.kt)("strong",null,"Amendment ")," We now define the lower bound of the string returned from [[Wide_]Wide_]Exception_Name, Exception_Message, and Exception_Information. This makes working with the returned string easier, and is consistent with many other string-returning functions in Ada. This is technically an inconsistency; if a program depended on some other lower bound for the string returned from one of these functions, it could fail when compiled with Ada 2005. Such code is not portable even between Ada 95 implementations, so it should be very rare.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.d/2"),(0,a.kt)(l.Z,{items:["AI95-00446-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"correction",mdxType:"Admonition"},(0,a.kt)("strong",null,"Amendment ")," Raise_Exception now raises Constraint_Error if passed Null_Id. This means that it always raises an exception, and thus we can apply pragma No_Return to it. We expect that programs that call Raise_Exception with Null_Id will be rare, and programs that do that and expect no exception to be raised will be rarer; such programs can be easily fixed by explicitly testing for Null_Id before calling Raise_Exception. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"incompatibilities-with-ada-95"}),"Incompatibilities With Ada 95"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.e/3"),(0,a.kt)(l.Z,{items:["AI95-00400-01","AI95-00438-01","AI05-0005-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Functions Wide_Exception_Name and Wide_Wide_Exception_Name, and procedures Read_Exception_Occurrence and Write_Exception_Occurrence are added to Exceptions. If Exceptions is referenced in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-8/AA-8.4#S0235"},"use_clause")),", and an entity ",(0,a.kt)("em",null,"E")," with the same ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.1#S0022"},"defining_identifier"))," as a new entity in Exceptions is defined in a package that is also referenced in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-8/AA-8.4#S0235"},"use_clause")),", the entity ",(0,a.kt)("em",null,"E")," may no longer be use-visible, resulting in errors. This should be rare and is easily fixed if it does occur. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"extensions-to-ada-95"}),"Extensions to Ada 95"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.f/2"),(0,a.kt)(l.Z,{items:["AI95-00362-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The package Exceptions is preelaborated, and types Exception_Id and Exception_Occurrence have preelaborable initialization, allowing this package to be used in preelaborated units. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"wording-changes-from-ada-95"}),"Wording Changes from Ada 95"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.g/2"),(0,a.kt)(l.Z,{items:["AI95-00361-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The meaning of Exception_Message is reworded to reflect that the string can come from a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0308"},"raise_statement"))," as well as a call of Raise_Exception.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.h/2"),(0,a.kt)(l.Z,{items:["AI95-00400-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Added Wide_Exception_Name and Wide_Wide_Exception_Name because identifiers can now contain characters outside of Latin-1. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"wording-changes-from-ada-2005"}),"Wording Changes from Ada 2005"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"20.i/3"),(0,a.kt)(l.Z,{items:["AI05-0043-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"correction",mdxType:"Admonition"},(0,a.kt)("strong",null)," Added explicit wording that the exception message for language-defined checks is unspecified. The old wording appeared inclusive, but it was not. ",(0,a.kt)("br",null))),(0,a.kt)("a",{id:"Subclause_11.4.2"}),(0,a.kt)("h2",x({},{id:"1142--pragmas-assert-and-assertion_policy"}),"11.4.2  Pragmas Assert and Assertion_Policy"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"1/3"),(0,a.kt)(l.Z,{items:["AI95-00286-01","AI05-0274-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Pragma Assert is used to assert the truth of a boolean expression at a point within a sequence of declarations or statements.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.1/5"),(0,a.kt)(l.Z,{items:["AI05-0274-1","AI12-0265-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Assert pragmas, subtype predicates (see ",(0,a.kt)("a",{href:"../AA-3/AA-3.2#Subclause_3.2.4"},"3.2.4"),"), preconditions and postconditions (see ",(0,a.kt)("a",{href:"../AA-6/AA-6.1#Subclause_6.1.1"},"6.1.1"),"),  type invariants (see ",(0,a.kt)("a",{href:"../AA-7/AA-7.3#Subclause_7.3.2"},"7.3.2"),"), and default initial conditions (see ",(0,a.kt)("a",{href:"../AA-7/AA-7.3#Subclause_7.3.3"},"7.3.3"),") are collectively referred to as ",(0,a.kt)("em",null,"assertions"),"; their boolean expressions are referred to as ",(0,a.kt)("em",null,"assertion expressions"),".",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.a.1/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"glossary-entry",mdxType:"Admonition"},(0,a.kt)("strong",null),"A predicate is an assertion that is expected to be True for all objects of a given subtype.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.a.2/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"glossary-entry",mdxType:"Admonition"},(0,a.kt)("strong",null),"A precondition is an assertion that is expected to be True when a given subprogram is called.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.a.3/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"glossary-entry",mdxType:"Admonition"},(0,a.kt)("strong",null),"A postcondition is an assertion that is expected to be True when a given subprogram returns normally.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.a.4/4"),(0,a.kt)(i.Z,{type:"aarm",aarm:"glossary-entry",mdxType:"Admonition"},(0,a.kt)("strong",null),"An invariant is an assertion that is expected to be True for all objects of a given private type when viewed from outside the defining package.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.a.5/4"),(0,a.kt)(i.Z,{type:"aarm",aarm:"glossary-entry",mdxType:"Admonition"},(0,a.kt)("strong",null),"See Invariant.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"1.a.6/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"glossary-entry",mdxType:"Admonition"},(0,a.kt)("strong",null),"An assertion is a boolean expression that appears in any of the following: a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert, a predicate, a precondition, a postcondition, an invariant, a constraint, or a null exclusion. An assertion is expected to be True at run time at certain specified places.",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"2"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"2.1/3"),(0,a.kt)(l.Z,{items:["AI05-0274-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Pragma Assertion_Policy is used to control whether assertions are to be ignored by the implementation, checked at run time, or handled in some implementation-defined manner. ",(0,a.kt)("br",null)),(0,a.kt)("h4",x({},{id:"syntax"}),"Syntax"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"3/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The form of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert is as follows: ",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"4/2"),(0,a.kt)("p",null,"  ",(0,a.kt)("strong",null,"pragma")," Assert([Check =",">","] ",(0,a.kt)("em",null,"boolean_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0132"},"expression")),"[, [Message =",">","] ",(0,a.kt)("em",null,"string_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0132"},"expression")),"]);",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"5/2"),(0,a.kt)("p",null,"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert is allowed at the place where a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.11#S0087"},"declarative_item"))," or a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0167"},"statement"))," is allowed.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"6/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The form of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy is as follows: ",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"7/2"),(0,a.kt)("p",null,"  ",(0,a.kt)("strong",null,"pragma")," Assertion_Policy(",(0,a.kt)("em",null,"policy_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier")),");",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"7.1/3"),(0,a.kt)(l.Z,{items:["AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"  ",(0,a.kt)("strong",null,"pragma")," Assertion_Policy(",(0,a.kt)("br",null),"         ",(0,a.kt)("em",null,"assertion_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0347"},"aspect_mark"))," =",">"," ",(0,a.kt)("em",null,"policy_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier")),(0,a.kt)("br",null),"     ","{",", ",(0,a.kt)("em",null,"assertion_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0347"},"aspect_mark"))," =",">"," ",(0,a.kt)("em",null,"policy_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier")),"}",");",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"8/3"),(0,a.kt)(l.Z,{items:["AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy is allowed only immediately within a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part")),", immediately within a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-7/AA-7.1#S0230"},"package_specification")),", or as a configuration pragma.",(0,a.kt)("br",null)),(0,a.kt)("h4",x({},{id:"name-resolution-rules"}),"Name Resolution Rules"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"9/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The expected type for the ",(0,a.kt)("em",null,"boolean_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0132"},"expression"))," of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert is any boolean type. The expected type for the ",(0,a.kt)("em",null,"string_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.4#S0132"},"expression"))," of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert is type String. ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"9.a/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"We allow any boolean type to be like ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.3#S0175"},"if_statement")),"s and other conditionals; we only allow String for the message in order to match ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0308"},"raise_statement")),"s. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"legality-rules"}),"Legality Rules"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"10/5"),(0,a.kt)(l.Z,{items:["AI95-00286-01","AI05-0290-1","AI12-0265-1","AI12-0396-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The ",(0,a.kt)("em",null,"assertion_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0347"},"aspect_mark"))," of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy shall identify an ",(0,a.kt)("em",null,"assertion aspect"),", namely   one of Assert, Static_Predicate, Dynamic_Predicate, Pre, Pre'Class, Post, Post'Class, Type_Invariant, Type_Invariant'Class, Default_Initial_Condition, or some implementation-defined (assertion)  ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0347"},"aspect_mark")),". The ",(0,a.kt)("em",null,"policy_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier"))," shall be either Check, Ignore, or some implementation-defined ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier")),". ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.a/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-defined",mdxType:"Admonition"},(0,a.kt)("strong",null),"Implementation-defined ",(0,a.kt)("em",null,"policy_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier")),"s and ",(0,a.kt)("em",null,"assertion_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0347"},"aspect_mark")),"s allowed in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"10.b/5"),(0,a.kt)(l.Z,{items:["AI12-0396-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"To be honest: "),"\u201cAssert\u201d is considered an \u201cassertion aspect\u201d for the purposes of this rule, even though there is no sort of entity that has an Assert aspect. It can only be specified using an Assert pragma, and applies to a particular point in the execution of a logical thread of control. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"static-semantics-1"}),"Static Semantics"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"11/3"),(0,a.kt)(l.Z,{items:["AI95-00286-01","AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy determines for each assertion aspect named in the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0020"},"pragma_argument_association")),"s whether assertions of the given aspect are to be enforced by a runtime check. The ",(0,a.kt)("em",null,"policy_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier"))," Check requires that assertion expressions of the given aspect be checked that they evaluate to True at the points specified for the given aspect; the ",(0,a.kt)("em",null,"policy_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.3#S0002"},"identifier"))," Ignore requires that the assertion expression not be evaluated at these points, and the runtime checks not be performed. [Note that for subtype predicate aspects (see ",(0,a.kt)("a",{href:"../AA-3/AA-3.2#Subclause_3.2.4"},"3.2.4"),"), even when the applicable Assertion_Policy is Ignore, the predicate will still be evaluated as part of membership tests and Valid ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0100"},"attribute_reference")),"s, and if static, will still have an effect on loop iteration over the subtype, and the selection of ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.4#S0177"},"case_statement_alternative")),"s and ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.8#S0072"},"variant")),"s.]",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"11.1/3"),(0,a.kt)(l.Z,{items:["AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"If no ",(0,a.kt)("em",null,"assertion_"),(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-13/AA-13.1#S0347"},"aspect_mark")),"s are specified in the pragma, the specified policy applies to all assertion aspects.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"11.2/5"),(0,a.kt)(l.Z,{items:["AI05-0290-1","AI12-0396-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy applies to the named assertion aspects in a specific region, and applies to all assertion expressions associated with those aspects specified in that region. A ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy given in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-3/AA-3.11#S0086"},"declarative_part"))," or immediately within a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-7/AA-7.1#S0230"},"package_specification"))," applies from the place of the pragma to the end of the innermost enclosing declarative region. The region for a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy given as a configuration pragma is the declarative region for the entire compilation unit (or units) to which it applies.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"11.3/3"),(0,a.kt)(l.Z,{items:["AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"If a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy applies to a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-12/AA-12.3#S0315"},"generic_instantiation")),", then the ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy applies to the entire instance.",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"11.a.1/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"This means that an Assertion_Policy pragma that occurs in a scope enclosing the declaration of a generic unit but not also enclosing the declaration of a given instance of that generic unit will not apply to assertion expressions occurring within the given instance. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"11.4/3"),(0,a.kt)(l.Z,{items:["AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"If multiple Assertion_Policy pragmas apply to a given construct for a given assertion aspect, the assertion policy is determined by the one in the innermost enclosing region of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assertion_Policy specifying a policy for the assertion aspect. If no such Assertion_Policy pragma exists, the policy is implementation defined.",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"11.a/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"implementation-defined",mdxType:"Admonition"},(0,a.kt)("strong",null),"The default assertion policy.",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"12/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The following language-defined library package exists:",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"13/5"),(0,a.kt)(l.Z,{items:["AI12-0414-1"],mdxType:"MarginInfo"}),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"package Ada.Assertions ","\n","    with  Pure is ","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"14/2"),"Assertion_Error : exception;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"15/2"),"procedure Assert(Check : in Boolean);","\n","   procedure Assert(Check : in Boolean; Message : in String);","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"16/2"),"end Ada.Assertions;","\n"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"17/3"),(0,a.kt)(l.Z,{items:["AI95-00286-01","AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"A compilation unit containing a check for an assertion (including a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert) has a semantic dependence on the Assertions library unit.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"18/3"),(0,a.kt)(l.Z,{items:["AI95-00286-01","AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,(0,a.kt)("em",null,"This paragraph was deleted."),(0,a.kt)("br",null)),(0,a.kt)("h4",x({},{id:"dynamic-semantics-1"}),"Dynamic Semantics"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"19/3"),(0,a.kt)(l.Z,{items:["AI95-00286-01","AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"If performing checks is required by the Assert assertion policy in effect at the place of a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert, the elaboration of the pragma consists of evaluating the boolean expression, and if the result is False, evaluating the Message argument, if any, and raising the exception Assertions.Assertion_Error, with a message if the Message argument is provided.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"20/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Calling the procedure Assertions.Assert without a Message parameter is equivalent to:",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"21/2"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"if Check = False then","\n","   raise Ada.Assertions.Assertion_Error;","\n","end if;","\n"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"22/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Calling the procedure Assertions.Assert with a Message parameter is equivalent to:",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"23/2"),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"if Check = False then","\n","   raise Ada.Assertions.Assertion_Error with Message;","\n","end if;","\n"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"24/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The procedures Assertions.Assert have these effects independently of the assertion policy in effect.",(0,a.kt)("br",null)),(0,a.kt)("h4",x({},{id:"bounded-run-time-errors"}),"Bounded (Run-Time) Errors"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.1/5"),(0,a.kt)(l.Z,{items:["AI05-0274-1","AI12-0439-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"It is a bounded error to invoke a potentially blocking operation (see ",(0,a.kt)("a",{href:"../AA-9/AA-9.5#Subclause_9.5.1"},"9.5.1"),") during the evaluation of an assertion expression associated with a call on, or return from, a protected operation. If the bounded error is detected, Program_Error is raised. If not detected, execution proceeds normally, but if it is invoked within a protected action, it can  result in deadlock or a (nested) protected action. ",(0,a.kt)("br",null)),(0,a.kt)("h4",x({},{id:"implementation-requirements"}),"Implementation Requirements"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.2/5"),(0,a.kt)(l.Z,{items:["AI12-0179-1","AI12-0265-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Any postcondition expression, type invariant expression, or default initial condition expression occurring in the specification of a language-defined unit is enabled (see ",(0,a.kt)("a",{href:"../AA-6/AA-6.1#Subclause_6.1.1"},"6.1.1"),", ",(0,a.kt)("a",{href:"../AA-7/AA-7.3#Subclause_7.3.2"},"7.3.2"),", and ",(0,a.kt)("a",{href:"../AA-7/AA-7.3#Subclause_7.3.3"},"7.3.3"),").",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.a/5"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"The Assertion_Policy does not have an effect on such postconditions, invariants, and default initial conditions. This has no execution impact since such assertions shouldn't fail anyway (see the next rule). ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.3/5"),(0,a.kt)(l.Z,{items:["AI12-0179-1","AI12-0265-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"The evaluation of any such postcondition, type invariant, or default initial condition expression shall either yield True or propagate an exception from a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0309"},"raise_expression"))," that appears within the assertion expression.",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.b/5"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"In other words, evaluating such an assertion expression will not return a result of False, nor will it propagate an exception other than by evaluating a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-11/AA-11.3#S0309"},"raise_expression"))," which is syntactically all or part of the assertion expression. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.c/5"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},(0,a.kt)("strong",null,"To be honest: "),"Evaluation of any expression might raise Storage_Error. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.d/5"),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"This allows the Reference Manual to express semantic requirements as postconditions, invariants, or default initial conditions (which are invariably clearer than English prose would be) while keeping it clear that failing the assertion check (or any other run time check) is not conforming behavior. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.4/5"),(0,a.kt)(l.Z,{items:["AI12-0112-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Any precondition expression occurring in the specification of a language-defined unit is enabled (see ",(0,a.kt)("a",{href:"../AA-6/AA-6.1#Subclause_6.1.1"},"6.1.1"),") unless suppressed (see ",(0,a.kt)("a",{href:"../AA-11/AA-11.5"},"11.5"),"). Similarly, any predicate checks for a subtype occurring in the specification of a language-defined unit are enabled (see ",(0,a.kt)("a",{href:"../AA-3/AA-3.2#Subclause_3.2.4"},"3.2.4"),") unless suppressed.",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"24.e/5"),(0,a.kt)(l.Z,{items:["AI12-0005-1","AI12-0112-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"This allows the Reference Manual to express runtime requirements on the client of a language-defined unit as preconditions or predicates (which are clearer than English prose would be). Some such requirements can be suppressed with pragma Suppress. Ada 2012 and earlier versions did not provide a mechanism to suppress such code. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"implementation-permissions-1"}),"Implementation Permissions"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"25/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Assertion_Error may be declared by renaming an implementation-defined exception from another package. ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"25.a/2"),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"This permission is intended to allow implementations which had an implementation-defined Assert pragma to continue to use their originally defined exception. Without this permission, such an implementation would be incorrect, as Exception_Name would return the wrong name. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"26/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Implementations may define their own assertion policies.",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"27/5"),(0,a.kt)(l.Z,{items:["AI05-0274-1","AI12-0445-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"If the result of a function call in an assertion is not used  to determine the value of the assertion expression, an implementation is permitted to omit the function call. [This permission applies even if the function has side effects.]",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"28/5"),(0,a.kt)(l.Z,{items:["AI05-0274-1","AI12-0444-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"An implementation may disallow  the specification of an assertion expression if the evaluation of the expression has a side effect such that an immediate reevaluation of the expression can  produce a different value. Similarly, an implementation may disallow  the specification of an assertion expression that is checked as part of a call on or return from a callable entity ",(0,a.kt)("em",null,"C"),", if the evaluation of the expression has a side effect such that the evaluation of some other assertion expression associated with the same call of (or return from) ",(0,a.kt)("em",null,"C")," can  produce a different value than in the case when  the first expression had not been evaluated. ",(0,a.kt)("br",null)),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"28.a/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"ramification",mdxType:"Admonition"},(0,a.kt)("strong",null),"This allows an implementation to reject such assertions. To maximize portability, assertions should not include expressions that contain these sorts of side effects. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"28.b/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"discussion",mdxType:"Admonition"},(0,a.kt)("strong",null),"The intended effect of the second part of the rule (the part starting with \u201cSimilarly\u201d) is that an evaluation of the involved assertion expressions (subtype predicates, type invariants, preconditions and postconditions) in any order yields identical results.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"28.c/3"),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The rule is intended to apply to all of the assertion expressions that are evaluated at the start of call (and similarly for the assertion expressions that are evaluated during the return from a call), but not other assertions actually given in the body, nor between the assertions checked at the start and end of the call. Specifically, a side effect that alters a variable in a function called from a precondition expression that changes the result of a postcondition expression of the same subprogram does ",(0,a.kt)("em",null,"not")," trigger these rules unless it also changes the value of a reevaluation of the precondition expression. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"language-design-principles"}),"Language Design Principles"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"28.d/4"),(0,a.kt)(l.Z,{items:["AI12-0005-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Our intent is that any assertion expression that violates this Implementation Permission is considered pathological. We definitely want compilers to be able to assume that if you evaluate an assertion expression once and it is True, you don't need to evaluate it again if all you are doing in the meantime is evaluating assertion expressions. We were unable to find wording that had this effect that didn't throw out important other cases (logging, memo functions), so we settled for a strong warning that compilers can reject such pathologies. Perhaps in a future version of Ada we'll be able to tighten this up. ",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"29/5"),(0,a.kt)(l.Z,{items:["AI95-00286-01","AI12-0442-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"NOTE 1   Normally, the boolean expression in a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert does  not call functions that have significant side effects when the result of the expression is True, so that the particular assertion policy in effect will not affect normal operation of the program. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"extensions-to-ada-95-1"}),"Extensions to Ada 95"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"29.a/2"),(0,a.kt)(l.Z,{items:["AI95-00286-01"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Pragmas Assert and Assertion_Policy, and package Assertions are new. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"incompatibilities-with-ada-2005"}),"Incompatibilities With Ada 2005"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"29.b/3"),(0,a.kt)(l.Z,{items:["AI05-0274-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"There now is an Implementation Permission to reject an assertion expression that calls a function that has a side effect such that an immediate reevalution of the expression could produce a different value. This means that a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-2/AA-2.8#S0019"},"pragma"))," Assert that works in Ada 2005 might be illegal in Ada 2012 in the unlikely event that the compiler detected such an error. This should be unlikely to occur in practice and it is considered a good thing, as the original expression was tricky and probably was not portable (as order of evaluation is unspecified within an expression). Moreover, no compiler is ",(0,a.kt)("em",null,"required")," to reject such expressions, so there is no need for any compiler to change behavior. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"extensions-to-ada-2005"}),"Extensions to Ada 2005"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"29.c/3"),(0,a.kt)(l.Z,{items:["AI05-0290-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Assertion_Policy pragmas are now allowed in more places and can specify behavior for individual kinds of assertions. ",(0,a.kt)("br",null))),(0,a.kt)("h4",x({},{id:"wording-changes-from-ada-2012"}),"Wording Changes from Ada 2012"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"29.d/5"),(0,a.kt)(l.Z,{items:["AI12-0112-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Added wording that preconditions and predicates given on language-defined units are always checked unless suppressed (that is, they act like language-defined checks). This is not considered an inconsistency, since there are no such preconditions or predicates in Ada 2012.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"29.e/5"),(0,a.kt)(l.Z,{items:["AI12-0179-1","AI12-0265-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"correction",mdxType:"Admonition"},(0,a.kt)("strong",null)," Added wording that postconditions, type invariants, and default initial conditions given on language-defined units cannot fail. This is not considered an inconsistency, since there are no such postconditions, invariants, or default initial conditions in Ada 2012.",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"29.f/5"),(0,a.kt)(l.Z,{items:["AI12-0265-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"Added default initial conditions to the kinds of assertions (see ",(0,a.kt)("a",{href:"../AA-7/AA-7.3#Subclause_7.3.3"},"7.3.3"),").",(0,a.kt)("br",null))),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"29.g/5"),(0,a.kt)(l.Z,{items:["AI12-0396-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"correction",mdxType:"Admonition"},(0,a.kt)("strong",null)," Added a definition of assertion aspects, used in some freezing rules (see ",(0,a.kt)("a",{href:"../AA-13/AA-13.14"},"13.14"),"). ",(0,a.kt)("br",null))),(0,a.kt)("a",{id:"Subclause_11.4.3"}),(0,a.kt)("h2",x({},{id:"1143--example-of-exception-handling"}),"11.4.3  Example of Exception Handling"),(0,a.kt)("h4",x({},{id:"examples"}),"Examples"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"1/5"),(0,a.kt)(l.Z,{items:["AI12-0440-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"Exception handling can  be used to separate the detection of an error from the response to that error: ",(0,a.kt)("br",null)),(0,a.kt)(s.Z,{mdxType:"MarginText"},"2/5"),(0,a.kt)(l.Z,{items:["AI95-00433-01","AI12-0178-1"],mdxType:"MarginInfo"}),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"package File_System is","\n","    type Data_Type is ...;","\n","    type File_Handle is limited private;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"3"),"File_Not_Found : exception;","\n","    procedure Open(F : in out File_Handle; Name : String);","\n","        -- raises File_Not_Found if named file does not exist","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"4"),"End_Of_File : exception;","\n","    procedure Read(F : in out File_Handle; Data : out Data_Type);","\n","        -- raises End_Of_File if the file is not open","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"5/5"),(0,a.kt)(l.Z,{items:["AI12-0178-1"],mdxType:"MarginInfo"}),"...","\n","private","\n","    ...","\n","end File_System;","\n"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"5.a/5"),(0,a.kt)(l.Z,{items:["AI12-0178-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"The first ... provides a place for Close to be declared, and the second ... provides a place for File_Handle to be completed. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"5.1/5"),(0,a.kt)(l.Z,{items:["AI12-0178-1"],mdxType:"MarginInfo"}),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"package body File_System is","\n","    ...","\n"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"5.b/5"),(0,a.kt)(l.Z,{items:["AI12-0178-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"reason",mdxType:"Admonition"},(0,a.kt)("strong",null),"This ... provides a place for File_Exists and the body of Close to be declared. ",(0,a.kt)("br",null))),(0,a.kt)(s.Z,{mdxType:"MarginText"},"6/5"),(0,a.kt)(l.Z,{items:["AI95-00433-01","AI12-0178-1"],mdxType:"MarginInfo"}),(0,a.kt)(r.Z,{language:"ada",mdxType:"CodeBlock"},"\n","    procedure Open(F : in out File_Handle; Name : String) is","\n","    begin","\n","        if File_Exists(Name) then","\n","            ...","\n","        else","\n",'            raise File_Not_Found with "File not found: " & Name & ".";',"\n","        end if;","\n","    end Open;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"7"),"procedure Read(F : in out File_Handle; Data : out Data_Type) is","\n","    begin","\n","        if F.Current_Position ","<","= F.Last_Position then","\n","            ...","\n","        else","\n","            raise End_Of_File;","\n","        end if;","\n","    end Read;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"8"),"...","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"9"),"end File_System;","\n",(0,a.kt)(s.Z,{mdxType:"MarginText"},"10/5"),(0,a.kt)(l.Z,{items:["AI12-0178-1"],mdxType:"MarginInfo"}),"with Ada.Text_IO;","\n","with Ada.Exceptions;","\n","with File_System; use File_System;","\n","use Ada;","\n","procedure Main is","\n","    Verbosity_Desired : Boolean := ...;","\n","begin","\n","    ... -- call operations in File_System","\n","exception","\n","    when End_Of_File =",">","\n","        Close(Some_File);","\n","    when Not_Found_Error : File_Not_Found =",">","\n","        Text_IO.Put_Line(Exceptions.Exception_Message(Not_Found_Error));","\n","    when The_Error : others =",">","\n",'        Text_IO.Put_Line("Unknown error:");',"\n","        if Verbosity_Desired then","\n","            Text_IO.Put_Line(Exceptions.Exception_Information(The_Error));","\n","        else","\n","            Text_IO.Put_Line(Exceptions.Exception_Name(The_Error));","\n","            Text_IO.Put_Line(Exceptions.Exception_Message(The_Error));","\n","        end if;","\n","        raise;","\n","end Main;","\n"),(0,a.kt)(s.Z,{mdxType:"MarginText"},"11/5"),(0,a.kt)(l.Z,{items:["AI12-0440-1"],mdxType:"MarginInfo"}),(0,a.kt)("p",null,"In the above example, the File_System package contains information about detecting certain exceptional situations, but it does not specify how to handle those situations. Procedure Main specifies how to handle them; other clients of File_System can  have different handlers, even though the exceptional situations arise from the same basic causes. ",(0,a.kt)("br",null)),(0,a.kt)("h4",x({},{id:"wording-changes-from-ada-83"}),"Wording Changes from Ada 83"),(0,a.kt)(o.Z,{mdxType:"AnnotatedOnly"},(0,a.kt)(s.Z,{mdxType:"MarginText"},"11.a/3"),(0,a.kt)(l.Z,{items:["AI05-0299-1"],mdxType:"MarginInfo"}),(0,a.kt)(i.Z,{type:"aarm",aarm:"note",mdxType:"Admonition"},"The sections labeled \u201cExceptions Raised During ...\u201d are subsumed by this subclause, and by parts of Clause ",(0,a.kt)("a",{href:"../AA-9/"},"9"),". ",(0,a.kt)("br",null))))}Z.isMDXComponent=!0}}]);