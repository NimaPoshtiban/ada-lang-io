"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6625],{1565:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>b,default:()=>g,frontMatter:()=>d,metadata:()=>A,toc:()=>y});var r=a(1716),n=a(9464),o=Object.defineProperty,s=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,p=(e,t)=>{for(var a in t||(t={}))u.call(t,a)&&m(e,a,t[a]);if(l)for(var a of l(t))c.call(t,a)&&m(e,a,t[a]);return e};const d={sidebar_position:48},b="6 Subprograms",A={unversionedId:"arm/AA-6/AA-6",id:"arm/AA-6/AA-6",title:"6 Subprograms",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-6/AA-6.mdx",sourceDirName:"arm/AA-6",slug:"/arm/AA-6/",permalink:"/docs/arm/AA-6/",draft:!1,tags:[],version:"current",sidebarPosition:48,frontMatter:{sidebar_position:48},sidebar:"referenceManualSidebar",previous:{title:"5.8 Goto Statements",permalink:"/docs/arm/AA-5/AA-5.8"},next:{title:"6.1 Subprogram Declarations",permalink:"/docs/arm/AA-6/AA-6.1"}},f={},y=[],k={toc:y};function g(e){var t,a=e,{components:o}=a,m=((e,t)=>{var a={};for(var r in e)u.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&c.call(e,r)&&(a[r]=e[r]);return a})(a,["components"]);return(0,r.kt)("wrapper",(t=p(p({},k),m),s(t,i({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("h1",p({},{id:"6-subprograms"}),"6 Subprograms"),(0,r.kt)("admonition",p({},{type:"warning"}),(0,r.kt)("p",{parentName:"admonition"},"This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,r.kt)("a",p({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,r.kt)("p",null,"A subprogram is a program unit or intrinsic operation whose execution is invoked by a subprogram call. There are two forms of subprogram: procedures and functions. A procedure call is a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-5/AA-5.1#S0167"},"statement")),"; a function call is an expression and returns a value. The definition of a subprogram can be given in two parts: a subprogram declaration defining its interface, and a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body"))," defining its execution. [Operators and enumeration literals are functions.] ",(0,r.kt)("br",null)),(0,r.kt)(n.Z,{type:"aarm",aarm:"note",title:"Note: ",mdxType:"Admonition"},(0,r.kt)("strong",null,"To be honest: "),"A function call is an expression, but more specifically it is a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name")),". ",(0,r.kt)("br",null)),(0,r.kt)(n.Z,{type:"aarm",aarm:"glossary-entry",title:"Glossary entry: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"A subprogram is a section of a program that can be executed in various contexts. It is invoked by a subprogram call that may qualify the effect of the subprogram through the passing of parameters. There are two forms of subprograms: functions, which return values, and procedures, which do not.",(0,r.kt)("br",null)),(0,r.kt)(n.Z,{type:"aarm",aarm:"glossary-entry",title:"Glossary entry: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"A function is a form of subprogram that returns a result and can be called as part of an expression.",(0,r.kt)("br",null)),(0,r.kt)(n.Z,{type:"aarm",aarm:"glossary-entry",title:"Glossary entry: ",mdxType:"Admonition"},(0,r.kt)("strong",null),"A procedure is a form of subprogram that does not return a result and can only be called by a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-5/AA-5.1#S0167"},"statement")),".",(0,r.kt)("br",null)),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI05-0299-1"),"}"," ",(0,r.kt)("br",null),"A ",(0,r.kt)("em",null,"callable entity")," is a subprogram or entry (see Section 9). A callable entity is invoked by a ",(0,r.kt)("em",null,"call"),"; that is, a subprogram call or entry call. A ",(0,r.kt)("em",null,"callable construct")," is a construct that defines the action of a call upon a callable entity: a ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body")),", ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-9/AA-9.5#S0260"},"entry_body")),", or ",(0,r.kt)("code",null,(0,r.kt)("a",{href:"../AA-9/AA-9.5#S0258"},"accept_statement")),". ",(0,r.kt)("br",null)),(0,r.kt)(n.Z,{type:"aarm",aarm:"ramification",title:"Ramification: ",mdxType:"Admonition"},(0,r.kt)("strong",null),'Note that "callable entity" includes predefined operators, enumeration literals, and abstract subprograms. "Call" includes calls of these things. They do not have callable constructs, since they don\'t have completions. ',(0,r.kt)("br",null)))}g.isMDXComponent=!0}}]);