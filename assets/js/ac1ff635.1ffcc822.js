"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[8604],{82052:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>k,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>h,toc:()=>f});var n=a(91716),i=Object.defineProperty,s=Object.defineProperties,r=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,u=(e,t,a)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,p=(e,t)=>{for(var a in t||(t={}))l.call(t,a)&&u(e,a,t[a]);if(o)for(var a of o(t))m.call(t,a)&&u(e,a,t[a]);return e};const c={title:"3.5 Summary"},d=void 0,h={unversionedId:"style-guide/s3/05",id:"style-guide/s3/05",title:"3.5 Summary",description:"spelling",source:"@site/docs/style-guide/s3/05.mdx",sourceDirName:"style-guide/s3",slug:"/style-guide/s3/05",permalink:"/docs/style-guide/s3/05",draft:!1,tags:[],version:"current",frontMatter:{title:"3.5 Summary"},sidebar:"styleGuideSidebar",previous:{title:"3.4 Using Types",permalink:"/docs/style-guide/s3/04"},next:{title:"4. Program Structure",permalink:"/docs/style-guide/s4/"}},k={},f=[{value:"spelling",id:"spelling",level:3},{value:"naming conventions",id:"naming-conventions",level:3},{value:"comments",id:"comments",level:3},{value:"using types",id:"using-types",level:3}],b={toc:f};function g(e){var t,a=e,{components:i}=a,u=((e,t)=>{var a={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&o)for(var n of o(e))t.indexOf(n)<0&&m.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=p(p({},b),u),s(t,r({components:i,mdxType:"MDXLayout"}))),(0,n.kt)("h3",p({},{id:"spelling"}),"spelling"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Use underscores to separate words in a compound name."),(0,n.kt)("li",{parentName:"ul"},"Represent numbers in a consistent fashion."),(0,n.kt)("li",{parentName:"ul"},"Represent literals in a radix appropriate to the problem."),(0,n.kt)("li",{parentName:"ul"},"Use underscores to separate digits the same way commas or periods\n(or spaces for nondecimal bases) would be used in normal text."),(0,n.kt)("li",{parentName:"ul"},"When using scientific notation, make the E consistently either\nuppercase or lowercase."),(0,n.kt)("li",{parentName:"ul"},"In an alternate base, represent the alphabetic characters in either\nall uppercase or all lowercase."),(0,n.kt)("li",{parentName:"ul"},"Make reserved words and other elements of the program visually\ndistinct from each other."),(0,n.kt)("li",{parentName:"ul"},"Do not use an abbreviation of a long word as an identifier where a\nshorter synonym exists."),(0,n.kt)("li",{parentName:"ul"},"Use a consistent abbreviation strategy."),(0,n.kt)("li",{parentName:"ul"},"Do not use ambiguous abbreviations."),(0,n.kt)("li",{parentName:"ul"},"To justify its use, an abbreviation must save many characters over\nthe full word."),(0,n.kt)("li",{parentName:"ul"},"Use abbreviations that are well-accepted in the application domain."),(0,n.kt)("li",{parentName:"ul"},"Maintain a list of accepted abbreviations, and use only\nabbreviations on that list.")),(0,n.kt)("h3",p({},{id:"naming-conventions"}),"naming conventions"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Choose names that are as self-documenting as possible."),(0,n.kt)("li",{parentName:"ul"},"Use a short synonym instead of an abbreviation."),(0,n.kt)("li",{parentName:"ul"},"Use names given by the application, but do not use obscure jargon."),(0,n.kt)("li",{parentName:"ul"},"Avoid using the same name to declare different kinds of identifiers."),(0,n.kt)("li",{parentName:"ul"},"Use singular, general nouns as subtype identifiers."),(0,n.kt)("li",{parentName:"ul"},"Choose identifiers that describe one of the subtype's values."),(0,n.kt)("li",{parentName:"ul"},"Consider using suffixes for subtype identifiers that define visible\naccess types, visible subranges, or visible array types."),(0,n.kt)("li",{parentName:"ul"},"For private types, do not use identifier constructions (e.g.,\nsuffixes) that are unique to subtype identifiers."),(0,n.kt)("li",{parentName:"ul"},"Do not use the subtype names from predefined packages."),(0,n.kt)("li",{parentName:"ul"},"Use predicate clauses or adjectives for Boolean objects."),(0,n.kt)("li",{parentName:"ul"},"Use singular, specific nouns as object identifiers."),(0,n.kt)("li",{parentName:"ul"},"Choose identifiers that describe the object's value during\nexecution."),(0,n.kt)("li",{parentName:"ul"},"Use singular, general nouns as identifiers for record components."),(0,n.kt)("li",{parentName:"ul"},"Use a consistent naming convention for tagged types and associated\npackages."),(0,n.kt)("li",{parentName:"ul"},"Use action verbs for procedures and entries."),(0,n.kt)("li",{parentName:"ul"},"Use predicate clauses for Boolean functions."),(0,n.kt)("li",{parentName:"ul"},"Use nouns for non-Boolean functions."),(0,n.kt)("li",{parentName:"ul"},"Give packages names that imply a higher level of organization than\nsubprograms. Generally, these are noun phrases that describe the\nabstraction provided."),(0,n.kt)("li",{parentName:"ul"},"Give tasks names that imply an active entity."),(0,n.kt)("li",{parentName:"ul"},"Use nouns descriptive of the data being protected for protected\nunits."),(0,n.kt)("li",{parentName:"ul"},"Consider naming generic subprograms as if they were nongeneric\nsubprograms."),(0,n.kt)("li",{parentName:"ul"},"Consider naming generic packages as if they were nongeneric\npackages."),(0,n.kt)("li",{parentName:"ul"},"Make the generic names more general than the instantiated names."),(0,n.kt)("li",{parentName:"ul"},"Use symbolic values instead of literals, wherever possible."),(0,n.kt)("li",{parentName:"ul"},"Use the predefined constants Ada.Numerics.Pi and Ada.Numerics.e for\nthe mathematical constants Pi and e."),(0,n.kt)("li",{parentName:"ul"},"Use constants instead of variables for constant values."),(0,n.kt)("li",{parentName:"ul"},"Use a constant when the value is specific to a type or when the\nvalue must be static."),(0,n.kt)("li",{parentName:"ul"},"Use named numbers instead of constants, whenever possible."),(0,n.kt)("li",{parentName:"ul"},"Use named numbers to replace numeric literals whose type or context\nis truly universal."),(0,n.kt)("li",{parentName:"ul"},"Use constants for objects whose values cannot change after\nelaboration. (United Technologies 1987)."),(0,n.kt)("li",{parentName:"ul"},"Show relationships between symbolic values by defining them with\nstatic expressions."),(0,n.kt)("li",{parentName:"ul"},"Use linearly independent sets of literals."),(0,n.kt)("li",{parentName:"ul"},"Use attributes like 'First and 'Last instead of literals, wherever\npossible."),(0,n.kt)("li",{parentName:"ul"},"Use a name that indicates the kind of problem the exception\nrepresents."),(0,n.kt)("li",{parentName:"ul"},"Include a prefix like New, Make, or Create in naming constructors\n(in this sense, operations to create and/or initialize an object)."),(0,n.kt)("li",{parentName:"ul"},"Use names indicative of their content for child packages containing\nconstructors.")),(0,n.kt)("h3",p({},{id:"comments"}),"comments"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Make the code as clear as possible to reduce the need for comments."),(0,n.kt)("li",{parentName:"ul"},"Never repeat information in a comment that is readily available in\nthe code."),(0,n.kt)("li",{parentName:"ul"},"Where a comment is required, make it concise and complete."),(0,n.kt)("li",{parentName:"ul"},"Use proper grammar and spelling in comments."),(0,n.kt)("li",{parentName:"ul"},"Make comments visually distinct from the code."),(0,n.kt)("li",{parentName:"ul"},"Structure comments in headers so that information can be\nautomatically extracted by a tool."),(0,n.kt)("li",{parentName:"ul"},"Put a file header on each source file."),(0,n.kt)("li",{parentName:"ul"},"Place ownership, responsibility, and history information for the\nfile in the file header."),(0,n.kt)("li",{parentName:"ul"},"Put a header on the specification of each program unit."),(0,n.kt)("li",{parentName:"ul"},"Place information required by the user of the program unit in the\nspecification header."),(0,n.kt)("li",{parentName:"ul"},"Do not repeat information (except unit name) in the specification\nheader that is present in the specification."),(0,n.kt)("li",{parentName:"ul"},"Explain what the unit does, not how or why it does it."),(0,n.kt)("li",{parentName:"ul"},"Describe the complete interface to the program unit, including any\nexceptions it can raise and any global effects it can have."),(0,n.kt)("li",{parentName:"ul"},"Do not include information about how the unit fits into the\nenclosing software system."),(0,n.kt)("li",{parentName:"ul"},"Describe the performance (time and space) characteristics of the\nunit."),(0,n.kt)("li",{parentName:"ul"},"Place information required by the maintainer of the program unit in\nthe body header."),(0,n.kt)("li",{parentName:"ul"},"Explain how and why the unit performs its function, not what the\nunit does."),(0,n.kt)("li",{parentName:"ul"},"Do not repeat information (except unit name) in the header that is\nreadily apparent from reading the code."),(0,n.kt)("li",{parentName:"ul"},"Do not repeat information (except unit name) in the body header that\nis available in the specification header."),(0,n.kt)("li",{parentName:"ul"},"Comment on all data types, objects, and exceptions unless their\nnames are self-explanatory."),(0,n.kt)("li",{parentName:"ul"},"Include information on the semantic structure of complex,\npointer-based data structures."),(0,n.kt)("li",{parentName:"ul"},"Include information about relationships that are maintained between\ndata objects."),(0,n.kt)("li",{parentName:"ul"},"Omit comments that merely repeat the information in the name."),(0,n.kt)("li",{parentName:"ul"},"Include information on redispatching for tagged types in cases where\nyou intend the specializations (i.e., derived types) to override\nthese redispatching operations."),(0,n.kt)("li",{parentName:"ul"},"Minimize comments embedded among statements."),(0,n.kt)("li",{parentName:"ul"},"Use comments only to explain parts of the code that are not obvious."),(0,n.kt)("li",{parentName:"ul"},"Comment intentional omissions from the code."),(0,n.kt)("li",{parentName:"ul"},"Do not use comments to paraphrase the code."),(0,n.kt)("li",{parentName:"ul"},"Do not use comments to explain remote pieces of code, such as\nsubprograms called by the current unit."),(0,n.kt)("li",{parentName:"ul"},"Where comments are necessary, make them visually distinct from the\ncode."),(0,n.kt)("li",{parentName:"ul"},"Use pagination markers to mark program unit boundaries."),(0,n.kt)("li",{parentName:"ul"},"Repeat the unit name in a comment to mark the begin of a package\nbody, subprogram body, task body, or block if the begin is preceded\nby declarations."),(0,n.kt)("li",{parentName:"ul"},"For long or heavily nested if and case statements, mark the end of\nthe statement with a comment summarizing the condition governing the\nstatement."),(0,n.kt)("li",{parentName:"ul"},"For long or heavily nested if statements, mark the else part with a\ncomment summarizing the conditions governing this portion of the\nstatement.")),(0,n.kt)("h3",p({},{id:"using-types"}),"using types"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Limit the range of scalar types as much as possible."),(0,n.kt)("li",{parentName:"ul"},"Seek information about possible values from the application."),(0,n.kt)("li",{parentName:"ul"},"Do not reuse any of the subtype names in package Standard."),(0,n.kt)("li",{parentName:"ul"},"Use subtype declarations to improve program readability (Booch\n1987)."),(0,n.kt)("li",{parentName:"ul"},"Use derived types and subtypes in concert."),(0,n.kt)("li",{parentName:"ul"},"Use enumeration types instead of numeric codes."),(0,n.kt)("li",{parentName:"ul"},"Only if absolutely necessary, use representation clauses to match\nrequirements of external devices.")),(0,n.kt)("admonition",p({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},'This page of the "Ada Quality and Style Guide" has been adapted from the\noriginal work at ',(0,n.kt)("a",p({parentName:"p"},{href:"https://en.wikibooks.org/wiki/Ada_Style_Guide"}),"https://en.wikibooks.org/wiki/Ada_Style_Guide"),", which is\nlicensed under the\n",(0,n.kt)("a",p({parentName:"p"},{href:"https://creativecommons.org/licenses/by-sa/3.0/"}),"Creative Commons Attribution-ShareAlike License"),";\nadditional terms may apply. Page not endorsed by Wikibooks or the Ada\nStyle Guide Wikibook authors. This page is licensed under the same license\nas the original work.")))}g.isMDXComponent=!0}}]);