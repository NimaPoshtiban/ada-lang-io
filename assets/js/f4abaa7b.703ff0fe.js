"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[501],{2078:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>l});var t=o(9440),r=(o(6687),o(1716)),a=o(2526);const i={sidebar_position:82},s="9.11  Example of Tasking and Synchronization",u={unversionedId:"arm/AA-9.11",id:"arm/AA-9.11",title:"9.11  Example of Tasking and Synchronization",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-9.11.mdx",sourceDirName:"arm",slug:"/arm/AA-9.11",permalink:"/docs/arm/AA-9.11",draft:!1,tags:[],version:"current",sidebarPosition:82,frontMatter:{sidebar_position:82},sidebar:"tutorialSidebar",previous:{title:"9.10  Shared Variables",permalink:"/docs/arm/AA-9.10"},next:{title:"10 Program Structure and Compilation Issues",permalink:"/docs/arm/AA-10"}},d={},l=[{value:"Examples",id:"examples",level:4}],p={toc:l};function m(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"911--example-of-tasking-and-synchronization"},"9.11  Example of Tasking and Synchronization"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"},"tracking issue"))),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI12-0440-1"),"}"," The following example defines a buffer protected object to smooth variations between the speed of output of a producing task and the speed of input of some consuming task. For instance, the producing task can have the following structure:"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"task Producer;","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}"," task body Producer is","\n","   Person : Person_Name; -- see 3.10.1","\n","begin","\n","   loop","\n","      ... --  simulate arrival of the next customer","\n","      Buffer.Append_Wait(Person);","\n","      exit when Person = null;","\n","   end loop;","\n","end Producer;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI12-0440-1"),"}"," and the consuming task can have the following structure:"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"task Consumer;","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}"," task body Consumer is","\n","   Person : Person_Name;","\n","begin","\n","   loop","\n","      Buffer.Remove_First_Wait(Person);","\n","      exit when Person = null;","\n","      ... --  simulate serving a customer","\n","   end loop;","\n","end Consumer;","\n"),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00433-01"),"}"," The buffer object contains an internal array of person names managed in a round-robin fashion. The array has two indices, an In_Index denoting the index for the next input person name and an Out_Index denoting the index for the next output person name."),(0,r.kt)("p",null,"{",(0,r.kt)("em",null,"AI95-00433-01"),"}"," The Buffer is defined as an extension of the Synchronized_Queue interface (see 3.9.4), and as such promises to implement the abstraction defined by that interface. By doing so, the Buffer can be passed to the Transfer class-wide operation defined for objects of a type covered by Queue'Class."),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI12-0178-1","}"," type Person_Name_Array is array (Positive range ","<",">",")","\n","   of Person_Name;  -- see 3.10.1","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}"," protected Buffer is new Synchronized_Queue with  -- see 3.9.4","\n","   entry Append_Wait(Person : in Person_Name);","\n","   entry Remove_First_Wait(Person : out Person_Name);","\n","   function Cur_Count return Natural;","\n","   function Max_Count return Natural;","\n","   procedure Append(Person : in Person_Name);","\n","   procedure Remove_First(Person : out Person_Name);","\n","private","\n","   Pool      : Person_Name_Array(1 .. 100);","\n","   Count     : Natural := 0;","\n","   In_Index, Out_Index : Positive := 1;","\n","end Buffer;","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}"," protected body Buffer is","\n","   entry Append_Wait(Person : in Person_Name)","\n","      when Count ","<"," Pool'Length is","\n","   begin","\n","      Append(Person);","\n","   end Append_Wait;","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}","    procedure Append(Person : in Person_Name) is","\n","   begin","\n","      if Count = Pool'Length then","\n",'         raise Queue_Error with "Buffer Full";  -- see 11.3',"\n","      end if;","\n","      Pool(In_Index) := Person;","\n","      In_Index       := (In_Index mod Pool'Length) + 1;","\n","      Count          := Count + 1;","\n","   end Append;","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}","    entry Remove_First_Wait(Person : out Person_Name)","\n","      when Count ",">"," 0 is","\n","   begin","\n","      Remove_First(Person);","\n","   end Remove_First_Wait;","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}","    procedure Remove_First(Person : out Person_Name) is","\n","   begin","\n","      if Count = 0 then","\n",'         raise Queue_Error with "Buffer Empty"; -- see 11.3',"\n","      end if;","\n","      Person    := Pool(Out_Index);","\n","      Out_Index := (Out_Index mod Pool'Length) + 1;","\n","      Count     := Count - 1;","\n","   end Remove_First;","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}","    function Cur_Count return Natural is","\n","   begin","\n","       return Buffer.Count;","\n","   end Cur_Count;","\n"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},"{","AI95-00433-01","}","    function Max_Count return Natural is","\n","   begin","\n","       return Pool'Length;","\n","   end Max_Count;","\n","end Buffer;","\n"))}m.isMDXComponent=!0}}]);