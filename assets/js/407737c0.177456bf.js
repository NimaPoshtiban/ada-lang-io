"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[8438],{35602:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>n,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var i=r(58168),t=(r(96540),r(15680));const s={sidebar_position:3},n="Alire vs Apple silicon",l={unversionedId:"learn/getting-started/macos-issues/alire-vs-aarch64",id:"learn/getting-started/macos-issues/alire-vs-aarch64",title:"Alire vs Apple silicon",description:"Alire releases available from the Alire website are all built for Intel silicon. For pure Ada work, this has no effect, whether or not you're working on Apple silicon.",source:"@site/docs/learn/getting-started/macos-issues/alire-vs-aarch64.md",sourceDirName:"learn/getting-started/macos-issues",slug:"/learn/getting-started/macos-issues/alire-vs-aarch64",permalink:"/docs/learn/getting-started/macos-issues/alire-vs-aarch64",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Alire",permalink:"/docs/learn/getting-started/macos-issues/alire"},next:{title:"Crates for macOS",permalink:"/docs/learn/getting-started/macos-issues/crates"}},o={},p=[],c={toc:p},d="wrapper";function m(e){let{components:a,...r}=e;return(0,t.yg)(d,(0,i.A)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"alire-vs-apple-silicon"},"Alire vs Apple silicon"),(0,t.yg)("p",null,"Alire releases available from the ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/alire-project/alire/releases"},"Alire website")," are all built for Intel silicon. For pure Ada work, this has no effect, whether or not you're working on Apple silicon."),(0,t.yg)("p",null,"One area where there's a considerable impact is when your work involves \"",(0,t.yg)("a",{parentName:"p",href:"https://alire.ada.dev/docs/#external-releases"},"external releases"),'". These are external libraries which Alire manages as required using your system\'s "package manager". An example is the crate ',(0,t.yg)("inlineCode",{parentName:"p"},"sdlada"),", which depends on ",(0,t.yg)("inlineCode",{parentName:"p"},"libsdl2")," amongst others. On a Debian system, Alire will load the package ",(0,t.yg)("inlineCode",{parentName:"p"},"libsdl2-dev"),"; on macOS with Homebrew, ",(0,t.yg)("inlineCode",{parentName:"p"},"sdl2"),"."),(0,t.yg)("p",null,"For macOS, the package managers supported are ",(0,t.yg)("a",{parentName:"p",href:"https://brew.sh"},"Homebrew")," and ",(0,t.yg)("a",{parentName:"p",href:"https://www.macports.org"},"MacPorts")," - if you have both installed (not really recommended) Alire will choose Homebrew. Homebrew is the one that this page concentrates on."),(0,t.yg)("p",null,"If yours is an ",(0,t.yg)("inlineCode",{parentName:"p"},"x86_64")," Mac, Homebrew will load ",(0,t.yg)("inlineCode",{parentName:"p"},"x86_64")," binaries under ",(0,t.yg)("inlineCode",{parentName:"p"},"/usr/local/"),". If it's an ",(0,t.yg)("inlineCode",{parentName:"p"},"aarch64")," Mac, Homebrew will load ",(0,t.yg)("inlineCode",{parentName:"p"},"aarch64")," binaries under ",(0,t.yg)("inlineCode",{parentName:"p"},"/opt/homebrew/")," (this is by default; trying to mix architectures is likely to be at best confusing)."),(0,t.yg)("p",null,"So, if you're on an ",(0,t.yg)("inlineCode",{parentName:"p"},"aarch64")," Mac with an ",(0,t.yg)("inlineCode",{parentName:"p"},"x86_64")," GNAT compiler, you won't be able to use external libraries, because the linker will refuse to link your ",(0,t.yg)("inlineCode",{parentName:"p"},"x86_64")," binaries with Homebrew's ",(0,t.yg)("inlineCode",{parentName:"p"},"aarch64")," ones."))}m.isMDXComponent=!0}}]);