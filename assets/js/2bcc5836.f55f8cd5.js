"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6905],{70398:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=t(58168),i=(t(96540),t(15680));const r={title:"5.2 Parameter Lists"},o=void 0,l={unversionedId:"style-guide/s5/02",id:"style-guide/s5/02",title:"5.2 Parameter Lists",description:"A subprogram or entry parameter list is the interface to the abstraction",source:"@site/docs/style-guide/s5/02.mdx",sourceDirName:"style-guide/s5",slug:"/style-guide/s5/02",permalink:"/docs/style-guide/s5/02",draft:!1,tags:[],version:"current",frontMatter:{title:"5.2 Parameter Lists"},sidebar:"styleGuideSidebar",previous:{title:"5.1 Optional Parts of the Syntax",permalink:"/docs/style-guide/s5/01"},next:{title:"5.3 Types",permalink:"/docs/style-guide/s5/03"}},s={},d=[{value:"Formal Parameters",id:"formal-parameters",level:3},{value:"guideline",id:"guideline",level:4},{value:"example",id:"example",level:4},{value:"rationale",id:"rationale",level:4},{value:"Named Association",id:"named-association",level:3},{value:"guideline",id:"guideline-1",level:4},{value:"instantiation",id:"instantiation",level:4},{value:"example",id:"example-1",level:4},{value:"rationale",id:"rationale-1",level:4},{value:"notes",id:"notes",level:4},{value:"caution",id:"caution",level:4},{value:"Default Parameters",id:"default-parameters",level:3},{value:"guideline",id:"guideline-2",level:4},{value:"example",id:"example-2",level:4},{value:"rationale",id:"rationale-2",level:4},{value:"exceptions",id:"exceptions",level:4},{value:"Mode Indication",id:"mode-indication",level:3},{value:"guideline",id:"guideline-3",level:4},{value:"example",id:"example-3",level:4},{value:"rationale",id:"rationale-3",level:4},{value:"exceptions",id:"exceptions-1",level:4}],m={toc:d},u="wrapper";function p(e){let{components:a,...t}=e;return(0,i.yg)(u,(0,n.A)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"A subprogram or entry parameter list is the interface to the abstraction\nimplemented by the subprogram or entry. It is important that it is clear\nand that it is expressed in a consistent style. Careful decisions about\nformal parameter naming and ordering can make the purpose of the\nsubprogram easier to understand, which can make it easier to use."),(0,i.yg)("h3",{id:"formal-parameters"},"Formal Parameters"),(0,i.yg)("h4",{id:"guideline"},"guideline"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Name formal parameters descriptively to reduce the need for\ncomments.")),(0,i.yg)("h4",{id:"example"},"example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"List_Manager.Insert (Element     => New_Employee,\n                     Into_List   => Probationary_Employees,\n                     At_Position => 1);\n")),(0,i.yg)("h4",{id:"rationale"},"rationale"),(0,i.yg)("p",null,"Following the variable naming guidelines ( 3.2.1 and 3.2.3 ) for formal\nparameters can make calls to subprograms read more like regular prose,\nas shown in the example above, where no comments are necessary.\nDescriptive names of this sort can also make the code in the body of the\nsubprogram more clear."),(0,i.yg)("h3",{id:"named-association"},"Named Association"),(0,i.yg)("h4",{id:"guideline-1"},"guideline"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use named parameter association in calls of infrequently used\nsubprograms or entries with many formal parameters."),(0,i.yg)("li",{parentName:"ul"},"Use named association when instantiating generics."),(0,i.yg)("li",{parentName:"ul"},"Use named association for clarification when the actual parameter is\nany literal or expression."),(0,i.yg)("li",{parentName:"ul"},"Use named association when supplying a nondefault value to an\noptional parameter.")),(0,i.yg)("h4",{id:"instantiation"},"instantiation"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use named parameter association in calls of subprograms or entries\ncalled from less than five places in a single source file or with\nmore than two formal parameters.")),(0,i.yg)("h4",{id:"example-1"},"example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Encode_Telemetry_Packet (Source         => Power_Electronics,\n                         Content        => Temperature,\n                         Value          => Read_Temperature_Sensor(Power_Electronics),\n                         Time           => Current_Time,\n                         Sequence       => Next_Packet_ID,\n                         Vehicle        => This_Spacecraft,\n                         Primary_Module => True);\n")),(0,i.yg)("h4",{id:"rationale-1"},"rationale"),(0,i.yg)("p",null,"Calls of infrequently used subprograms or entries with many formal\nparameters can be difficult to understand without referring to the\nsubprogram or entry code. Named parameter association can make these\ncalls more readable."),(0,i.yg)("p",null,"When the formal parameters have been named appropriately, it is easier\nto determine exactly what purpose the subprogram serves without looking\nat its code. This reduces the need for named constants that exist solely\nto make calls more readable. It also allows variables used as actual\nparameters to be given names indicating what they are without regard to\nwhy they are being passed in a call. An actual parameter, which is an\nexpression rather than a variable, cannot be named otherwise."),(0,i.yg)("p",null,"Named association allows subprograms to have new parameters inserted\nwith minimal ramifications to existing calls."),(0,i.yg)("h4",{id:"notes"},"notes"),(0,i.yg)("p",null,"The judgment of when named parameter association improves readability is\nsubjective. Certainly, simple or familiar subprograms, such as a swap\nroutine or a sine function, do not require the extra clarification of\nnamed association in the procedure call."),(0,i.yg)("h4",{id:"caution"},"caution"),(0,i.yg)("p",null,"A consequence of named parameter association is that the formal\nparameter names may not be changed without modifying the text of each\ncall."),(0,i.yg)("h3",{id:"default-parameters"},"Default Parameters"),(0,i.yg)("h4",{id:"guideline-2"},"guideline"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Provide default parameters to allow for occasional, special use of\nwidely used subprograms or entries."),(0,i.yg)("li",{parentName:"ul"},"Place default parameters at the end of the formal parameter list."),(0,i.yg)("li",{parentName:"ul"},"Consider providing default values to new parameters added to an\nexisting subprogram.")),(0,i.yg)("h4",{id:"example-2"},"example"),(0,i.yg)("p",null,"Ada Reference Manual (1995) contains many examples of this practice."),(0,i.yg)("h4",{id:"rationale-2"},"rationale"),(0,i.yg)("p",null,"Often, the majority of uses of a subprogram or entry need the same value\nfor a given parameter. Providing that value, as the default for the\nparameter, makes the parameter optional on the majority of calls. It\nalso allows the remaining calls to customize the subprogram or entry by\nproviding different values for that parameter."),(0,i.yg)("p",null,"Placing default parameters at the end of the formal parameter list\nallows the caller to use positional association on the call; otherwise,\ndefaults are available only when named association is used."),(0,i.yg)("p",null,"Often during maintenance activities, you increase the functionality of a\nsubprogram or entry. This requires more parameters than the original\nform for some calls. New parameters may be required to control this new\nfunctionality. Give the new parameters default values that specify the\nold functionality. Calls needing the old functionality need not be\nchanged; they take the defaults. This is true if the new parameters are\nadded to the end of the parameter list, or if named association is used\non all calls. New calls needing the new functionality can specify that\nby providing other values for the new parameters."),(0,i.yg)("p",null,"This enhances maintainability in that the places that use the modified\nroutines do not themselves have to be modified, while the previous\nfunctionality levels of the routines are allowed to be ",(0,i.yg)("em",{parentName:"p"},'"reused."')),(0,i.yg)("h4",{id:"exceptions"},"exceptions"),(0,i.yg)("p",null,"Do not go overboard. If the changes in functionality are truly radical,\nyou should be preparing a separate routine rather than modifying an\nexisting one. One indicator of this situation would be that it is\ndifficult to determine value combinations for the defaults that uniquely\nand naturally require the more restrictive of the two functions. In such\ncases, it is better to go ahead with creation of a separate routine."),(0,i.yg)("h3",{id:"mode-indication"},"Mode Indication"),(0,i.yg)("h4",{id:"guideline-3"},"guideline"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Show the mode indication of all procedure and entry parameters\n(Nissen and Wallis 1984 )."),(0,i.yg)("li",{parentName:"ul"},"Use the most restrictive parameter mode applicable to your\napplication.")),(0,i.yg)("h4",{id:"example-3"},"example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"procedure Open_File (File_Name   : in     String;\n                     Open_Status :    out Status_Codes);\nentry Acquire (Key      : in     Capability;\n               Resource :    out Tape_Drive);\n")),(0,i.yg)("h4",{id:"rationale-3"},"rationale"),(0,i.yg)("p",null,"By showing the mode of parameters, you aid the reader. If you do not\nspecify a parameter mode, the default mode is ",(0,i.yg)("inlineCode",{parentName:"p"},"in"),". Explicitly showing\nthe mode indication of all parameters is a more assertive action than\nsimply taking the default mode. Anyone reviewing the code later will be\nmore confident that you intended the parameter mode to be ",(0,i.yg)("inlineCode",{parentName:"p"},"in"),"."),(0,i.yg)("p",null,"Use the mode that reflects the actual use of the parameter. You should\navoid the tendency to make all parameters ",(0,i.yg)("inlineCode",{parentName:"p"},"in out")," mode because ",(0,i.yg)("inlineCode",{parentName:"p"},"out"),"\nmode parameters may be examined as well as updated."),(0,i.yg)("h4",{id:"exceptions-1"},"exceptions"),(0,i.yg)("p",null,"It may be necessary to consider several alternative implementations for\na given abstraction. For example, a bounded stack can be implemented as\na pointer to an array. Even though an update to the object being pointed\nto does not require changing the pointer value itself, you may want to\nconsider making the mode ",(0,i.yg)("inlineCode",{parentName:"p"},"in out")," to allow changes to the implementation\nand to document more accurately what the operation is doing. If you\nlater change the implementation to a simple array, the mode will have to\nbe ",(0,i.yg)("inlineCode",{parentName:"p"},"in out"),", potentially causing changes to all places that the routine\nis called."))}p.isMDXComponent=!0}}]);