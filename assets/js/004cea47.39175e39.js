"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6625],{1565:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>A,contentTitle:()=>f,default:()=>k,frontMatter:()=>m,metadata:()=>b,toc:()=>h});var a=r(1716),n=r(7353),o=Object.defineProperty,s=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,d=(e,t)=>{for(var r in t||(t={}))u.call(t,r)&&p(e,r,t[r]);if(l)for(var r of l(t))c.call(t,r)&&p(e,r,t[r]);return e};const m={sidebar_position:48},f="6 Subprograms",b={unversionedId:"arm/AA-6/AA-6",id:"arm/AA-6/AA-6",title:"6 Subprograms",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-6/AA-6.mdx",sourceDirName:"arm/AA-6",slug:"/arm/AA-6/",permalink:"/docs/arm/AA-6/",draft:!1,tags:[],version:"current",sidebarPosition:48,frontMatter:{sidebar_position:48},sidebar:"referenceManualSidebar",previous:{title:"5.8 Goto Statements",permalink:"/docs/arm/AA-5/AA-5.8"},next:{title:"6.1 Subprogram Declarations",permalink:"/docs/arm/AA-6/AA-6.1"}},A={},h=[],g={toc:h};function k(e){var t,r=e,{components:o}=r,p=((e,t)=>{var r={};for(var a in e)u.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&l)for(var a of l(e))t.indexOf(a)<0&&c.call(e,a)&&(r[a]=e[a]);return r})(r,["components"]);return(0,a.kt)("wrapper",(t=d(d({},g),p),s(t,i({components:o,mdxType:"MDXLayout"}))),(0,a.kt)("h1",d({},{id:"6-subprograms"}),"6 Subprograms"),(0,a.kt)("admonition",d({},{type:"warning"}),(0,a.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,a.kt)("a",d({parentName:"p"},{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"}),"tracking issue"))),(0,a.kt)("p",null,"A subprogram is a program unit or intrinsic operation whose execution is invoked by a subprogram call. There are two forms of subprogram: procedures and functions. A procedure call is a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0167"},"statement")),"; a function call is an expression and returns a value. The definition of a subprogram can be given in two parts: a subprogram declaration defining its interface, and a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body"))," defining its execution. [Operators and enumeration literals are functions.] "),(0,a.kt)(n.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"To be honest: "),"A function call is an expression, but more specifically it is a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-4/AA-4.1#S0091"},"name")),". ")),(0,a.kt)(n.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Glossary entry: "),"A subprogram is a section of a program that can be executed in various contexts. It is invoked by a subprogram call that may qualify the effect of the subprogram through the passing of parameters. There are two forms of subprograms: functions, which return values, and procedures, which do not.")),(0,a.kt)(n.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Glossary entry: "),"A function is a form of subprogram that returns a result and can be called as part of an expression.")),(0,a.kt)(n.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Glossary entry: "),"A procedure is a form of subprogram that does not return a result and can only be called by a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-5/AA-5.1#S0167"},"statement")),".")),(0,a.kt)("p",null,"Version=[5],Kind=(AddedNormal),Group=[S],Term=[subprogram], Def=[a unit of a program that can be brought into execution in various contexts, with the invocation being a subprogram call that can parameterize the effect of the subprogram through the passing of operands], Note1=[There are two forms of subprograms: functions, which return values, and procedures, which do not.] Version=[5],Kind=(AddedNormal),Group=[S],Term=[function], Def=[a form of subprogram that returns a result and can be called as part of an expression] Version=[5],Kind=(AddedNormal),Group=[S],Term=[procedure], Def=[a form of subprogram that does not return a result and can only be invoked by a statement]"),(0,a.kt)("p",null,"{",(0,a.kt)("em",null,"AI05-0299-1"),"}"," A ",(0,a.kt)("em",null,"callable entity")," is a subprogram or entry (see Section 9). A callable entity is invoked by a ",(0,a.kt)("em",null,"call"),"; that is, a subprogram call or entry call. A ",(0,a.kt)("em",null,"callable construct")," is a construct that defines the action of a call upon a callable entity: a ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-6/AA-6.3#S0216"},"subprogram_body")),", ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-9/AA-9.5#S0260"},"entry_body")),", or ",(0,a.kt)("code",null,(0,a.kt)("a",{href:"../AA-9/AA-9.5#S0258"},"accept_statement")),". "),(0,a.kt)(n.Z,{type:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("strong",null,"Ramification: "),'Note that "callable entity" includes predefined operators, enumeration literals, and abstract subprograms. "Call" includes calls of these things. They do not have callable constructs, since they don\'t have completions. ')))}k.isMDXComponent=!0}}]);