"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[8818],{1716:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>f});var a=t(6687);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),c=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=c(e.components);return a.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),f=n,d=m["".concat(l,".").concat(f)]||m[f]||p[f]||o;return t?a.createElement(d,i(i({ref:r},u),{},{components:t})):a.createElement(d,i({ref:r},u))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2452:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(9440),n=(t(6687),t(1716));const o={sidebar_position:48},i="6 Subprograms",s={unversionedId:"arm/AA-6",id:"arm/AA-6",title:"6 Subprograms",description:"We're still working on the Reference manual output.  Internal links are broken,",source:"@site/docs/arm/AA-6.md",sourceDirName:"arm",slug:"/arm/AA-6",permalink:"/docs/arm/AA-6",draft:!1,tags:[],version:"current",sidebarPosition:48,frontMatter:{sidebar_position:48},sidebar:"tutorialSidebar",previous:{title:"5.8  Goto Statements",permalink:"/docs/arm/AA-5.8"},next:{title:"6.1  Subprogram Declarations",permalink:"/docs/arm/AA-6.1"}},l={},c=[],u={toc:c};function p(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"6-subprograms"},"6 Subprograms"),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"We're still working on the Reference manual output.  Internal links are broken,\nas are a bunch of other things.\nSee the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ada-lang-io/ada-lang-io/issues/20"},"tracking issue"))),(0,n.kt)("p",null,"A subprogram is a program unit or intrinsic operation whose execution is invoked by a subprogram call. There are two forms of subprogram: procedures and functions. A procedure call is a ",(0,n.kt)("a",{parentName:"p",href:"./AA-5.1#S0167"},"statement"),"; a function call is an expression and returns a value. The definition of a subprogram can be given in two parts: a subprogram declaration defining its interface, and a ",(0,n.kt)("a",{parentName:"p",href:"./AA-6.3#S0216"},"subprogram_body")," defining its execution. ","[Operators and enumeration literals are functions.]"," "),(0,n.kt)("p",null,"To be honest: A function call is an expression, but more specifically it is a ",(0,n.kt)("a",{parentName:"p",href:"./AA-4.1#S0091"},"name"),". "),(0,n.kt)("p",null,"Glossary entry: A subprogram is a section of a program that can be executed in various contexts. It is invoked by a subprogram call that may qualify the effect of the subprogram through the passing of parameters. There are two forms of subprograms: functions, which return values, and procedures, which do not."),(0,n.kt)("p",null,"Glossary entry: A function is a form of subprogram that returns a result and can be called as part of an expression."),(0,n.kt)("p",null,"Glossary entry: A procedure is a form of subprogram that does not return a result and can only be called by a ",(0,n.kt)("a",{parentName:"p",href:"./AA-5.1#S0167"},"statement"),"."),(0,n.kt)("p",null,"Version=","[5]",",Kind=(AddedNormal),Group=","[S]",",Term=","[subprogram]",", Def=","[a unit of a program that can be brought into execution in various contexts, with the invocation being a subprogram call that can parameterize the effect of the subprogram through the passing of operands]",", Note1=","[There are two forms of subprograms: functions, which return values, and procedures, which do not.]"," Version=","[5]",",Kind=(AddedNormal),Group=","[S]",",Term=","[function]",", Def=","[a form of subprogram that returns a result and can be called as part of an expression]"," Version=","[5]",",Kind=(AddedNormal),Group=","[S]",",Term=","[procedure]",", Def=","[a form of subprogram that does not return a result and can only be invoked by a statement]"),(0,n.kt)("p",null,"{AI05-0299-1} A callable entity is a subprogram or entry (see Section 9). A callable entity is invoked by a call; that is, a subprogram call or entry call. A callable construct is a construct that defines the action of a call upon a callable entity: a ",(0,n.kt)("a",{parentName:"p",href:"./AA-6.3#S0216"},"subprogram_body"),", ",(0,n.kt)("a",{parentName:"p",href:"./AA-9.5#S0260"},"entry_body"),", or ",(0,n.kt)("a",{parentName:"p",href:"./AA-9.5#S0258"},"accept_statement"),". "),(0,n.kt)("p",null,'Ramification: Note that "callable entity" includes predefined operators, enumeration literals, and abstract subprograms. "Call" includes calls of these things. They do not have callable constructs, since they don\'t have completions.'))}p.isMDXComponent=!0}}]);